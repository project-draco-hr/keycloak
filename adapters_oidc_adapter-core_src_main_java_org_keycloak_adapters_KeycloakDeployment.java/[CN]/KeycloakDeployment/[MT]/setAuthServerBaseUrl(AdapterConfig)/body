{
  this.authServerBaseUrl=config.getAuthServerUrl();
  String authServerURLForBackendReqs=config.getAuthServerUrlForBackendRequests();
  if (authServerBaseUrl == null && authServerURLForBackendReqs == null)   return;
  URI authServerUri=null;
  if (authServerBaseUrl != null) {
    authServerUri=URI.create(authServerBaseUrl);
  }
  if (authServerUri == null || authServerUri.getHost() == null) {
    if (authServerURLForBackendReqs != null) {
      relativeUrls=RelativeUrlsUsed.BROWSER_ONLY;
      KeycloakUriBuilder serverBuilder=KeycloakUriBuilder.fromUri(authServerURLForBackendReqs);
      if (serverBuilder.getHost() == null || serverBuilder.getScheme() == null) {
        throw new IllegalStateException("Relative URL not supported for auth-server-url-for-backend-requests option. URL used: " + authServerURLForBackendReqs + ", Client: "+ config.getResource());
      }
      resolveNonBrowserUrls(serverBuilder);
    }
 else {
      relativeUrls=RelativeUrlsUsed.ALL_REQUESTS;
    }
  }
 else {
    relativeUrls=RelativeUrlsUsed.NEVER;
    KeycloakUriBuilder serverBuilder=KeycloakUriBuilder.fromUri(authServerBaseUrl);
    resolveBrowserUrls(serverBuilder);
    if (authServerURLForBackendReqs == null) {
      resolveNonBrowserUrls(serverBuilder);
    }
 else {
      serverBuilder=KeycloakUriBuilder.fromUri(authServerURLForBackendReqs);
      resolveNonBrowserUrls(serverBuilder);
    }
  }
}
