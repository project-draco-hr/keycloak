{
  String url=getRequestUrl();
  log.debugf("callback uri: %s",url);
  if (!facade.getRequest().isSecure() && deployment.getSslRequired().isRequired(facade.getRequest().getRemoteAddr())) {
    int port=sslRedirectPort();
    if (port < 0) {
      return null;
    }
    KeycloakUriBuilder secureUrl=KeycloakUriBuilder.fromUri(url).scheme("https").port(-1);
    if (port != 443)     secureUrl.port(port);
    url=secureUrl.build().toString();
  }
  String loginHint=getQueryParamValue("login_hint");
  url=UriUtils.stripQueryParam(url,"login_hint");
  String idpHint=getQueryParamValue(AdapterConstants.KC_IDP_HINT);
  url=UriUtils.stripQueryParam(url,AdapterConstants.KC_IDP_HINT);
  String scope=getQueryParamValue(OAuth2Constants.SCOPE);
  url=UriUtils.stripQueryParam(url,OAuth2Constants.SCOPE);
  String prompt=getQueryParamValue(OAuth2Constants.PROMPT);
  url=UriUtils.stripQueryParam(url,OAuth2Constants.PROMPT);
  String maxAge=getQueryParamValue(OAuth2Constants.MAX_AGE);
  url=UriUtils.stripQueryParam(url,OAuth2Constants.MAX_AGE);
  KeycloakUriBuilder redirectUriBuilder=deployment.getAuthUrl().clone().queryParam(OAuth2Constants.RESPONSE_TYPE,OAuth2Constants.CODE).queryParam(OAuth2Constants.CLIENT_ID,deployment.getResourceName()).queryParam(OAuth2Constants.REDIRECT_URI,url).queryParam(OAuth2Constants.STATE,state).queryParam("login","true");
  if (loginHint != null && loginHint.length() > 0) {
    redirectUriBuilder.queryParam("login_hint",loginHint);
  }
  if (idpHint != null && idpHint.length() > 0) {
    redirectUriBuilder.queryParam(AdapterConstants.KC_IDP_HINT,idpHint);
  }
  if (prompt != null && prompt.length() > 0) {
    redirectUriBuilder.queryParam(OAuth2Constants.PROMPT,prompt);
  }
  if (maxAge != null && maxAge.length() > 0) {
    redirectUriBuilder.queryParam(OAuth2Constants.MAX_AGE,maxAge);
  }
  scope=TokenUtil.attachOIDCScope(scope);
  redirectUriBuilder.queryParam(OAuth2Constants.SCOPE,scope);
  return redirectUriBuilder.build().toString();
}
