{
  if (checkActive) {
    if (log.isTraceEnabled()) {
      log.trace("checking whether to refresh.");
    }
    if (isActive() && isTokenTimeToLiveSufficient(this.token))     return true;
  }
  if (this.deployment == null || refreshToken == null)   return false;
  if (!this.getRealm().equals(this.deployment.getRealm())) {
    return false;
  }
  if (log.isTraceEnabled()) {
    log.trace("Doing refresh");
  }
  AccessTokenResponse response=null;
  try {
    response=ServerRequest.invokeRefresh(deployment,refreshToken);
  }
 catch (  IOException e) {
    log.error("Refresh token failure",e);
    return false;
  }
catch (  ServerRequest.HttpFailure httpFailure) {
    log.error("Refresh token failure status: " + httpFailure.getStatus() + " "+ httpFailure.getError());
    return false;
  }
  if (log.isTraceEnabled()) {
    log.trace("received refresh response");
  }
  String tokenString=response.getToken();
  AccessToken token=null;
  try {
    token=AdapterRSATokenVerifier.verifyToken(tokenString,deployment);
    log.debug("Token Verification succeeded!");
  }
 catch (  VerificationException e) {
    log.error("failed verification of token");
    return false;
  }
  if (!isTokenTimeToLiveSufficient(token)) {
    log.error("failed to refresh the token with a longer time-to-live than the minimum");
    return false;
  }
  if (response.getNotBeforePolicy() > deployment.getNotBefore()) {
    deployment.setNotBefore(response.getNotBeforePolicy());
  }
  this.token=token;
  if (response.getRefreshToken() != null) {
    if (log.isTraceEnabled()) {
      log.trace("Setup new refresh token to the security context");
    }
    this.refreshToken=response.getRefreshToken();
  }
  this.tokenString=tokenString;
  tokenStore.refreshCallback(this);
  return true;
}
