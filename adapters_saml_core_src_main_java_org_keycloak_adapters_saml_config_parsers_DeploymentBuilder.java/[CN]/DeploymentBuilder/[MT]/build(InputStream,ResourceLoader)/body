{
  DefaultSamlDeployment deployment=new DefaultSamlDeployment();
  DefaultSamlDeployment.DefaultIDP idp=new DefaultSamlDeployment.DefaultIDP();
  DefaultSamlDeployment.DefaultSingleSignOnService sso=new DefaultSamlDeployment.DefaultSingleSignOnService();
  DefaultSamlDeployment.DefaultSingleLogoutService slo=new DefaultSamlDeployment.DefaultSingleLogoutService();
  idp.setSingleSignOnService(sso);
  idp.setSingleLogoutService(slo);
  KeycloakSamlAdapter adapter=(KeycloakSamlAdapter)(new KeycloakSamlAdapterXMLParser().parse(xml));
  SP sp=adapter.getSps().get(0);
  deployment.setConfigured(true);
  deployment.setEntityID(sp.getEntityID());
  deployment.setForceAuthentication(sp.isForceAuthentication());
  deployment.setIsPassive(sp.isIsPassive());
  deployment.setNameIDPolicyFormat(sp.getNameIDPolicyFormat());
  deployment.setLogoutPage(sp.getLogoutPage());
  deployment.setSignatureCanonicalizationMethod(sp.getIdp().getSignatureCanonicalizationMethod());
  deployment.setSignatureAlgorithm(SignatureAlgorithm.RSA_SHA256);
  if (sp.getIdp().getSignatureAlgorithm() != null) {
    deployment.setSignatureAlgorithm(SignatureAlgorithm.valueOf(sp.getIdp().getSignatureAlgorithm()));
  }
  if (sp.getPrincipalNameMapping() != null) {
    SamlDeployment.PrincipalNamePolicy policy=SamlDeployment.PrincipalNamePolicy.valueOf(sp.getPrincipalNameMapping().getPolicy());
    deployment.setPrincipalNamePolicy(policy);
    deployment.setPrincipalAttributeName(sp.getPrincipalNameMapping().getAttributeName());
  }
  deployment.setRoleAttributeNames(sp.getRoleAttributes());
  if (sp.getRoleAttributes() == null) {
    Set<String> roles=new HashSet<>();
    roles.add("Role");
    deployment.setRoleAttributeNames(roles);
  }
  if (sp.getSslPolicy() != null) {
    SslRequired ssl=SslRequired.valueOf(sp.getSslPolicy());
    deployment.setSslRequired(ssl);
  }
  if (sp.getKeys() != null) {
    for (    Key key : sp.getKeys()) {
      if (key.isSigning()) {
        PrivateKey privateKey=null;
        PublicKey publicKey=null;
        if (key.getKeystore() != null) {
          KeyStore keyStore=loadKeystore(resourceLoader,key);
          Certificate cert=null;
          try {
            log.debugf("Try to load key [%s]",key.getKeystore().getCertificateAlias());
            cert=keyStore.getCertificate(key.getKeystore().getCertificateAlias());
            if (cert == null) {
              log.errorf("Key alias %s is not found into keystore",key.getKeystore().getCertificateAlias());
            }
            privateKey=(PrivateKey)keyStore.getKey(key.getKeystore().getPrivateKeyAlias(),key.getKeystore().getPrivateKeyPassword().toCharArray());
            publicKey=cert.getPublicKey();
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
 else {
          if (key.getPrivateKeyPem() == null) {
            throw new RuntimeException("SP signing key must have a PrivateKey defined");
          }
          try {
            privateKey=PemUtils.decodePrivateKey(key.getPrivateKeyPem().trim());
            if (key.getPublicKeyPem() == null && key.getCertificatePem() == null) {
              throw new RuntimeException("Sp signing key must have a PublicKey or Certificate defined");
            }
            publicKey=getPublicKeyFromPem(key);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
        KeyPair keyPair=new KeyPair(publicKey,privateKey);
        deployment.setSigningKeyPair(keyPair);
      }
      if (key.isEncryption()) {
        if (key.getKeystore() != null) {
          KeyStore keyStore=loadKeystore(resourceLoader,key);
          try {
            PrivateKey privateKey=(PrivateKey)keyStore.getKey(key.getKeystore().getPrivateKeyAlias(),key.getKeystore().getPrivateKeyPassword().toCharArray());
            deployment.setDecryptionKey(privateKey);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
 else {
          if (key.getPrivateKeyPem() == null) {
            throw new RuntimeException("SP signing key must have a PrivateKey defined");
          }
          try {
            PrivateKey privateKey=PemUtils.decodePrivateKey(key.getPrivateKeyPem().trim());
            deployment.setDecryptionKey(privateKey);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
  }
  deployment.setIdp(idp);
  idp.setEntityID(sp.getIdp().getEntityID());
  sso.setRequestBinding(SamlDeployment.Binding.parseBinding(sp.getIdp().getSingleSignOnService().getRequestBinding()));
  sso.setRequestBindingUrl(sp.getIdp().getSingleSignOnService().getBindingUrl());
  if (sp.getIdp().getSingleSignOnService().getResponseBinding() != null) {
    sso.setResponseBinding(SamlDeployment.Binding.parseBinding(sp.getIdp().getSingleSignOnService().getResponseBinding()));
  }
  sso.setSignRequest(sp.getIdp().getSingleSignOnService().isSignRequest());
  sso.setValidateResponseSignature(sp.getIdp().getSingleSignOnService().isValidateResponseSignature());
  sso.setValidateAssertionSignature(sp.getIdp().getSingleSignOnService().isValidateAssertionSignature());
  slo.setSignRequest(sp.getIdp().getSingleLogoutService().isSignRequest());
  slo.setSignResponse(sp.getIdp().getSingleLogoutService().isSignResponse());
  slo.setValidateResponseSignature(sp.getIdp().getSingleLogoutService().isValidateResponseSignature());
  slo.setValidateRequestSignature(sp.getIdp().getSingleLogoutService().isValidateRequestSignature());
  slo.setRequestBinding(SamlDeployment.Binding.parseBinding(sp.getIdp().getSingleLogoutService().getRequestBinding()));
  slo.setResponseBinding(SamlDeployment.Binding.parseBinding(sp.getIdp().getSingleLogoutService().getResponseBinding()));
  if (slo.getRequestBinding() == SamlDeployment.Binding.POST) {
    slo.setRequestBindingUrl(sp.getIdp().getSingleLogoutService().getPostBindingUrl());
  }
 else {
    slo.setRequestBindingUrl(sp.getIdp().getSingleLogoutService().getRedirectBindingUrl());
  }
  if (slo.getResponseBinding() == SamlDeployment.Binding.POST) {
    slo.setResponseBindingUrl(sp.getIdp().getSingleLogoutService().getPostBindingUrl());
  }
 else {
    slo.setResponseBindingUrl(sp.getIdp().getSingleLogoutService().getRedirectBindingUrl());
  }
  if (sp.getIdp().getKeys() != null) {
    for (    Key key : sp.getIdp().getKeys()) {
      if (key.isSigning()) {
        if (key.getKeystore() != null) {
          KeyStore keyStore=loadKeystore(resourceLoader,key);
          Certificate cert=null;
          try {
            cert=keyStore.getCertificate(key.getKeystore().getCertificateAlias());
          }
 catch (          KeyStoreException e) {
            throw new RuntimeException(e);
          }
          idp.setSignatureValidationKey(cert.getPublicKey());
        }
 else {
          if (key.getPublicKeyPem() == null && key.getCertificatePem() == null) {
            throw new RuntimeException("IDP signing key must have a PublicKey or Certificate defined");
          }
          try {
            PublicKey publicKey=getPublicKeyFromPem(key);
            idp.setSignatureValidationKey(publicKey);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
  }
  return deployment;
}
