{
  EventBuilder event=new EventsManager(realm,session,clientConnection).createEventBuilder();
  if (error != null) {
    event.event(EventType.LOGIN);
    event.error(error);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,headers,Messages.IDENTITY_PROVIDER_UNEXPECTED_ERROR);
  }
  try {
    if (authorizationCode != null) {
      String response=SimpleHttp.doPost(getConfig().getTokenUrl()).param(OAUTH2_PARAMETER_CODE,authorizationCode).param(OAUTH2_PARAMETER_CLIENT_ID,getConfig().getClientId()).param(OAUTH2_PARAMETER_CLIENT_SECRET,getConfig().getClientSecret()).param(OAUTH2_PARAMETER_REDIRECT_URI,uriInfo.getAbsolutePath().toString()).param(OAUTH2_PARAMETER_GRANT_TYPE,OAUTH2_GRANT_TYPE_AUTHORIZATION_CODE).asString();
      HashMap<String,String> userNotes=new HashMap<String,String>();
      FederatedIdentity federatedIdentity=getFederatedIdentity(userNotes,response);
      if (getConfig().isStoreToken()) {
        federatedIdentity.setToken(response);
      }
      return callback.authenticated(userNotes,getConfig(),federatedIdentity,state);
    }
  }
 catch (  Exception e) {
    logger.error("Failed to make identity provider oauth callback",e);
  }
  event.event(EventType.LOGIN);
  event.error(Errors.IDENTITY_PROVIDER_LOGIN_FAILURE);
  return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,headers,Messages.IDENTITY_PROVIDER_UNEXPECTED_ERROR);
}
