{
  String brokerUserId=config.getAlias() + "." + request.getNameID().getValue();
  if (request.getSessionIndex() == null || request.getSessionIndex().isEmpty()) {
    List<UserSessionModel> userSessions=session.sessions().getUserSessionByBrokerUserId(realm,brokerUserId);
    for (    UserSessionModel userSession : userSessions) {
      if (userSession.getState() == UserSessionModel.State.LOGGING_OUT || userSession.getState() == UserSessionModel.State.LOGGED_OUT) {
        continue;
      }
      try {
        AuthenticationManager.backchannelLogout(session,realm,userSession,uriInfo,clientConnection,headers,false);
      }
 catch (      Exception e) {
        logger.warn("failed to do backchannel logout for userSession",e);
      }
    }
  }
 else {
    for (    String sessionIndex : request.getSessionIndex()) {
      String brokerSessionId=brokerUserId + "." + sessionIndex;
      UserSessionModel userSession=session.sessions().getUserSessionByBrokerSessionId(realm,brokerSessionId);
      if (userSession != null) {
        if (userSession.getState() == UserSessionModel.State.LOGGING_OUT || userSession.getState() == UserSessionModel.State.LOGGED_OUT) {
          continue;
        }
        try {
          AuthenticationManager.backchannelLogout(session,realm,userSession,uriInfo,clientConnection,headers,false);
        }
 catch (        Exception e) {
          logger.warn("failed to do backchannel logout for userSession",e);
        }
      }
    }
  }
  String issuerURL=getEntityId(uriInfo,realm);
  SAML2LogoutResponseBuilder builder=new SAML2LogoutResponseBuilder();
  builder.logoutRequestID(request.getID());
  builder.destination(config.getSingleLogoutServiceUrl());
  builder.issuer(issuerURL);
  builder.relayState(relayState);
  if (config.isWantAuthnRequestsSigned()) {
    builder.signWith(realm.getPrivateKey(),realm.getPublicKey(),realm.getCertificate()).signatureAlgorithm(provider.getSignatureAlgorithm()).signDocument();
  }
  try {
    if (config.isPostBindingResponse()) {
      return builder.postBinding().response();
    }
 else {
      return builder.redirectBinding().response();
    }
  }
 catch (  ConfigurationException e) {
    throw new RuntimeException(e);
  }
catch (  ProcessingException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
