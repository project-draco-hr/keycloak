{
  try {
    UriInfo uriInfo=request.getUriInfo();
    RealmModel realm=request.getRealm();
    String issuerURL=getEntityId(uriInfo,realm);
    String destinationUrl=getConfig().getSingleSignOnServiceUrl();
    String nameIDPolicyFormat=getConfig().getNameIDPolicyFormat();
    if (nameIDPolicyFormat == null) {
      nameIDPolicyFormat=JBossSAMLURIConstants.NAMEID_FORMAT_PERSISTENT.get();
    }
    String protocolBinding=JBossSAMLURIConstants.SAML_HTTP_REDIRECT_BINDING.get();
    if (getConfig().isPostBindingResponse()) {
      protocolBinding=JBossSAMLURIConstants.SAML_HTTP_POST_BINDING.get();
    }
    SAML2AuthnRequestBuilder authnRequestBuilder=new SAML2AuthnRequestBuilder().assertionConsumerUrl(request.getRedirectUri()).destination(destinationUrl).issuer(issuerURL).forceAuthn(getConfig().isForceAuthn()).protocolBinding(protocolBinding).nameIdPolicy(SAML2NameIDPolicyBuilder.format(nameIDPolicyFormat)).relayState(request.getState());
    if (getConfig().isWantAuthnRequestsSigned()) {
      PrivateKey privateKey=realm.getPrivateKey();
      PublicKey publicKey=realm.getPublicKey();
      if (privateKey == null) {
        throw new IdentityBrokerException("Identity Provider [" + getConfig().getName() + "] wants a signed authentication request. But the Realm ["+ realm.getName()+ "] does not have a private key.");
      }
      if (publicKey == null) {
        throw new IdentityBrokerException("Identity Provider [" + getConfig().getName() + "] wants a signed authentication request. But the Realm ["+ realm.getName()+ "] does not have a public key.");
      }
      KeyPair keypair=new KeyPair(publicKey,privateKey);
      authnRequestBuilder.signWith(keypair);
      authnRequestBuilder.signDocument();
    }
    if (getConfig().isPostBindingAuthnRequest()) {
      return AuthenticationResponse.fromResponse(authnRequestBuilder.postBinding().request());
    }
 else {
      return AuthenticationResponse.fromResponse(authnRequestBuilder.redirectBinding().request());
    }
  }
 catch (  Exception e) {
    throw new IdentityBrokerException("Could not create authentication request.",e);
  }
}
