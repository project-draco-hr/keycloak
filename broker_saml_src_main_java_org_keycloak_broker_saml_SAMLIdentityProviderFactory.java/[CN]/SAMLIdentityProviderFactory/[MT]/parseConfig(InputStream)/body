{
  try {
    Object parsedObject=new SAMLParser().parse(inputStream);
    EntityDescriptorType entityType;
    if (EntitiesDescriptorType.class.isInstance(parsedObject)) {
      entityType=(EntityDescriptorType)((EntitiesDescriptorType)parsedObject).getEntityDescriptor().get(0);
    }
 else {
      entityType=(EntityDescriptorType)parsedObject;
    }
    List<EntityDescriptorType.EDTChoiceType> choiceType=entityType.getChoiceType();
    if (!choiceType.isEmpty()) {
      EntityDescriptorType.EDTChoiceType edtChoiceType=choiceType.get(0);
      List<EntityDescriptorType.EDTDescriptorChoiceType> descriptors=edtChoiceType.getDescriptors();
      if (!descriptors.isEmpty()) {
        EntityDescriptorType.EDTDescriptorChoiceType edtDescriptorChoiceType=descriptors.get(0);
        IDPSSODescriptorType idpDescriptor=edtDescriptorChoiceType.getIdpDescriptor();
        if (idpDescriptor != null) {
          SAMLIdentityProviderConfig samlIdentityProviderConfig=new SAMLIdentityProviderConfig();
          samlIdentityProviderConfig.setSingleSignOnServiceUrl(idpDescriptor.getSingleSignOnService().get(0).getLocation().toString());
          samlIdentityProviderConfig.setWantAuthnRequestsSigned(idpDescriptor.isWantAuthnRequestsSigned());
          samlIdentityProviderConfig.setValidateSignature(idpDescriptor.isWantAuthnRequestsSigned());
          List<KeyDescriptorType> keyDescriptor=idpDescriptor.getKeyDescriptor();
          String defaultPublicKey=null;
          if (keyDescriptor != null) {
            for (            KeyDescriptorType keyDescriptorType : keyDescriptor) {
              Element keyInfo=keyDescriptorType.getKeyInfo();
              Element x509KeyInfo=DocumentUtil.getChildElement(keyInfo,new QName("dsig","X509Certificate"));
              if (KeyTypes.SIGNING.equals(keyDescriptorType.getUse())) {
                samlIdentityProviderConfig.setSigningPublicKey(x509KeyInfo.getTextContent());
              }
 else               if (KeyTypes.ENCRYPTION.equals(keyDescriptorType.getUse())) {
                samlIdentityProviderConfig.setEncryptionPublicKey(x509KeyInfo.getTextContent());
              }
 else               if (keyDescriptorType.getUse() == null) {
                defaultPublicKey=x509KeyInfo.getTextContent();
              }
            }
          }
          if (defaultPublicKey != null) {
            if (samlIdentityProviderConfig.getSigningPublicKey() == null) {
              samlIdentityProviderConfig.setSigningPublicKey(defaultPublicKey);
            }
            if (samlIdentityProviderConfig.getEncryptionPublicKey() == null) {
              samlIdentityProviderConfig.setEncryptionPublicKey(defaultPublicKey);
            }
          }
          return samlIdentityProviderConfig.getConfig();
        }
      }
    }
  }
 catch (  ParsingException pe) {
    throw new RuntimeException("Could not parse IdP SAML Metadata",pe);
  }
  return new HashMap<String,String>();
}
