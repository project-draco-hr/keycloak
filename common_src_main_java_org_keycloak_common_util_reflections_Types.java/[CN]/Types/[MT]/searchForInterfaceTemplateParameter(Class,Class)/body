{
  for (int i=0; i < base.getInterfaces().length; i++) {
    Class intf=base.getInterfaces()[i];
    if (intf.equals(desiredInterface)) {
      Type generic=base.getGenericInterfaces()[i];
      if (generic instanceof ParameterizedType) {
        ParameterizedType p=(ParameterizedType)generic;
        Type type=p.getActualTypeArguments()[0];
        Class rtn=getRawTypeNoException(type);
        if (rtn != null)         return rtn;
        return type;
      }
 else {
        return null;
      }
    }
  }
  if (base.getSuperclass() == null || base.getSuperclass().equals(Object.class))   return null;
  Object rtn=searchForInterfaceTemplateParameter(base.getSuperclass(),desiredInterface);
  if (rtn == null || rtn instanceof Class)   return rtn;
  if (!(rtn instanceof TypeVariable))   return null;
  String name=((TypeVariable)rtn).getName();
  int index=-1;
  TypeVariable[] variables=base.getSuperclass().getTypeParameters();
  if (variables == null || variables.length < 1)   return null;
  for (int i=0; i < variables.length; i++) {
    if (variables[i].getName().equals(name))     index=i;
  }
  if (index == -1)   return null;
  Type genericSuperclass=base.getGenericSuperclass();
  if (!(genericSuperclass instanceof ParameterizedType))   return null;
  ParameterizedType pt=(ParameterizedType)genericSuperclass;
  Type type=pt.getActualTypeArguments()[index];
  Class clazz=getRawTypeNoException(type);
  if (clazz != null)   return clazz;
  return type;
}
