{
  long socketTimeout=config.getLong("socket-timeout-millis",-1L);
  long establishConnectionTimeout=config.getLong("establish-connection-timeout-millis",-1L);
  int maxPooledPerRoute=config.getInt("max-pooled-per-route",0);
  int connectionPoolSize=config.getInt("connection-pool-size",200);
  boolean disableTrustManager=config.getBoolean("disable-trust-manager",false);
  boolean disableCookies=config.getBoolean("disable-cookies",true);
  String hostnameVerificationPolicy=config.get("hostname-verification-policy","WILDCARD");
  HttpClientBuilder.HostnameVerificationPolicy hostnamePolicy=HttpClientBuilder.HostnameVerificationPolicy.valueOf(hostnameVerificationPolicy);
  String truststore=config.get("truststore");
  String truststorePassword=config.get("truststore-password");
  String clientKeystore=config.get("client-keystore");
  String clientKeystorePassword=config.get("client-keystore-password");
  String clientPrivateKeyPassword=config.get("client-key-password");
  HttpClientBuilder builder=new HttpClientBuilder();
  builder.socketTimeout(socketTimeout,TimeUnit.MILLISECONDS).establishConnectionTimeout(establishConnectionTimeout,TimeUnit.MILLISECONDS).maxPooledPerRoute(maxPooledPerRoute).connectionPoolSize(connectionPoolSize).hostnameVerification(hostnamePolicy).disableCookies(disableCookies);
  if (disableTrustManager)   builder.disableTrustManager();
  if (truststore != null) {
    truststore=EnvUtil.replace(truststore);
    try {
      builder.trustStore(KeystoreUtil.loadKeyStore(truststore,truststorePassword));
    }
 catch (    Exception e) {
      throw new RuntimeException("Failed to load truststore",e);
    }
  }
  if (clientKeystore != null) {
    clientKeystore=EnvUtil.replace(clientKeystore);
    try {
      KeyStore clientCertKeystore=KeystoreUtil.loadKeyStore(clientKeystore,clientKeystorePassword);
      builder.keyStore(clientCertKeystore,clientPrivateKeyPassword);
    }
 catch (    Exception e) {
      throw new RuntimeException("Failed to load keystore",e);
    }
  }
  httpClient=builder.build();
}
