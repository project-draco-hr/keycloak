{
  String truststorePath=remoteSkeletonKeyConfig.getTruststore();
  if (truststorePath != null) {
    truststorePath=EnvUtil.replace(truststorePath);
    String truststorePassword=remoteSkeletonKeyConfig.getTruststorePassword();
    truststorePath=null;
    try {
      this.truststore=loadKeyStore(truststorePath,truststorePassword);
    }
 catch (    Exception e) {
      throw new RuntimeException("Failed to load truststore",e);
    }
  }
  String clientKeystore=remoteSkeletonKeyConfig.getClientKeystore();
  String clientKeyPassword=null;
  if (clientKeystore != null) {
    clientKeystore=EnvUtil.replace(clientKeystore);
    String clientKeystorePassword=remoteSkeletonKeyConfig.getClientKeystorePassword();
    clientCertKeystore=null;
    try {
      clientCertKeystore=loadKeyStore(clientKeystore,clientKeystorePassword);
    }
 catch (    Exception e) {
      throw new RuntimeException("Failed to load keystore",e);
    }
  }
  initClient();
  if (remoteSkeletonKeyConfig.getRealmUrl() != null) {
    PublishedRealmRepresentation rep=null;
    try {
      rep=client.target(remoteSkeletonKeyConfig.getRealmUrl()).request().get(PublishedRealmRepresentation.class);
    }
  finally {
      if (!setupClient) {
        client.close();
      }
    }
    remoteSkeletonKeyConfig.setRealm(rep.getRealm());
    remoteSkeletonKeyConfig.setAuthUrl(rep.getAuthorizationUrl());
    remoteSkeletonKeyConfig.setCodeUrl(rep.getCodeUrl());
    remoteSkeletonKeyConfig.setRealmKey(rep.getPublicKeyPem());
    remoteSkeletonKeyConfig.setAdminRole(rep.getAdminRole());
  }
  if (remoteSkeletonKeyConfig.getAdminRole() == null) {
    remoteSkeletonKeyConfig.setAdminRole("$REALM-ADMIN$");
  }
  String realm=remoteSkeletonKeyConfig.getRealm();
  if (realm == null)   throw new RuntimeException("Must set 'realm' in config");
  String resource=remoteSkeletonKeyConfig.getResource();
  if (resource == null)   throw new RuntimeException("Must set 'resource' in config");
  String realmKeyPem=remoteSkeletonKeyConfig.getRealmKey();
  if (realmKeyPem == null) {
    throw new IllegalArgumentException("You must set the realm-public-key");
  }
  PublicKey realmKey=null;
  try {
    realmKey=PemUtils.decodePublicKey(realmKeyPem);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  resourceMetadata=new ResourceMetadata();
  resourceMetadata.setRealm(realm);
  resourceMetadata.setResourceName(resource);
  resourceMetadata.setRealmKey(realmKey);
  resourceMetadata.setClientKeystore(clientCertKeystore);
  clientKeyPassword=remoteSkeletonKeyConfig.getClientKeyPassword();
  resourceMetadata.setClientKeyPassword(clientKeyPassword);
  resourceMetadata.setTruststore(this.truststore);
  if (!setupClient || remoteSkeletonKeyConfig.isBearerOnly())   return;
  realmConfiguration=new RealmConfiguration();
  String authUrl=remoteSkeletonKeyConfig.getAuthUrl();
  if (authUrl == null) {
    throw new RuntimeException("You must specify auth-url");
  }
  String tokenUrl=remoteSkeletonKeyConfig.getCodeUrl();
  if (tokenUrl == null) {
    throw new RuntimeException("You mut specify code-url");
  }
  realmConfiguration.setMetadata(resourceMetadata);
  realmConfiguration.setSslRequired(!remoteSkeletonKeyConfig.isSslNotRequired());
  for (  Map.Entry<String,String> entry : getRemoteSkeletonKeyConfig().getCredentials().entrySet()) {
    realmConfiguration.getResourceCredentials().param(entry.getKey(),entry.getValue());
  }
  ResteasyClient client=getClient();
  realmConfiguration.setClient(client);
  realmConfiguration.setAuthUrl(UriBuilder.fromUri(authUrl).queryParam("client_id",resourceMetadata.getResourceName()));
  realmConfiguration.setCodeUrl(client.target(tokenUrl));
}
