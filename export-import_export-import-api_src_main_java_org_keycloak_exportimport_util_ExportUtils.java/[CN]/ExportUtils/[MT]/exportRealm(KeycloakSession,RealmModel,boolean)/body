{
  RealmRepresentation rep=ModelToRepresentation.toRepresentation(realm,true);
  List<ClientModel> clients=realm.getClients();
  List<ClientRepresentation> clientReps=new ArrayList<>();
  for (  ClientModel app : clients) {
    ClientRepresentation clientRep=exportClient(app);
    clientReps.add(clientRep);
  }
  rep.setClients(clientReps);
  List<RoleRepresentation> realmRoleReps=null;
  Map<String,List<RoleRepresentation>> clientRolesReps=new HashMap<>();
  Set<RoleModel> realmRoles=realm.getRoles();
  if (realmRoles != null && realmRoles.size() > 0) {
    realmRoleReps=exportRoles(realmRoles);
  }
  for (  ClientModel client : clients) {
    Set<RoleModel> currentAppRoles=client.getRoles();
    List<RoleRepresentation> currentAppRoleReps=exportRoles(currentAppRoles);
    clientRolesReps.put(client.getClientId(),currentAppRoleReps);
  }
  RolesRepresentation rolesRep=new RolesRepresentation();
  if (realmRoleReps != null) {
    rolesRep.setRealm(realmRoleReps);
  }
  if (clientRolesReps.size() > 0) {
    rolesRep.setClient(clientRolesReps);
  }
  rep.setRoles(rolesRep);
  List<ClientModel> allClients=new ArrayList<>(clients);
  Map<String,List<ScopeMappingRepresentation>> clientScopeReps=new HashMap<>();
  for (  ClientModel client : allClients) {
    Set<RoleModel> clientScopes=client.getScopeMappings();
    ScopeMappingRepresentation scopeMappingRep=null;
    for (    RoleModel scope : clientScopes) {
      if (scope.getContainer() instanceof RealmModel) {
        if (scopeMappingRep == null) {
          scopeMappingRep=rep.scopeMapping(client.getClientId());
        }
        scopeMappingRep.role(scope.getName());
      }
 else {
        ClientModel app=(ClientModel)scope.getContainer();
        String appName=app.getClientId();
        List<ScopeMappingRepresentation> currentAppScopes=clientScopeReps.get(appName);
        if (currentAppScopes == null) {
          currentAppScopes=new ArrayList<>();
          clientScopeReps.put(appName,currentAppScopes);
        }
        ScopeMappingRepresentation currentClientScope=null;
        for (        ScopeMappingRepresentation scopeMapping : currentAppScopes) {
          if (scopeMapping.getClient().equals(client.getClientId())) {
            currentClientScope=scopeMapping;
            break;
          }
        }
        if (currentClientScope == null) {
          currentClientScope=new ScopeMappingRepresentation();
          currentClientScope.setClient(client.getClientId());
          currentAppScopes.add(currentClientScope);
        }
        currentClientScope.role(scope.getName());
      }
    }
  }
  if (clientScopeReps.size() > 0) {
    rep.setClientScopeMappings(clientScopeReps);
  }
  if (includeUsers) {
    List<UserModel> allUsers=session.users().getUsers(realm,true);
    List<UserRepresentation> users=new ArrayList<UserRepresentation>();
    for (    UserModel user : allUsers) {
      UserRepresentation userRep=exportUser(session,realm,user);
      users.add(userRep);
    }
    if (users.size() > 0) {
      rep.setUsers(users);
    }
  }
  return rep;
}
