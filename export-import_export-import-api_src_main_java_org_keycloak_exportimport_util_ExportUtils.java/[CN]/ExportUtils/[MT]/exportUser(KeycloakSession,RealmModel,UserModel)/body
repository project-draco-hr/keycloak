{
  UserRepresentation userRep=ModelToRepresentation.toRepresentation(user);
  Set<SocialLinkModel> socialLinks=session.users().getSocialLinks(user,realm);
  List<SocialLinkRepresentation> socialLinkReps=new ArrayList<SocialLinkRepresentation>();
  for (  SocialLinkModel socialLink : socialLinks) {
    SocialLinkRepresentation socialLinkRep=exportSocialLink(socialLink);
    socialLinkReps.add(socialLinkRep);
  }
  if (socialLinkReps.size() > 0) {
    userRep.setSocialLinks(socialLinkReps);
  }
  Set<RoleModel> roles=user.getRoleMappings();
  List<String> realmRoleNames=new ArrayList<String>();
  Map<String,List<String>> appRoleNames=new HashMap<String,List<String>>();
  for (  RoleModel role : roles) {
    if (role.getContainer() instanceof RealmModel) {
      realmRoleNames.add(role.getName());
    }
 else {
      ApplicationModel app=(ApplicationModel)role.getContainer();
      String appName=app.getName();
      List<String> currentAppRoles=appRoleNames.get(appName);
      if (currentAppRoles == null) {
        currentAppRoles=new ArrayList<String>();
        appRoleNames.put(appName,currentAppRoles);
      }
      currentAppRoles.add(role.getName());
    }
  }
  if (realmRoleNames.size() > 0) {
    userRep.setRealmRoles(realmRoleNames);
  }
  if (appRoleNames.size() > 0) {
    userRep.setApplicationRoles(appRoleNames);
  }
  List<UserCredentialValueModel> creds=user.getCredentialsDirectly();
  List<CredentialRepresentation> credReps=new ArrayList<CredentialRepresentation>();
  for (  UserCredentialValueModel cred : creds) {
    CredentialRepresentation credRep=exportCredential(cred);
    credReps.add(credRep);
  }
  userRep.setCredentials(credReps);
  userRep.setFederationLink(user.getFederationLink());
  return userRep;
}
