{
  UserRepresentation userRep=ModelToRepresentation.toRepresentation(user);
  Set<FederatedIdentityModel> socialLinks=session.users().getFederatedIdentities(user,realm);
  List<FederatedIdentityRepresentation> socialLinkReps=new ArrayList<FederatedIdentityRepresentation>();
  for (  FederatedIdentityModel socialLink : socialLinks) {
    FederatedIdentityRepresentation socialLinkRep=exportSocialLink(socialLink);
    socialLinkReps.add(socialLinkRep);
  }
  if (socialLinkReps.size() > 0) {
    userRep.setFederatedIdentities(socialLinkReps);
  }
  Set<RoleModel> roles=user.getRoleMappings();
  List<String> realmRoleNames=new ArrayList<>();
  Map<String,List<String>> clientRoleNames=new HashMap<>();
  for (  RoleModel role : roles) {
    if (role.getContainer() instanceof RealmModel) {
      realmRoleNames.add(role.getName());
    }
 else {
      ClientModel client=(ClientModel)role.getContainer();
      String clientId=client.getClientId();
      List<String> currentClientRoles=clientRoleNames.get(clientId);
      if (currentClientRoles == null) {
        currentClientRoles=new ArrayList<>();
        clientRoleNames.put(clientId,currentClientRoles);
      }
      currentClientRoles.add(role.getName());
    }
  }
  if (realmRoleNames.size() > 0) {
    userRep.setRealmRoles(realmRoleNames);
  }
  if (clientRoleNames.size() > 0) {
    userRep.setClientRoles(clientRoleNames);
  }
  List<UserCredentialValueModel> creds=user.getCredentialsDirectly();
  List<CredentialRepresentation> credReps=new ArrayList<CredentialRepresentation>();
  for (  UserCredentialValueModel cred : creds) {
    CredentialRepresentation credRep=exportCredential(cred);
    credReps.add(credRep);
  }
  userRep.setCredentials(credReps);
  userRep.setFederationLink(user.getFederationLink());
  List<UserConsentModel> consents=user.getConsents();
  Map<String,UserConsentRepresentation> consentReps=new HashMap<String,UserConsentRepresentation>();
  for (  UserConsentModel consent : consents) {
    String clientId=consent.getClient().getClientId();
    List<String> grantedProtocolMappers=new LinkedList<String>();
    for (    ProtocolMapperModel protocolMapper : consent.getGrantedProtocolMappers()) {
      grantedProtocolMappers.add(protocolMapper.getId());
    }
    List<String> grantedRoles=new LinkedList<String>();
    for (    RoleModel role : consent.getGrantedRoles()) {
      grantedRoles.add(role.getId());
    }
    if (grantedRoles.size() > 0 || grantedProtocolMappers.size() > 0) {
      UserConsentRepresentation consentRep=new UserConsentRepresentation();
      if (grantedRoles.size() > 0)       consentRep.setGrantedRoles(grantedRoles);
      if (grantedProtocolMappers.size() > 0)       consentRep.setGrantedProtocolMappers(grantedProtocolMappers);
      consentReps.put(clientId,consentRep);
    }
  }
  if (consentReps.size() > 0) {
    userRep.setClientConsents(consentReps);
  }
  return userRep;
}
