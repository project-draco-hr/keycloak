{
  List<RealmModel> realms=model.getRealms();
  List<RealmEntity> result=new LinkedList<RealmEntity>();
  for (  RealmModel realmModel : realms) {
    RealmEntity entity=new RealmEntity();
    entity.setId(realmModel.getId());
    result.add(entity);
    this.propertiesManager.setBasicPropertiesFromModel(realmModel,entity);
    ApplicationModel realmAdminApp=realmModel.getMasterAdminApp();
    if (realmAdminApp != null) {
      entity.setAdminAppId(realmAdminApp.getId());
    }
    entity.setDefaultRoles(realmModel.getDefaultRoles());
    List<RequiredCredentialEntity> reqCredEntities=new ArrayList<RequiredCredentialEntity>();
    List<RequiredCredentialModel> requiredCredModels=realmModel.getRequiredCredentials();
    for (    RequiredCredentialModel requiredCredModel : requiredCredModels) {
      RequiredCredentialEntity reqCredEntity=new RequiredCredentialEntity();
      this.propertiesManager.setBasicPropertiesFromModel(requiredCredModel,reqCredEntity);
      reqCredEntities.add(reqCredEntity);
    }
    entity.setRequiredCredentials(reqCredEntities);
    entity.setPasswordPolicy(realmModel.getPasswordPolicy().toString());
    List<AuthenticationProviderEntity> authProviderEntities=new ArrayList<AuthenticationProviderEntity>();
    for (    AuthenticationProviderModel authProvider : realmModel.getAuthenticationProviders()) {
      AuthenticationProviderEntity authProviderEntity=new AuthenticationProviderEntity();
      this.propertiesManager.setBasicPropertiesFromModel(authProvider,authProviderEntity);
      authProviderEntities.add(authProviderEntity);
    }
    entity.setAuthenticationProviders(authProviderEntities);
  }
  this.exportWriter.writeEntities(fileName,result);
  logger.infof("Realms exported: " + result);
}
