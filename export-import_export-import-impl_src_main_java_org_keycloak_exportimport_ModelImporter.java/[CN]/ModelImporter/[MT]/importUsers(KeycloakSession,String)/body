{
  List<UserEntity> users=this.importReader.readEntities(fileName,UserEntity.class);
  for (  UserEntity userEntity : users) {
    RealmModel realm=keycloakSession.getRealm(userEntity.getRealmId());
    UserModel user=realm.addUser(userEntity.getId(),userEntity.getLoginName());
    for (    RoleModel role : realm.getRoleMappings(user)) {
      realm.deleteRoleMapping(user,role);
    }
    this.propertiesManager.setBasicPropertiesToModel(user,userEntity);
    AuthenticationLinkEntity authLinkEntity=userEntity.getAuthenticationLink();
    if (authLinkEntity != null) {
      AuthenticationLinkModel authLinkModel=new AuthenticationLinkModel();
      this.propertiesManager.setBasicPropertiesToModel(authLinkModel,authLinkEntity);
      realm.setAuthenticationLink(user,authLinkModel);
    }
    List<SocialLinkEntity> socialLinks=userEntity.getSocialLinks();
    if (socialLinks != null && !socialLinks.isEmpty()) {
      for (      SocialLinkEntity socialLinkEntity : socialLinks) {
        SocialLinkModel socialLink=new SocialLinkModel();
        this.propertiesManager.setBasicPropertiesToModel(socialLink,socialLinkEntity);
        realm.addSocialLink(user,socialLink);
      }
    }
    List<UserModel.RequiredAction> requiredActions=userEntity.getRequiredActions();
    if (requiredActions != null && !requiredActions.isEmpty()) {
      for (      UserModel.RequiredAction reqAction : requiredActions) {
        user.addRequiredAction(reqAction);
      }
    }
    if (userEntity.getAttributes() != null) {
      for (      Map.Entry<String,String> attr : userEntity.getAttributes().entrySet()) {
        user.setAttribute(attr.getKey(),attr.getValue());
      }
    }
    if (userEntity.getRoleIds() != null) {
      for (      String roleId : userEntity.getRoleIds()) {
        RoleModel role=realm.getRoleById(roleId);
        realm.grantRole(user,role);
      }
    }
    List<CredentialEntity> credentials=userEntity.getCredentials();
    if (credentials != null) {
      for (      CredentialEntity credEntity : credentials) {
        UserCredentialValueModel credModel=new UserCredentialValueModel();
        this.propertiesManager.setBasicPropertiesToModel(credModel,credEntity);
        realm.updateCredentialDirectly(user,credModel);
      }
    }
  }
  logger.infof("%d users imported: ",users.size());
  if (logger.isDebugEnabled()) {
    logger.debug("Imported users: " + users);
  }
}
