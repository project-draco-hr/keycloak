{
  LDAPConfig ldapConfig=new LDAPConfig(newProviderModel.getConfig());
  boolean activeDirectory=ldapConfig.isActiveDirectory();
  UserFederationProvider.EditMode editMode=ldapConfig.getEditMode();
  String readOnly=String.valueOf(editMode == UserFederationProvider.EditMode.READ_ONLY || editMode == UserFederationProvider.EditMode.UNSYNCED);
  String usernameLdapAttribute=ldapConfig.getUsernameLdapAttribute();
  String alwaysReadValueFromLDAP=String.valueOf(editMode == UserFederationProvider.EditMode.READ_ONLY || editMode == UserFederationProvider.EditMode.WRITABLE);
  UserFederationMapperModel mapperModel;
  mapperModel=KeycloakModelUtils.createUserFederationMapperModel("username",newProviderModel.getId(),UserAttributeLDAPFederationMapperFactory.PROVIDER_ID,UserAttributeLDAPFederationMapper.USER_MODEL_ATTRIBUTE,UserModel.USERNAME,UserAttributeLDAPFederationMapper.LDAP_ATTRIBUTE,usernameLdapAttribute,UserAttributeLDAPFederationMapper.READ_ONLY,readOnly,UserAttributeLDAPFederationMapper.ALWAYS_READ_VALUE_FROM_LDAP,"false",UserAttributeLDAPFederationMapper.IS_MANDATORY_IN_LDAP,"true");
  realm.addUserFederationMapper(mapperModel);
  if (ldapConfig.getRdnLdapAttribute().equalsIgnoreCase(LDAPConstants.CN)) {
    if (usernameLdapAttribute.equalsIgnoreCase(LDAPConstants.CN)) {
      mapperModel=KeycloakModelUtils.createUserFederationMapperModel("first name",newProviderModel.getId(),UserAttributeLDAPFederationMapperFactory.PROVIDER_ID,UserAttributeLDAPFederationMapper.USER_MODEL_ATTRIBUTE,UserModel.FIRST_NAME,UserAttributeLDAPFederationMapper.LDAP_ATTRIBUTE,LDAPConstants.GIVENNAME,UserAttributeLDAPFederationMapper.READ_ONLY,readOnly,UserAttributeLDAPFederationMapper.ALWAYS_READ_VALUE_FROM_LDAP,alwaysReadValueFromLDAP,UserAttributeLDAPFederationMapper.IS_MANDATORY_IN_LDAP,"true");
      realm.addUserFederationMapper(mapperModel);
    }
 else {
      if (editMode == UserFederationProvider.EditMode.WRITABLE) {
        mapperModel=KeycloakModelUtils.createUserFederationMapperModel("first name",newProviderModel.getId(),UserAttributeLDAPFederationMapperFactory.PROVIDER_ID,UserAttributeLDAPFederationMapper.USER_MODEL_ATTRIBUTE,UserModel.FIRST_NAME,UserAttributeLDAPFederationMapper.LDAP_ATTRIBUTE,LDAPConstants.GIVENNAME,UserAttributeLDAPFederationMapper.READ_ONLY,readOnly,UserAttributeLDAPFederationMapper.ALWAYS_READ_VALUE_FROM_LDAP,alwaysReadValueFromLDAP,UserAttributeLDAPFederationMapper.IS_MANDATORY_IN_LDAP,"true");
        realm.addUserFederationMapper(mapperModel);
        mapperModel=KeycloakModelUtils.createUserFederationMapperModel("username-cn",newProviderModel.getId(),UserAttributeLDAPFederationMapperFactory.PROVIDER_ID,UserAttributeLDAPFederationMapper.USER_MODEL_ATTRIBUTE,UserModel.USERNAME,UserAttributeLDAPFederationMapper.LDAP_ATTRIBUTE,LDAPConstants.CN,UserAttributeLDAPFederationMapper.READ_ONLY,readOnly,UserAttributeLDAPFederationMapper.ALWAYS_READ_VALUE_FROM_LDAP,"false",UserAttributeLDAPFederationMapper.IS_MANDATORY_IN_LDAP,"true");
        realm.addUserFederationMapper(mapperModel);
      }
 else {
        mapperModel=KeycloakModelUtils.createUserFederationMapperModel("full name",newProviderModel.getId(),FullNameLDAPFederationMapperFactory.PROVIDER_ID,FullNameLDAPFederationMapper.LDAP_FULL_NAME_ATTRIBUTE,LDAPConstants.CN,UserAttributeLDAPFederationMapper.READ_ONLY,readOnly);
        realm.addUserFederationMapper(mapperModel);
      }
    }
  }
 else {
    mapperModel=KeycloakModelUtils.createUserFederationMapperModel("first name",newProviderModel.getId(),UserAttributeLDAPFederationMapperFactory.PROVIDER_ID,UserAttributeLDAPFederationMapper.USER_MODEL_ATTRIBUTE,UserModel.FIRST_NAME,UserAttributeLDAPFederationMapper.LDAP_ATTRIBUTE,LDAPConstants.CN,UserAttributeLDAPFederationMapper.READ_ONLY,readOnly,UserAttributeLDAPFederationMapper.ALWAYS_READ_VALUE_FROM_LDAP,alwaysReadValueFromLDAP,UserAttributeLDAPFederationMapper.IS_MANDATORY_IN_LDAP,"true");
    realm.addUserFederationMapper(mapperModel);
  }
  mapperModel=KeycloakModelUtils.createUserFederationMapperModel("last name",newProviderModel.getId(),UserAttributeLDAPFederationMapperFactory.PROVIDER_ID,UserAttributeLDAPFederationMapper.USER_MODEL_ATTRIBUTE,UserModel.LAST_NAME,UserAttributeLDAPFederationMapper.LDAP_ATTRIBUTE,LDAPConstants.SN,UserAttributeLDAPFederationMapper.READ_ONLY,readOnly,UserAttributeLDAPFederationMapper.ALWAYS_READ_VALUE_FROM_LDAP,alwaysReadValueFromLDAP,UserAttributeLDAPFederationMapper.IS_MANDATORY_IN_LDAP,"true");
  realm.addUserFederationMapper(mapperModel);
  mapperModel=KeycloakModelUtils.createUserFederationMapperModel("email",newProviderModel.getId(),UserAttributeLDAPFederationMapperFactory.PROVIDER_ID,UserAttributeLDAPFederationMapper.USER_MODEL_ATTRIBUTE,UserModel.EMAIL,UserAttributeLDAPFederationMapper.LDAP_ATTRIBUTE,LDAPConstants.EMAIL,UserAttributeLDAPFederationMapper.READ_ONLY,readOnly,UserAttributeLDAPFederationMapper.ALWAYS_READ_VALUE_FROM_LDAP,"false",UserAttributeLDAPFederationMapper.IS_MANDATORY_IN_LDAP,"false");
  realm.addUserFederationMapper(mapperModel);
  String createTimestampLdapAttrName=activeDirectory ? "whenCreated" : LDAPConstants.CREATE_TIMESTAMP;
  String modifyTimestampLdapAttrName=activeDirectory ? "whenChanged" : LDAPConstants.MODIFY_TIMESTAMP;
  mapperModel=KeycloakModelUtils.createUserFederationMapperModel("creation date",newProviderModel.getId(),UserAttributeLDAPFederationMapperFactory.PROVIDER_ID,UserAttributeLDAPFederationMapper.USER_MODEL_ATTRIBUTE,LDAPConstants.CREATE_TIMESTAMP,UserAttributeLDAPFederationMapper.LDAP_ATTRIBUTE,createTimestampLdapAttrName,UserAttributeLDAPFederationMapper.READ_ONLY,"true",UserAttributeLDAPFederationMapper.ALWAYS_READ_VALUE_FROM_LDAP,alwaysReadValueFromLDAP,UserAttributeLDAPFederationMapper.IS_MANDATORY_IN_LDAP,"false");
  realm.addUserFederationMapper(mapperModel);
  mapperModel=KeycloakModelUtils.createUserFederationMapperModel("modify date",newProviderModel.getId(),UserAttributeLDAPFederationMapperFactory.PROVIDER_ID,UserAttributeLDAPFederationMapper.USER_MODEL_ATTRIBUTE,LDAPConstants.MODIFY_TIMESTAMP,UserAttributeLDAPFederationMapper.LDAP_ATTRIBUTE,modifyTimestampLdapAttrName,UserAttributeLDAPFederationMapper.READ_ONLY,"true",UserAttributeLDAPFederationMapper.ALWAYS_READ_VALUE_FROM_LDAP,alwaysReadValueFromLDAP,UserAttributeLDAPFederationMapper.IS_MANDATORY_IN_LDAP,"false");
  realm.addUserFederationMapper(mapperModel);
}
