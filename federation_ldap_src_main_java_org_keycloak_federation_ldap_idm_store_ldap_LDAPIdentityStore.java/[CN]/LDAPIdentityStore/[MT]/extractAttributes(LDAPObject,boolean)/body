{
  BasicAttributes entryAttributes=new BasicAttributes();
  for (  Map.Entry<String,Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {
    String attrName=attrEntry.getKey();
    Set<String> attrValue=attrEntry.getValue();
    if (!ldapObject.getReadOnlyAttributeNames().contains(attrName.toLowerCase()) && (isCreate || !ldapObject.getRdnAttributeName().equalsIgnoreCase(attrName))) {
      if (attrValue == null) {
        logger.warnf("Attribute '%s' is null on LDAP object '%s' . Using empty value to be saved to LDAP",attrName,ldapObject.getDn().toString());
        attrValue=Collections.emptySet();
      }
      if (isCreate && attrValue.isEmpty()) {
        continue;
      }
      BasicAttribute attr=new BasicAttribute(attrName);
      for (      String val : attrValue) {
        if (val == null || val.toString().trim().length() == 0) {
          val=LDAPConstants.EMPTY_ATTRIBUTE_VALUE;
        }
        attr.add(val);
      }
      entryAttributes.put(attr);
    }
  }
  if (isCreate) {
    BasicAttribute objectClassAttribute=new BasicAttribute(LDAPConstants.OBJECT_CLASS);
    for (    String objectClassValue : ldapObject.getObjectClasses()) {
      objectClassAttribute.add(objectClassValue);
      if (objectClassValue.equalsIgnoreCase(LDAPConstants.GROUP_OF_NAMES) || objectClassValue.equalsIgnoreCase(LDAPConstants.GROUP_OF_ENTRIES) || objectClassValue.equalsIgnoreCase(LDAPConstants.GROUP_OF_UNIQUE_NAMES)) {
        entryAttributes.put(LDAPConstants.MEMBER,LDAPConstants.EMPTY_MEMBER_ATTRIBUTE_VALUE);
      }
    }
    entryAttributes.put(objectClassAttribute);
  }
  return entryAttributes;
}
