{
  try {
    String entryDN=searchResult.getNameInNamespace();
    Attributes attributes=searchResult.getAttributes();
    if (attributedType == null) {
      attributedType=Reflections.newInstance(getConfig().getSupportedTypeByBaseDN(entryDN,getEntryObjectClasses(attributes)));
    }
    attributedType.setEntryDN(entryDN);
    LDAPMappingConfiguration mappingConfig=getMappingConfig(attributedType.getClass());
    if (hierarchyDepthCount > mappingConfig.getHierarchySearchDepth()) {
      return null;
    }
    if (logger.isTraceEnabled()) {
      logger.tracef("Populating attributed type [%s] from DN [%s]",attributedType,entryDN);
    }
    NamingEnumeration<? extends Attribute> ldapAttributes=attributes.getAll();
    while (ldapAttributes.hasMore()) {
      Attribute ldapAttribute=ldapAttributes.next();
      Object attributeValue;
      try {
        attributeValue=ldapAttribute.get();
      }
 catch (      NoSuchElementException nsee) {
        continue;
      }
      String ldapAttributeName=ldapAttribute.getID();
      if (ldapAttributeName.toLowerCase().equals(getConfig().getUniqueIdentifierAttributeName().toLowerCase())) {
        attributedType.setId(this.operationManager.decodeEntryUUID(attributeValue));
      }
 else {
        String attributeName=findAttributeName(mappingConfig.getMappedProperties(),ldapAttributeName);
        if (attributeName != null) {
          Property<Object> property=PropertyQueries.createQuery(attributedType.getClass()).addCriteria(new NamedPropertyCriteria(attributeName)).getFirstResult();
          if (property != null) {
            if (logger.isTraceEnabled()) {
              logger.tracef("Populating property [%s] from ldap attribute [%s] with value [%s] from DN [%s].",property.getName(),ldapAttributeName,attributeValue,entryDN);
            }
            if (property.getJavaClass().equals(Date.class)) {
              property.setValue(attributedType,LDAPUtil.parseDate(attributeValue.toString()));
            }
 else {
              property.setValue(attributedType,attributeValue);
            }
          }
 else {
            if (logger.isTraceEnabled()) {
              logger.tracef("Populating attribute [%s] from ldap attribute [%s] with value [%s] from DN [%s].",attributeName,ldapAttributeName,attributeValue,entryDN);
            }
            attributedType.setAttribute(new org.keycloak.federation.ldap.idm.model.Attribute(attributeName,(Serializable)attributeValue));
          }
        }
      }
    }
    if (IdentityType.class.isInstance(attributedType)) {
      IdentityType identityType=(IdentityType)attributedType;
      String createdTimestamp=attributes.get(LDAPConstants.CREATE_TIMESTAMP).get().toString();
      identityType.setCreatedDate(LDAPUtil.parseDate(createdTimestamp));
    }
    LDAPMappingConfiguration entryConfig=getMappingConfig(attributedType.getClass());
    if (mappingConfig.getParentMembershipAttributeName() != null) {
      StringBuilder filter=new StringBuilder("(&");
      String entryBaseDN=entryDN.substring(entryDN.indexOf(LDAPConstants.COMMA) + 1);
      filter.append("(").append(getObjectClassesFilter(entryConfig)).append(")").append("(").append(mappingConfig.getParentMembershipAttributeName()).append(LDAPConstants.EQUAL).append("").append(getBindingDN(attributedType,false)).append(LDAPConstants.COMMA).append(entryBaseDN).append(")");
      filter.append(")");
      if (logger.isTraceEnabled()) {
        logger.tracef("Searching parent entry for DN [%s] using filter [%s].",entryBaseDN,filter.toString());
      }
      List<SearchResult> search=this.operationManager.search(getConfig().getBaseDN(),filter.toString(),entryConfig);
      if (!search.isEmpty()) {
        SearchResult next=search.get(0);
        Property<AttributedType> parentProperty=PropertyQueries.<AttributedType>createQuery(attributedType.getClass()).addCriteria(new TypedPropertyCriteria(attributedType.getClass())).getFirstResult();
        if (parentProperty != null) {
          String parentDN=next.getNameInNamespace();
          String parentBaseDN=parentDN.substring(parentDN.indexOf(",") + 1);
          Class<? extends AttributedType> baseDNType=getConfig().getSupportedTypeByBaseDN(parentBaseDN,getEntryObjectClasses(attributes));
          if (parentProperty.getJavaClass().isAssignableFrom(baseDNType)) {
            if (logger.isTraceEnabled()) {
              logger.tracef("Found parent [%s] for entry for DN [%s].",parentDN,entryDN);
            }
            int hierarchyDepthCount1=++hierarchyDepthCount;
            parentProperty.setValue(attributedType,populateAttributedType(next,null,hierarchyDepthCount1));
          }
        }
      }
 else {
        if (logger.isTraceEnabled()) {
          logger.tracef("No parent entry found for DN [%s] using filter [%s].",entryDN,filter.toString());
        }
      }
    }
  }
 catch (  Exception e) {
    throw new ModelException("Could not populate attribute type " + attributedType + ".",e);
  }
  return attributedType;
}
