{
  try {
    String entryDN=searchResult.getNameInNamespace();
    Attributes attributes=searchResult.getAttributes();
    LDAPObject ldapObject=new LDAPObject();
    LDAPDn dn=LDAPDn.fromString(entryDN);
    ldapObject.setDn(dn);
    ldapObject.setRdnAttributeName(dn.getFirstRdnAttrName());
    if (logger.isTraceEnabled()) {
      logger.tracef("Populating LDAP Object from DN [%s]",entryDN);
    }
    NamingEnumeration<? extends Attribute> ldapAttributes=attributes.getAll();
    List<String> uppercasedReadOnlyAttrNames=new ArrayList<String>();
    for (    String readonlyAttr : readOnlyAttrNames) {
      uppercasedReadOnlyAttrNames.add(readonlyAttr.toUpperCase());
    }
    while (ldapAttributes.hasMore()) {
      Attribute ldapAttribute=ldapAttributes.next();
      try {
        ldapAttribute.get();
      }
 catch (      NoSuchElementException nsee) {
        continue;
      }
      String ldapAttributeName=ldapAttribute.getID();
      if (ldapAttributeName.toLowerCase().equals(getConfig().getUuidLDAPAttributeName().toLowerCase())) {
        Object uuidValue=ldapAttribute.get();
        ldapObject.setUuid(this.operationManager.decodeEntryUUID(uuidValue));
      }
 else {
        Set<String> attrValues=new TreeSet<String>();
        NamingEnumeration<?> enumm=ldapAttribute.getAll();
        while (enumm.hasMoreElements()) {
          String objectClass=enumm.next().toString();
          attrValues.add(objectClass);
        }
        if (ldapAttributeName.toLowerCase().equals(LDAPConstants.OBJECT_CLASS)) {
          ldapObject.setObjectClasses(attrValues);
        }
 else {
          if (logger.isTraceEnabled()) {
            logger.tracef("Populating ldap attribute [%s] with value [%s] for DN [%s].",ldapAttributeName,attrValues.toString(),entryDN);
          }
          if (attrValues.size() == 1) {
            ldapObject.setAttribute(ldapAttributeName,attrValues.iterator().next());
          }
 else {
            ldapObject.setAttribute(ldapAttributeName,attrValues);
          }
          if (uppercasedReadOnlyAttrNames.contains(ldapAttributeName.toUpperCase())) {
            ldapObject.addReadOnlyAttributeName(ldapAttributeName);
          }
        }
      }
    }
    return ldapObject;
  }
 catch (  Exception e) {
    throw new ModelException("Could not populate attribute type " + searchResult.getNameInNamespace() + ".",e);
  }
}
