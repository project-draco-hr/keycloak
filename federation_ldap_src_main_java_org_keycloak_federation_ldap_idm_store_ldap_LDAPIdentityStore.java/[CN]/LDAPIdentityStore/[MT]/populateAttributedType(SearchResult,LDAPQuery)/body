{
  Set<String> readOnlyAttrNames=ldapQuery.getReturningReadOnlyLdapAttributes();
  Set<String> lowerCasedAttrNames=new TreeSet<>();
  for (  String attrName : ldapQuery.getReturningLdapAttributes()) {
    lowerCasedAttrNames.add(attrName.toLowerCase());
  }
  try {
    String entryDN=searchResult.getNameInNamespace();
    Attributes attributes=searchResult.getAttributes();
    LDAPObject ldapObject=new LDAPObject();
    LDAPDn dn=LDAPDn.fromString(entryDN);
    ldapObject.setDn(dn);
    ldapObject.setRdnAttributeName(dn.getFirstRdnAttrName());
    NamingEnumeration<? extends Attribute> ldapAttributes=attributes.getAll();
    while (ldapAttributes.hasMore()) {
      Attribute ldapAttribute=ldapAttributes.next();
      try {
        ldapAttribute.get();
      }
 catch (      NoSuchElementException nsee) {
        continue;
      }
      String ldapAttributeName=ldapAttribute.getID();
      if (ldapAttributeName.equalsIgnoreCase(getConfig().getUuidLDAPAttributeName())) {
        Object uuidValue=ldapAttribute.get();
        ldapObject.setUuid(this.operationManager.decodeEntryUUID(uuidValue));
      }
      if (!ldapAttributeName.equalsIgnoreCase(getConfig().getUuidLDAPAttributeName()) || (lowerCasedAttrNames.contains(ldapAttributeName.toLowerCase()))) {
        Set<String> attrValues=new LinkedHashSet<>();
        NamingEnumeration<?> enumm=ldapAttribute.getAll();
        while (enumm.hasMoreElements()) {
          String attrVal=enumm.next().toString().trim();
          attrValues.add(attrVal);
        }
        if (ldapAttributeName.equalsIgnoreCase(LDAPConstants.OBJECT_CLASS)) {
          ldapObject.setObjectClasses(attrValues);
        }
 else {
          ldapObject.setAttribute(ldapAttributeName,attrValues);
          if (readOnlyAttrNames.contains(ldapAttributeName.toLowerCase())) {
            ldapObject.addReadOnlyAttributeName(ldapAttributeName);
          }
        }
      }
    }
    if (logger.isTraceEnabled()) {
      logger.tracef("Found ldap object [%s] and populated with the attributes [%s]. Read-only attributes are [%s]",ldapObject.getDn().toString(),ldapObject.getAttributes(),ldapObject.getReadOnlyAttributeNames());
    }
    return ldapObject;
  }
 catch (  Exception e) {
    throw new ModelException("Could not populate attribute type " + searchResult.getNameInNamespace() + ".",e);
  }
}
