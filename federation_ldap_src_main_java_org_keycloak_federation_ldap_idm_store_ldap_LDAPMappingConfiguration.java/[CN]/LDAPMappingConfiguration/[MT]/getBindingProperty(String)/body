{
  Property bindingProperty=PropertyQueries.<String>createQuery(getMappedClass()).addCriteria(new NamedPropertyCriteria(bindingPropertyName)).getFirstResult();
  if (bindingProperty == null) {
    bindingProperty=new Property<String>(){
      @Override public String getName(){
        return bindingPropertyName;
      }
      @Override public Type getBaseType(){
        return null;
      }
      @Override public Class<String> getJavaClass(){
        return String.class;
      }
      @Override public AnnotatedElement getAnnotatedElement(){
        return null;
      }
      @Override public Member getMember(){
        return null;
      }
      @Override public String getValue(      Object instance){
        if (!(instance instanceof AttributedType)) {
          throw new IllegalStateException("Instance [ " + instance + " ] not an instance of AttributedType");
        }
        AttributedType attributedType=(AttributedType)instance;
        Attribute<String> attr=attributedType.getAttribute(bindingPropertyName);
        return attr != null ? attr.getValue() : null;
      }
      @Override public void setValue(      Object instance,      String value){
        if (!(instance instanceof AttributedType)) {
          throw new IllegalStateException("Instance [ " + instance + " ] not an instance of AttributedType");
        }
        AttributedType attributedType=(AttributedType)instance;
        attributedType.setAttribute(new Attribute(bindingPropertyName,value));
      }
      @Override public Class<?> getDeclaringClass(){
        return null;
      }
      @Override public boolean isReadOnly(){
        return false;
      }
      @Override public void setAccessible(){
      }
      @Override public boolean isAnnotationPresent(      Class annotation){
        return false;
      }
    }
;
  }
  return bindingProperty;
}
