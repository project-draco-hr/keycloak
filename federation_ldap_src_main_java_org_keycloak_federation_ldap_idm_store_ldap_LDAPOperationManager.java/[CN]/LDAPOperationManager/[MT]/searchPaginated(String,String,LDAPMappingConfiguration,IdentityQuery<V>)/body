{
  final List<SearchResult> result=new ArrayList<SearchResult>();
  final SearchControls cons=getSearchControls(mappingConfiguration);
  try {
    return execute(new LdapOperation<List<SearchResult>>(){
      @Override public List<SearchResult> execute(      LdapContext context) throws NamingException {
        try {
          byte[] cookie=(byte[])identityQuery.getPaginationContext();
          PagedResultsControl pagedControls=new PagedResultsControl(identityQuery.getLimit(),cookie,Control.CRITICAL);
          context.setRequestControls(new Control[]{pagedControls});
          NamingEnumeration<SearchResult> search=context.search(baseDN,filter,cons);
          while (search.hasMoreElements()) {
            result.add(search.nextElement());
          }
          search.close();
          Control[] responseControls=context.getResponseControls();
          if (responseControls != null) {
            for (            Control respControl : responseControls) {
              if (respControl instanceof PagedResultsResponseControl) {
                PagedResultsResponseControl prrc=(PagedResultsResponseControl)respControl;
                cookie=prrc.getCookie();
                identityQuery.setPaginationContext(cookie);
              }
            }
          }
          return result;
        }
 catch (        IOException ioe) {
          logger.errorf(ioe,"Could not query server with paginated query using DN [%s], filter [%s]",baseDN,filter);
          throw new NamingException(ioe.getMessage());
        }
      }
    }
);
  }
 catch (  NamingException e) {
    logger.errorf(e,"Could not query server using DN [%s] and filter [%s]",baseDN,filter);
    throw e;
  }
}
