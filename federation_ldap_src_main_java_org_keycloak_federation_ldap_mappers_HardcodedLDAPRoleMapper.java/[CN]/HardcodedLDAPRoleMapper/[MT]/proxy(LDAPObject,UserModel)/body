{
  return new UserModelDelegate(delegate){
    @Override public Set<RoleModel> getRealmRoleMappings(){
      Set<RoleModel> roles=super.getRealmRoleMappings();
      RoleModel role=getRole();
      if (role != null && role.getContainer().equals(realm)) {
        roles.add(role);
      }
      return roles;
    }
    @Override public Set<RoleModel> getClientRoleMappings(    ClientModel app){
      Set<RoleModel> roles=super.getClientRoleMappings(app);
      RoleModel role=getRole();
      if (role != null && role.getContainer().equals(app)) {
        roles.add(role);
      }
      return roles;
    }
    @Override public boolean hasRole(    RoleModel role){
      return super.hasRole(role) || role.equals(getRole());
    }
    @Override public Set<RoleModel> getRoleMappings(){
      Set<RoleModel> roles=super.getRoleMappings();
      RoleModel role=getRole();
      if (role != null) {
        roles.add(role);
      }
      return roles;
    }
    @Override public void deleteRoleMapping(    RoleModel role){
      if (role.equals(getRole())) {
        throw new ModelException("Not possible to delete role. It's hardcoded by LDAP mapper");
      }
 else {
        super.deleteRoleMapping(role);
      }
    }
  }
;
}
