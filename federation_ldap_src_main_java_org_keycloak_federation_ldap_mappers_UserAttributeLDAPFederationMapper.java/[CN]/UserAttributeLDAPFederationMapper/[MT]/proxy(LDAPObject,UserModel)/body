{
  final String userModelAttrName=mapperModel.getConfig().get(USER_MODEL_ATTRIBUTE);
  final String ldapAttrName=mapperModel.getConfig().get(LDAP_ATTRIBUTE);
  boolean isAlwaysReadValueFromLDAP=parseBooleanParameter(mapperModel,ALWAYS_READ_VALUE_FROM_LDAP);
  final boolean isMandatoryInLdap=parseBooleanParameter(mapperModel,IS_MANDATORY_IN_LDAP);
  if (ldapProvider.getEditMode() == UserFederationProvider.EditMode.WRITABLE && !isReadOnly()) {
    delegate=new TxAwareLDAPUserModelDelegate(delegate,ldapProvider,ldapUser){
      @Override public void setSingleAttribute(      String name,      String value){
        setLDAPAttribute(name,value);
        super.setSingleAttribute(name,value);
      }
      @Override public void setAttribute(      String name,      List<String> values){
        setLDAPAttribute(name,values);
        super.setAttribute(name,values);
      }
      @Override public void removeAttribute(      String name){
        setLDAPAttribute(name,null);
        super.removeAttribute(name);
      }
      @Override public void setEmail(      String email){
        checkDuplicateEmail(userModelAttrName,email,realm,ldapProvider.getSession(),this);
        setLDAPAttribute(UserModel.EMAIL,email);
        super.setEmail(email);
      }
      @Override public void setLastName(      String lastName){
        setLDAPAttribute(UserModel.LAST_NAME,lastName);
        super.setLastName(lastName);
      }
      @Override public void setFirstName(      String firstName){
        setLDAPAttribute(UserModel.FIRST_NAME,firstName);
        super.setFirstName(firstName);
      }
      protected void setLDAPAttribute(      String modelAttrName,      Object value){
        if (modelAttrName.equalsIgnoreCase(userModelAttrName)) {
          if (logger.isTraceEnabled()) {
            logger.tracef("Pushing user attribute to LDAP. username: %s, Model attribute name: %s, LDAP attribute name: %s, Attribute value: %s",getUsername(),modelAttrName,ldapAttrName,value);
          }
          ensureTransactionStarted();
          if (value == null) {
            if (isMandatoryInLdap) {
              ldapUser.setSingleAttribute(ldapAttrName,LDAPConstants.EMPTY_ATTRIBUTE_VALUE);
            }
 else {
              ldapUser.setAttribute(ldapAttrName,new LinkedHashSet<String>());
            }
          }
 else           if (value instanceof String) {
            ldapUser.setSingleAttribute(ldapAttrName,(String)value);
          }
 else {
            List<String> asList=(List<String>)value;
            if (asList.isEmpty() && isMandatoryInLdap) {
              ldapUser.setSingleAttribute(ldapAttrName,LDAPConstants.EMPTY_ATTRIBUTE_VALUE);
            }
 else {
              ldapUser.setAttribute(ldapAttrName,new LinkedHashSet<>(asList));
            }
          }
        }
      }
    }
;
  }
  if (isAlwaysReadValueFromLDAP) {
    delegate=new UserModelDelegate(delegate){
      @Override public String getFirstAttribute(      String name){
        if (name.equalsIgnoreCase(userModelAttrName)) {
          return ldapUser.getAttributeAsString(ldapAttrName);
        }
 else {
          return super.getFirstAttribute(name);
        }
      }
      @Override public List<String> getAttribute(      String name){
        if (name.equalsIgnoreCase(userModelAttrName)) {
          Collection<String> ldapAttrValue=ldapUser.getAttributeAsSet(ldapAttrName);
          if (ldapAttrValue == null) {
            return Collections.emptyList();
          }
 else {
            return new ArrayList<>(ldapAttrValue);
          }
        }
 else {
          return super.getAttribute(name);
        }
      }
      @Override public Map<String,List<String>> getAttributes(){
        Map<String,List<String>> attrs=new HashMap<>(super.getAttributes());
        if (userModelProperties.get(userModelAttrName.toLowerCase()) != null) {
          return attrs;
        }
        Set<String> allLdapAttrValues=ldapUser.getAttributeAsSet(ldapAttrName);
        if (allLdapAttrValues != null) {
          attrs.put(userModelAttrName,new ArrayList<>(allLdapAttrValues));
        }
        return attrs;
      }
      @Override public String getEmail(){
        if (UserModel.EMAIL.equalsIgnoreCase(userModelAttrName)) {
          return ldapUser.getAttributeAsString(ldapAttrName);
        }
 else {
          return super.getEmail();
        }
      }
      @Override public String getLastName(){
        if (UserModel.LAST_NAME.equalsIgnoreCase(userModelAttrName)) {
          return ldapUser.getAttributeAsString(ldapAttrName);
        }
 else {
          return super.getLastName();
        }
      }
      @Override public String getFirstName(){
        if (UserModel.FIRST_NAME.equalsIgnoreCase(userModelAttrName)) {
          return ldapUser.getAttributeAsString(ldapAttrName);
        }
 else {
          return super.getFirstName();
        }
      }
    }
;
  }
  return delegate;
}
