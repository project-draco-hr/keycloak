{
  final String userModelAttrName=mapperModel.getConfig().get(USER_MODEL_ATTRIBUTE);
  final String ldapAttrName=mapperModel.getConfig().get(LDAP_ATTRIBUTE);
  boolean isAlwaysReadValueFromLDAP=parseBooleanParameter(mapperModel,ALWAYS_READ_VALUE_FROM_LDAP);
  if (ldapProvider.getEditMode() == UserFederationProvider.EditMode.WRITABLE && !isReadOnly(mapperModel)) {
    delegate=new TxAwareLDAPUserModelDelegate(delegate,ldapProvider,ldapUser){
      @Override public void setAttribute(      String name,      String value){
        setLDAPAttribute(name,value);
        super.setAttribute(name,value);
      }
      @Override public void setEmail(      String email){
        setLDAPAttribute(UserModel.EMAIL,email);
        super.setEmail(email);
      }
      @Override public void setLastName(      String lastName){
        setLDAPAttribute(UserModel.LAST_NAME,lastName);
        super.setLastName(lastName);
      }
      @Override public void setFirstName(      String firstName){
        setLDAPAttribute(UserModel.FIRST_NAME,firstName);
        super.setFirstName(firstName);
      }
      protected void setLDAPAttribute(      String modelAttrName,      String value){
        if (modelAttrName.equalsIgnoreCase(userModelAttrName)) {
          if (logger.isTraceEnabled()) {
            logger.tracef("Pushing user attribute to LDAP. Model attribute name: %s, LDAP attribute name: %s, Attribute value: %s",modelAttrName,ldapAttrName,value);
          }
          ensureTransactionStarted();
          ldapUser.setAttribute(ldapAttrName,value);
        }
      }
    }
;
  }
  if (isAlwaysReadValueFromLDAP) {
    delegate=new UserModelDelegate(delegate){
      @Override public String getAttribute(      String name){
        if (name.equalsIgnoreCase(userModelAttrName)) {
          return ldapUser.getAttributeAsStringCaseInsensitive(ldapAttrName);
        }
 else {
          return super.getAttribute(name);
        }
      }
      @Override public Map<String,String> getAttributes(){
        Map<String,String> attrs=new HashMap<>(super.getAttributes());
        if (UserModel.EMAIL.equalsIgnoreCase(userModelAttrName) || UserModel.FIRST_NAME.equalsIgnoreCase(userModelAttrName) || UserModel.LAST_NAME.equalsIgnoreCase(userModelAttrName)) {
          return attrs;
        }
        attrs.put(userModelAttrName,ldapUser.getAttributeAsStringCaseInsensitive(ldapAttrName));
        return attrs;
      }
      @Override public String getEmail(){
        if (UserModel.EMAIL.equalsIgnoreCase(userModelAttrName)) {
          return ldapUser.getAttributeAsStringCaseInsensitive(ldapAttrName);
        }
 else {
          return super.getEmail();
        }
      }
      @Override public String getLastName(){
        if (UserModel.LAST_NAME.equalsIgnoreCase(userModelAttrName)) {
          return ldapUser.getAttributeAsStringCaseInsensitive(ldapAttrName);
        }
 else {
          return super.getLastName();
        }
      }
      @Override public String getFirstName(){
        if (UserModel.FIRST_NAME.equalsIgnoreCase(userModelAttrName)) {
          return ldapUser.getAttributeAsStringCaseInsensitive(ldapAttrName);
        }
 else {
          return super.getFirstName();
        }
      }
    }
;
  }
  return delegate;
}
