{
  UserFederationSyncResult syncResult=new UserFederationSyncResult(){
    @Override public String getStatus(){
      return String.format("%d roles imported to LDAP, %d roles already existed in LDAP",getAdded(),getUpdated());
    }
  }
;
  if (config.getMode() != LDAPGroupMapperMode.LDAP_ONLY) {
    logger.warnf("Ignored sync for federation mapper '%s' as it's mode is '%s'",mapperModel.getName(),config.getMode().toString());
    return syncResult;
  }
  logger.debugf("Syncing roles from Keycloak into LDAP. Mapper is [%s], LDAP provider is [%s]",mapperModel.getName(),ldapProvider.getModel().getDisplayName());
  LDAPQuery ldapQuery=createRoleQuery();
  List<LDAPObject> ldapRoles=ldapQuery.getResultList();
  Set<String> ldapRoleNames=new HashSet<>();
  String rolesRdnAttr=config.getRoleNameLdapAttribute();
  for (  LDAPObject ldapRole : ldapRoles) {
    String roleName=ldapRole.getAttributeAsString(rolesRdnAttr);
    ldapRoleNames.add(roleName);
  }
  RoleContainerModel roleContainer=getTargetRoleContainer();
  Set<RoleModel> keycloakRoles=roleContainer.getRoles();
  for (  RoleModel keycloakRole : keycloakRoles) {
    String roleName=keycloakRole.getName();
    if (ldapRoleNames.contains(roleName)) {
      syncResult.increaseUpdated();
    }
 else {
      logger.debugf("Syncing role [%s] from Keycloak to LDAP",roleName);
      createLDAPRole(roleName);
      syncResult.increaseAdded();
    }
  }
  return syncResult;
}
