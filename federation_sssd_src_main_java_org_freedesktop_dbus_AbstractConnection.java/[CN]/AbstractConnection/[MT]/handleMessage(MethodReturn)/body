{
  if (Debug.debug)   Debug.print(Debug.DEBUG,"Handling incoming method return: " + mr);
  MethodCall m=null;
  if (null == pendingCalls)   return;
synchronized (pendingCalls) {
    if (pendingCalls.contains(mr.getReplySerial()))     m=pendingCalls.remove(mr.getReplySerial());
  }
  if (null != m) {
    m.setReply(mr);
    mr.setCall(m);
    CallbackHandler cbh=null;
    DBusAsyncReply asr=null;
synchronized (pendingCallbacks) {
      cbh=pendingCallbacks.remove(m);
      if (Debug.debug)       Debug.print(Debug.VERBOSE,cbh + " = pendingCallbacks.remove(" + m+ ")");
      asr=pendingCallbackReplys.remove(m);
    }
    if (null != cbh) {
      final CallbackHandler fcbh=cbh;
      final DBusAsyncReply fasr=asr;
      if (Debug.debug)       Debug.print(Debug.VERBOSE,"Adding Runnable for method " + fasr.getMethod() + " with callback handler "+ fcbh);
      addRunnable(new Runnable(){
        private boolean run=false;
        public synchronized void run(){
          if (run)           return;
          run=true;
          try {
            if (Debug.debug)             Debug.print(Debug.VERBOSE,"Running Callback for " + mr);
            DBusCallInfo info=new DBusCallInfo(mr);
synchronized (infomap) {
              infomap.put(Thread.currentThread(),info);
            }
            fcbh.handle(RemoteInvocationHandler.convertRV(mr.getSig(),mr.getParameters(),fasr.getMethod(),fasr.getConnection()));
synchronized (infomap) {
              infomap.remove(Thread.currentThread());
            }
          }
 catch (          Exception e) {
            if (EXCEPTION_DEBUG && Debug.debug)             Debug.print(Debug.ERR,e);
          }
        }
      }
);
    }
  }
 else   try {
    queueOutgoing(new Error(mr,new DBusExecutionException(getString("spuriousReply"))));
  }
 catch (  DBusException DBe) {
  }
}
