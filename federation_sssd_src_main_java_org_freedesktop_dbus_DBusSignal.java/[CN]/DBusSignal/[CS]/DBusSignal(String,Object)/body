{
  super(Message.Endian.BIG,Message.MessageType.SIGNAL,(byte)0);
  if (!objectpath.matches(AbstractConnection.OBJECT_REGEX))   throw new DBusException(getString("invalidObjectPath") + objectpath);
  Class<? extends DBusSignal> tc=getClass();
  String member;
  if (tc.isAnnotationPresent(DBusMemberName.class))   member=tc.getAnnotation(DBusMemberName.class).value();
 else   member=tc.getSimpleName();
  String iface=null;
  Class<? extends Object> enc=tc.getEnclosingClass();
  if (null == enc || !DBusInterface.class.isAssignableFrom(enc) || enc.getName().equals(enc.getSimpleName()))   throw new DBusException(getString("signalsMustBeMemberOfClass"));
 else   if (null != enc.getAnnotation(DBusInterfaceName.class))   iface=enc.getAnnotation(DBusInterfaceName.class).value();
 else   iface=AbstractConnection.dollar_pattern.matcher(enc.getName()).replaceAll(".");
  headers.put(Message.HeaderField.PATH,objectpath);
  headers.put(Message.HeaderField.MEMBER,member);
  headers.put(Message.HeaderField.INTERFACE,iface);
  Vector<Object> hargs=new Vector<Object>();
  hargs.add(new Object[]{Message.HeaderField.PATH,new Object[]{ArgumentType.OBJECT_PATH_STRING,objectpath}});
  hargs.add(new Object[]{Message.HeaderField.INTERFACE,new Object[]{ArgumentType.STRING_STRING,iface}});
  hargs.add(new Object[]{Message.HeaderField.MEMBER,new Object[]{ArgumentType.STRING_STRING,member}});
  String sig=null;
  if (0 < args.length) {
    try {
      Type[] types=typeCache.get(tc);
      if (null == types) {
        Constructor<? extends DBusSignal> con=(Constructor<? extends DBusSignal>)tc.getDeclaredConstructors()[0];
        conCache.put(tc,con);
        Type[] ts=con.getGenericParameterTypes();
        types=new Type[ts.length - 1];
        for (int i=1; i <= types.length; i++)         if (ts[i] instanceof TypeVariable)         types[i - 1]=((TypeVariable<GenericDeclaration>)ts[i]).getBounds()[0];
 else         types[i - 1]=ts[i];
        typeCache.put(tc,types);
      }
      sig=Marshalling.getDBusType(types);
      hargs.add(new Object[]{Message.HeaderField.SIGNATURE,new Object[]{ArgumentType.SIGNATURE_STRING,sig}});
      headers.put(Message.HeaderField.SIGNATURE,sig);
      setArgs(args);
    }
 catch (    Exception e) {
      if (AbstractConnection.EXCEPTION_DEBUG && Debug.debug)       Debug.print(Debug.ERR,e);
      throw new DBusException(getString("errorAddSignalParameters") + e.getMessage());
    }
  }
  blen=new byte[4];
  appendBytes(blen);
  append("ua(yv)",++serial,hargs.toArray());
  pad((byte)8);
}
