{
  String intname=intnames.get(getInterface());
  String signame=signames.get(getName());
  if (null == intname)   intname=getInterface();
  if (null == signame)   signame=getName();
  if (null == c)   c=createSignalClass(intname,signame);
  if (Debug.debug)   Debug.print(Debug.DEBUG,"Converting signal to type: " + c);
  Type[] types=typeCache.get(c);
  Constructor<? extends DBusSignal> con=conCache.get(c);
  if (null == types) {
    con=(Constructor<? extends DBusSignal>)c.getDeclaredConstructors()[0];
    conCache.put(c,con);
    Type[] ts=con.getGenericParameterTypes();
    types=new Type[ts.length - 1];
    for (int i=1; i < ts.length; i++)     if (ts[i] instanceof TypeVariable)     for (    Type b : ((TypeVariable<GenericDeclaration>)ts[i]).getBounds())     types[i - 1]=b;
 else     types[i - 1]=ts[i];
    typeCache.put(c,types);
  }
  try {
    DBusSignal s;
    Object[] args=Marshalling.deSerializeParameters(getParameters(),types,conn);
    if (null == args)     s=(DBusSignal)con.newInstance(getPath());
 else {
      Object[] params=new Object[args.length + 1];
      params[0]=getPath();
      System.arraycopy(args,0,params,1,args.length);
      if (Debug.debug)       Debug.print(Debug.DEBUG,"Creating signal of type " + c + " with parameters "+ Arrays.deepToString(params));
      s=(DBusSignal)con.newInstance(params);
    }
    s.headers=headers;
    s.wiredata=wiredata;
    s.bytecounter=wiredata.length;
    return s;
  }
 catch (  Exception e) {
    if (AbstractConnection.EXCEPTION_DEBUG && Debug.debug)     Debug.print(Debug.ERR,e);
    throw new DBusException(e.getMessage());
  }
}
