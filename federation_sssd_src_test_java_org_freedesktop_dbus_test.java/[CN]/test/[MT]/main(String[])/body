{
  try {
    System.out.println("Creating Connection");
    serverconn=DBusConnection.getConnection(DBusConnection.SESSION);
    clientconn=DBusConnection.getConnection(DBusConnection.SESSION);
    serverconn.setWeakReferences(true);
    clientconn.setWeakReferences(true);
    System.out.println("Registering Name");
    serverconn.requestBusName("foo.bar.Test");
    Peer peer=clientconn.getRemoteObject("foo.bar.Test","/Test",Peer.class);
    DBus dbus=clientconn.getRemoteObject("org.freedesktop.DBus","/org/freedesktop/DBus",DBus.class);
    System.out.print("Listening for signals...");
    signalhandler sigh=new signalhandler();
    renamedsignalhandler rsh=new renamedsignalhandler();
    try {
      clientconn.addSigHandler(TestSignalInterface.EmptySignal.class,new emptysignalhandler());
      clientconn.addSigHandler(TestSignalInterface.TestSignal.class,sigh);
      clientconn.addSigHandler(TestSignalInterface2.TestRenamedSignal.class,rsh);
      clientconn.addSigHandler(DBus.Local.Disconnected.class,new disconnecthandler(clientconn,rsh));
      String source=dbus.GetNameOwner("foo.bar.Test");
      clientconn.addSigHandler(TestSignalInterface.TestArraySignal.class,source,peer,new arraysignalhandler());
      clientconn.addSigHandler(TestSignalInterface.TestObjectSignal.class,new objectsignalhandler());
      clientconn.addSigHandler(TestSignalInterface.TestPathSignal.class,new pathsignalhandler());
      badarraysignalhandler<TestSignalInterface.TestSignal> bash=new badarraysignalhandler<TestSignalInterface.TestSignal>();
      clientconn.addSigHandler(TestSignalInterface.TestSignal.class,bash);
      clientconn.removeSigHandler(TestSignalInterface.TestSignal.class,bash);
      System.out.println("done");
    }
 catch (    MatchRuleInvalid MRI) {
      test.fail("Failed to add handlers: " + MRI.getMessage());
    }
catch (    DBusException DBe) {
      test.fail("Failed to add handlers: " + DBe.getMessage());
    }
    System.out.println("Listening for Method Calls");
    testclass tclass=new testclass(serverconn);
    testclass tclass2=new testclass(serverconn);
    serverconn.exportObject("/Test",tclass);
    serverconn.exportObject("/BadTest",tclass);
    serverconn.exportObject("/BadTest2",tclass2);
    serverconn.addFallback("/FallbackTest",tclass);
    serverconn.unExportObject("/BadTest");
    tclass2=null;
    System.gc();
    System.runFinalization();
    System.gc();
    System.runFinalization();
    System.gc();
    System.runFinalization();
    System.out.println("Sending Signal");
    serverconn.sendSignal(new TestSignalInterface.TestSignal("/foo/bar/Wibble","Bar",new UInt32(42)));
    serverconn.sendSignal(new TestSignalInterface.EmptySignal("/foo/bar/Wibble"));
    serverconn.sendSignal(new TestSignalInterface2.TestRenamedSignal("/foo/bar/Wibble","Bar",new UInt32(42)));
    System.out.println("These things are on the bus:");
    String[] names=dbus.ListNames();
    for (    String name : names)     System.out.println("\t" + name);
    System.out.println("Getting our introspection data");
    Introspectable intro=clientconn.getRemoteObject("foo.bar.Test","/",Introspectable.class);
    String data;
    intro=clientconn.getRemoteObject("foo.bar.Test","/Test",Introspectable.class);
    data=intro.Introspect();
    if (null == data || !data.startsWith("<!DOCTYPE"))     fail("Introspection data invalid");
    System.out.println("Got Introspection Data: \n" + data);
    Set<String> peers=serverconn.new PeerSet();
    peers.add("org.freedesktop.DBus");
    clientconn.requestBusName("test.testclient");
    peers.add("test.testclient");
    clientconn.releaseBusName("test.testclient");
    System.out.println("Pinging ourselves");
    for (int i=0; i < 10; i++) {
      long then=System.currentTimeMillis();
      peer.Ping();
      long now=System.currentTimeMillis();
      System.out.println("Ping returned in " + (now - then) + "ms.");
    }
    System.out.println("Calling Method0/1");
    TestRemoteInterface tri=(TestRemoteInterface)clientconn.getPeerRemoteObject("foo.bar.Test","/Test");
    System.out.println("Got Remote Object: " + tri);
    String rname=tri.getName();
    System.out.println("Got Remote Name: " + rname);
    Map<String,Variant> svmmap=tri.svm();
    System.out.println(svmmap.toString());
    if (!"{ Parameters => [{ Name => [Joe],Password => [abcdef] }] }".equals(svmmap.toString()))     fail("incorrect reply from svm");
    Path path=new Path("/nonexistantwooooooo");
    Path p=tri.pathrv(path);
    System.out.println(path.toString() + " => " + p.toString());
    if (!path.equals(p))     fail("pathrv incorrect");
    List<Path> paths=new Vector<Path>();
    paths.add(path);
    List<Path> ps=tri.pathlistrv(paths);
    System.out.println(paths.toString() + " => " + ps.toString());
    if (!paths.equals(ps))     fail("pathlistrv incorrect");
    Map<Path,Path> pathm=new HashMap<Path,Path>();
    pathm.put(path,path);
    Map<Path,Path> pm=tri.pathmaprv(pathm);
    System.out.println(pathm.toString() + " => " + pm.toString());
    System.out.println(pm.containsKey(path) + " " + pm.get(path)+ " "+ path.equals(pm.get(path)));
    System.out.println(pm.containsKey(p) + " " + pm.get(p)+ " "+ p.equals(pm.get(p)));
    for (    Path q : pm.keySet()) {
      System.out.println(q);
      System.out.println(pm.get(q));
    }
    if (!pm.containsKey(path) || !path.equals(pm.get(path)))     fail("pathmaprv incorrect");
    serverconn.sendSignal(new TestSignalInterface.TestPathSignal("/Test",path,paths,pathm));
    Collator col=Collator.getInstance();
    col.setDecomposition(Collator.FULL_DECOMPOSITION);
    col.setStrength(Collator.PRIMARY);
    if (0 != col.compare("This Is A UTF-8 Name: ??? !!",rname))     fail("getName return value incorrect");
    System.out.println("sending it to sleep");
    tri.waitawhile();
    System.out.println("testing floats");
    if (17.093f != tri.testfloat(new float[]{17.093f,-23f,0.0f,31.42f}))     fail("testfloat returned the wrong thing");
    System.out.println("Structs of Structs");
    List<List<Integer>> lli=new Vector<List<Integer>>();
    List<Integer> li=new Vector<Integer>();
    li.add(1);
    li.add(2);
    li.add(3);
    lli.add(li);
    lli.add(li);
    lli.add(li);
    TestStruct3 ts3=new TestStruct3(new TestStruct2(new Vector<String>(),new Variant<Integer>(0)),lli);
    int[][] out=tri.teststructstruct(ts3);
    if (out.length != 3)     fail("teststructstruct returned the wrong thing: " + Arrays.deepToString(out));
    for (    int[] o : out)     if (o.length != 3 || o[0] != 1 || o[1] != 2 || o[2] != 3)     fail("teststructstruct returned the wrong thing: " + Arrays.deepToString(out));
    System.out.println("frobnicating");
    List<Long> ls=new Vector<Long>();
    ls.add(2L);
    ls.add(5L);
    ls.add(71L);
    Map<UInt16,Short> mus=new HashMap<UInt16,Short>();
    mus.put(new UInt16(4),(short)5);
    mus.put(new UInt16(5),(short)6);
    mus.put(new UInt16(6),(short)7);
    Map<String,Map<UInt16,Short>> msmus=new HashMap<String,Map<UInt16,Short>>();
    msmus.put("stuff",mus);
    int rint=tri.frobnicate(ls,msmus,13);
    if (-5 != rint)     fail("frobnicate return value incorrect");
    System.out.println("Doing stuff asynchronously with callback");
    clientconn.callWithCallback(tri,"getName",new callbackhandler());
    System.out.println("Doing stuff asynchronously with callback, which throws an error");
    clientconn.callWithCallback(tri,"getNameAndThrow",new callbackhandler());
    try {
      System.out.println("Throwing stuff");
      tri.throwme();
      test.fail("Method Execution should have failed");
    }
 catch (    TestException Te) {
      System.out.println("Remote Method Failed with: " + Te.getClass().getName() + " "+ Te.getMessage());
      if (!Te.getMessage().equals("test"))       test.fail("Error message was not correct");
    }
    Vector<Type> ts=new Vector<Type>();
    Marshalling.getJavaType("ya{si}",ts,-1);
    tri.sig(ts.toArray(new Type[0]));
    tri.newpathtest(new Path("/new/path/test"));
    try {
      System.out.println("Calling Method2");
      tri=clientconn.getRemoteObject("foo.bar.NotATest","/Moofle",TestRemoteInterface.class);
      System.out.println("Got Remote Name: " + tri.getName());
      test.fail("Method Execution should have failed");
    }
 catch (    ServiceUnknown SU) {
      System.out.println("Remote Method Failed with: " + SU.getClass().getName() + " "+ SU.getMessage());
    }
    try {
      System.out.println("Calling Method3");
      tri=clientconn.getRemoteObject("foo.bar.Test","/Moofle",TestRemoteInterface.class);
      System.out.println("Got Remote Name: " + tri.getName());
      test.fail("Method Execution should have failed");
    }
 catch (    UnknownObject UO) {
      System.out.println("Remote Method Failed with: " + UO.getClass().getName() + " "+ UO.getMessage());
    }
    try {
      System.out.println("Calling Method4");
      tri=clientconn.getRemoteObject("foo.bar.Test","/BadTest",TestRemoteInterface.class);
      System.out.println("Got Remote Name: " + tri.getName());
      test.fail("Method Execution should have failed");
    }
 catch (    UnknownObject UO) {
      System.out.println("Remote Method Failed with: " + UO.getClass().getName() + " "+ UO.getMessage());
    }
    try {
      System.out.println("Calling Method5");
      tri=clientconn.getRemoteObject("foo.bar.Test","/BadTest2",TestRemoteInterface.class);
      System.out.println("Got Remote Name: " + tri.getName());
      test.fail("Method Execution should have failed");
    }
 catch (    UnknownObject UO) {
      System.out.println("Remote Method Failed with: " + UO.getClass().getName() + " "+ UO.getMessage());
    }
    System.out.println("Calling Method6");
    tri=clientconn.getRemoteObject("foo.bar.Test","/FallbackTest/0/1",TestRemoteInterface.class);
    intro=clientconn.getRemoteObject("foo.bar.Test","/FallbackTest/0/4",Introspectable.class);
    System.out.println("Got Fallback Name: " + tri.getName());
    System.out.println("Fallback Introspection Data: \n" + intro.Introspect());
    System.out.println("Testing Properties returning Paths");
    Properties prop=clientconn.getRemoteObject("foo.bar.Test","/Test",Properties.class);
    Path prv=(Path)prop.Get("foo.bar","foo");
    System.out.println("Got path " + prv);
    System.out.println("Calling Method7--9");
    TestRemoteInterface2 tri2=clientconn.getRemoteObject("foo.bar.Test","/Test",TestRemoteInterface2.class);
    System.out.print("Calling the other introspect method: ");
    String intro2=tri2.Introspect();
    System.out.println(intro2);
    if (0 != col.compare("Not XML",intro2))     fail("Introspect return value incorrect");
    TestTuple<String,List<Integer>,Boolean> rv=tri2.show(234);
    System.out.println("Show returned: " + rv);
    if (!serverconn.getUniqueName().equals(rv.a) || 1 != rv.b.size() || 1953 != rv.b.get(0) || true != rv.c.booleanValue())     fail("show return value incorrect (" + rv.a + ","+ rv.b+ ","+ rv.c+ ")");
    System.out.println("Doing stuff asynchronously");
    DBusAsyncReply<Boolean> stuffreply=(DBusAsyncReply<Boolean>)clientconn.callMethodAsync(tri2,"dostuff",new TestStruct("bar",new UInt32(52),new Variant<Boolean>(new Boolean(true))));
    System.out.println("Checking bools");
    if (tri2.check())     fail("bools are broken");
    List<String> l=new Vector<String>();
    l.add("hi");
    l.add("hello");
    l.add("hej");
    l.add("hey");
    l.add("aloha");
    System.out.println("Sampling Arrays:");
    List<Integer> is=tri2.sampleArray(l,new Integer[]{1,5,7,9},new long[]{2,6,8,12});
    System.out.println("sampleArray returned an array:");
    for (    Integer i : is)     System.out.println("--" + i);
    if (is.size() != 5 || is.get(0).intValue() != -1 || is.get(1).intValue() != -5 || is.get(2).intValue() != -7 || is.get(3).intValue() != -12 || is.get(4).intValue() != -18)     fail("sampleArray return value incorrect");
    System.out.println("Get This");
    if (!tclass.equals(tri2.getThis(tri2)))     fail("Didn't get the correct this");
    Boolean b=stuffreply.getReply();
    System.out.println("Do stuff replied " + b);
    if (true != b.booleanValue())     fail("dostuff return value incorrect");
    System.out.print("Sending Array Signal...");
    List<TestStruct2> tsl=new Vector<TestStruct2>();
    tsl.add(new TestStruct2(l,new Variant<UInt64>(new UInt64(567))));
    Map<UInt32,TestStruct2> tsm=new HashMap<UInt32,TestStruct2>();
    tsm.put(new UInt32(1),new TestStruct2(l,new Variant<UInt64>(new UInt64(678))));
    tsm.put(new UInt32(42),new TestStruct2(l,new Variant<UInt64>(new UInt64(789))));
    serverconn.sendSignal(new TestSignalInterface.TestArraySignal("/Test",tsl,tsm));
    System.out.println("done");
    System.out.print("testing custom serialization...");
    Vector<Integer> v=new Vector<Integer>();
    v.add(1);
    v.add(2);
    v.add(3);
    TestSerializable<String> s=new TestSerializable<String>(1,"woo",v);
    s=tri2.testSerializable((byte)12,s,13);
    System.out.print("returned: " + s);
    if (s.getInt() != 1 || !s.getString().equals("woo") || s.getVector().size() != 3 || s.getVector().get(0) != 1 || s.getVector().get(1) != 2 || s.getVector().get(2) != 3)     fail("Didn't get back the same TestSerializable");
    System.out.println("done");
    System.out.print("testing complex variants...");
    Map m=new HashMap();
    m.put("cow","moo");
    tri2.complexv(new Variant(m,"a{ss}"));
    System.out.println("done");
    System.out.print("testing recursion...");
    if (0 != col.compare("This Is A UTF-8 Name: ??? !!",tri2.recursionTest()))     fail("recursion test failed");
    System.out.println("done");
    System.out.print("testing method overloading...");
    tri=clientconn.getRemoteObject("foo.bar.Test","/Test",TestRemoteInterface.class);
    if (1 != tri2.overload("foo"))     test.fail("wrong overloaded method called");
    if (2 != tri2.overload((byte)0))     test.fail("wrong overloaded method called");
    if (3 != tri2.overload())     test.fail("wrong overloaded method called");
    if (4 != tri.overload())     test.fail("wrong overloaded method called");
    System.out.println("done");
    System.out.print("reg13291...");
    byte[] as=new byte[10];
    for (int i=0; i < 10; i++)     as[i]=(byte)(100 - i);
    tri.reg13291(as,as);
    System.out.println("done");
    System.out.print("Testing nested lists...");
    lli=new Vector<List<Integer>>();
    li=new Vector<Integer>();
    li.add(1);
    lli.add(li);
    List<List<Integer>> reti=tri2.checklist(lli);
    if (reti.size() != 1 || reti.get(0).size() != 1 || reti.get(0).get(0) != 1)     test.fail("Failed to check nested lists");
    System.out.println("done");
    System.out.print("Testing dynamic object creation...");
    TestNewInterface tni=tri2.getNew();
    System.out.print(tni.getName() + " ");
    System.out.println("done");
    serverconn.sendSignal(new TestSignalInterface.TestObjectSignal("/foo/bar/Wibble",tclass));
    Thread.sleep(1000);
    if (peers.size() != 1)     fail("peers hasn't been trimmed");
    if (!peers.contains("org.freedesktop.DBus"))     fail("peers contains the wrong name");
    System.out.println("Checking for outstanding errors");
    DBusExecutionException DBEe=serverconn.getError();
    if (null != DBEe)     throw DBEe;
    DBEe=clientconn.getError();
    if (null != DBEe)     throw DBEe;
    System.out.println("Disconnecting");
    clientconn.disconnect();
    serverconn.disconnect();
    System.out.println("Trying to do things after disconnection");
    clientconn.removeSigHandler(TestSignalInterface.TestSignal.class,sigh);
    try {
      System.out.println("getName() suceeded and returned: " + tri.getName());
      fail("Should not succeed when disconnected");
    }
 catch (    NotConnected NC) {
      System.out.println("getName() failed with exception " + NC);
    }
    clientconn=null;
    serverconn=null;
    if (!done1)     fail("Signal handler 1 failed to be run");
    if (!done2)     fail("Signal handler 2 failed to be run");
    if (!done3)     fail("Signal handler 3 failed to be run");
    if (!done4)     fail("Callback handler failed to be run");
    if (!done5)     fail("Signal handler R failed to be run");
    if (!done6)     fail("Disconnect handler failed to be run");
    if (!done7)     fail("Signal handler E failed to be run");
    if (!done8)     fail("Error callback handler failed to be run");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Unexpected Exception Occurred: " + e);
  }
}
