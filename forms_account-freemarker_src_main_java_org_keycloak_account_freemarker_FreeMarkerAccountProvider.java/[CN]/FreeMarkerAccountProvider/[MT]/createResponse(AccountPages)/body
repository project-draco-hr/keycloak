{
  Map<String,Object> attributes=new HashMap<String,Object>();
  ThemeProvider themeProvider=session.getProvider(ThemeProvider.class,"extending");
  Theme theme;
  try {
    theme=themeProvider.getTheme(realm.getAccountTheme(),Theme.Type.ACCOUNT);
  }
 catch (  IOException e) {
    logger.error("Failed to create theme",e);
    return Response.serverError().build();
  }
  try {
    attributes.put("properties",theme.getProperties());
  }
 catch (  IOException e) {
    logger.warn("Failed to load properties",e);
  }
  Locale locale=LocaleHelper.getLocale(realm,user,uriInfo,headers);
  Properties messagesBundle;
  try {
    messagesBundle=theme.getMessages(locale);
    attributes.put("msg",new MessageFormatterMethod(locale,messagesBundle));
  }
 catch (  IOException e) {
    logger.warn("Failed to load messages",e);
    messagesBundle=new Properties();
  }
  URI baseUri=uriInfo.getBaseUri();
  UriBuilder baseUriBuilder=uriInfo.getBaseUriBuilder();
  for (  Map.Entry<String,List<String>> e : uriInfo.getQueryParameters().entrySet()) {
    baseUriBuilder.queryParam(e.getKey(),e.getValue().toArray());
  }
  URI baseQueryUri=baseUriBuilder.build();
  if (stateChecker != null) {
    attributes.put("stateChecker",stateChecker);
  }
  MessagesPerFieldBean messagesPerField=new MessagesPerFieldBean();
  if (messages != null) {
    MessageBean wholeMessage=new MessageBean(null,messageType);
    for (    FormMessage message : this.messages) {
      String formattedMessageText=formatMessage(message,messagesBundle,locale);
      if (formattedMessageText != null) {
        wholeMessage.appendSummaryLine(formattedMessageText);
        messagesPerField.addMessage(message.getField(),formattedMessageText,messageType);
      }
    }
    attributes.put("message",wholeMessage);
  }
  attributes.put("messagesPerField",messagesPerField);
  if (referrer != null) {
    attributes.put("referrer",new ReferrerBean(referrer));
  }
  if (realm != null) {
    attributes.put("realm",new RealmBean(realm));
  }
  attributes.put("url",new UrlBean(realm,theme,baseUri,baseQueryUri,uriInfo.getRequestUri(),stateChecker));
  if (realm.isInternationalizationEnabled()) {
    UriBuilder b;
switch (page) {
default :
      b=UriBuilder.fromUri(baseQueryUri).path(uriInfo.getPath());
    break;
}
attributes.put("locale",new LocaleBean(realm,locale,b,messagesBundle));
}
attributes.put("features",new FeaturesBean(identityProviderEnabled,eventsEnabled,passwordUpdateSupported));
attributes.put("account",new AccountBean(user,profileFormData));
switch (page) {
case TOTP:
attributes.put("totp",new TotpBean(realm,user,baseUri));
break;
case FEDERATED_IDENTITY:
attributes.put("federatedIdentity",new AccountFederatedIdentityBean(session,realm,user,uriInfo.getBaseUri(),stateChecker));
break;
case LOG:
attributes.put("log",new LogBean(events));
break;
case SESSIONS:
attributes.put("sessions",new SessionsBean(realm,sessions));
break;
case PASSWORD:
attributes.put("password",new PasswordBean(passwordSet));
}
try {
String result=freeMarker.processTemplate(attributes,Templates.getTemplate(page),theme);
Response.ResponseBuilder builder=Response.status(status).type(MediaType.TEXT_HTML).entity(result);
BrowserSecurityHeaderSetup.headers(builder,realm);
LocaleHelper.updateLocaleCookie(builder,locale,realm,uriInfo,Urls.localeCookiePath(baseUri,realm.getName()));
return builder.build();
}
 catch (FreeMarkerException e) {
logger.error("Failed to process template",e);
return Response.serverError().build();
}
}
