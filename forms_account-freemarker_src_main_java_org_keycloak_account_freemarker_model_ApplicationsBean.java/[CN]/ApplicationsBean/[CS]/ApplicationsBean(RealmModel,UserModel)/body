{
  Set<ClientModel> offlineClients=new OfflineUserSessionManager().findClientsWithOfflineToken(realm,user);
  List<ClientModel> realmClients=realm.getClients();
  for (  ClientModel client : realmClients) {
    if (client.isBearerOnly()) {
      continue;
    }
    Set<RoleModel> availableRoles=TokenManager.getAccess(null,client,user);
    if (availableRoles.isEmpty()) {
      continue;
    }
    List<RoleModel> realmRolesAvailable=new LinkedList<RoleModel>();
    MultivaluedHashMap<String,ClientRoleEntry> resourceRolesAvailable=new MultivaluedHashMap<String,ClientRoleEntry>();
    processRoles(availableRoles,realmRolesAvailable,resourceRolesAvailable);
    List<RoleModel> realmRolesGranted=new LinkedList<RoleModel>();
    MultivaluedHashMap<String,ClientRoleEntry> resourceRolesGranted=new MultivaluedHashMap<String,ClientRoleEntry>();
    List<String> claimsGranted=new LinkedList<String>();
    if (client.isConsentRequired()) {
      UserConsentModel consent=user.getConsentByClient(client.getId());
      if (consent != null) {
        processRoles(consent.getGrantedRoles(),realmRolesGranted,resourceRolesGranted);
        for (        ProtocolMapperModel protocolMapper : consent.getGrantedProtocolMappers()) {
          claimsGranted.add(protocolMapper.getConsentText());
        }
      }
    }
    List<String> additionalGrants=new ArrayList<>();
    if (offlineClients.contains(client)) {
      additionalGrants.add("${offlineAccess}");
    }
    ApplicationEntry appEntry=new ApplicationEntry(realmRolesAvailable,resourceRolesAvailable,realmRolesGranted,resourceRolesGranted,client,claimsGranted,additionalGrants);
    applications.add(appEntry);
  }
}
