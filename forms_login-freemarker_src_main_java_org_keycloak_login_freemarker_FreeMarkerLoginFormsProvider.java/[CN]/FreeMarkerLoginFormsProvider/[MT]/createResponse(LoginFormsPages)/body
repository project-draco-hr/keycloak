{
  MultivaluedMap<String,String> queryParameterMap=queryParams != null ? queryParams : uriInfo.getQueryParameters();
  String requestURI=uriInfo.getBaseUri().getPath();
  UriBuilder uriBuilder=UriBuilder.fromUri(requestURI);
  for (  String k : queryParameterMap.keySet()) {
    Object[] objects=queryParameterMap.get(k).toArray();
    if (objects.length == 1 && objects[0] == null)     continue;
    uriBuilder.replaceQueryParam(k,objects);
  }
  if (accessCode != null) {
    uriBuilder.replaceQueryParam(OAuth2Constants.CODE,accessCode);
  }
  Map<String,Object> attributes=new HashMap<String,Object>();
  ThemeProvider themeProvider=session.getProvider(ThemeProvider.class,"extending");
  Theme theme;
  try {
    theme=themeProvider.getTheme(realm.getLoginTheme(),Theme.Type.LOGIN);
  }
 catch (  IOException e) {
    logger.error("Failed to create theme",e);
    return Response.serverError().build();
  }
  try {
    attributes.put("properties",theme.getProperties());
  }
 catch (  IOException e) {
    logger.warn("Failed to load properties",e);
  }
  Properties messages;
  try {
    messages=theme.getMessages();
    attributes.put("rb",messages);
  }
 catch (  IOException e) {
    logger.warn("Failed to load messages",e);
    messages=new Properties();
  }
  if (message != null) {
    attributes.put("message",new MessageBean(messages.containsKey(message) ? messages.getProperty(message) : message,messageType));
  }
  if (page == LoginFormsPages.OAUTH_GRANT) {
    uriBuilder.replaceQuery(null);
  }
  URI baseUri=uriBuilder.build();
  if (realm != null) {
    attributes.put("realm",new RealmBean(realm));
    attributes.put("social",new SocialBean(realm,baseUri));
    attributes.put("url",new UrlBean(realm,theme,baseUri));
  }
  attributes.put("login",new LoginBean(formData));
switch (page) {
case LOGIN_CONFIG_TOTP:
    attributes.put("totp",new TotpBean(realm,user,baseUri));
  break;
case LOGIN_UPDATE_PROFILE:
attributes.put("user",new ProfileBean(user));
break;
case REGISTER:
attributes.put("register",new RegisterBean(formData));
break;
case OAUTH_GRANT:
attributes.put("oauth",new OAuthGrantBean(accessCode,client,realmRolesRequested,resourceRolesRequested));
break;
case CODE:
attributes.put(OAuth2Constants.CODE,new CodeBean(accessCode,messageType == MessageType.ERROR ? message : null));
break;
}
try {
String result=freeMarker.processTemplate(attributes,Templates.getTemplate(page),theme);
return Response.status(status).type(MediaType.TEXT_HTML).entity(result).build();
}
 catch (FreeMarkerException e) {
logger.error("Failed to process template",e);
return Response.serverError().build();
}
}
