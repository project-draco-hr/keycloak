{
  RealmModel realm=session.getContext().getRealm();
  ClientModel client=session.getContext().getClient();
  UriInfo uriInfo=session.getContext().getUri();
  MultivaluedMap<String,String> queryParameterMap=queryParams != null ? queryParams : new MultivaluedMapImpl<String,String>();
  String requestURI=uriInfo.getBaseUri().getPath();
  UriBuilder uriBuilder=UriBuilder.fromUri(requestURI);
  for (  String k : queryParameterMap.keySet()) {
    Object[] objects=queryParameterMap.get(k).toArray();
    if (objects.length == 1 && objects[0] == null)     continue;
    uriBuilder.replaceQueryParam(k,objects);
  }
  if (accessCode != null) {
    uriBuilder.replaceQueryParam(OAuth2Constants.CODE,accessCode);
  }
  ThemeProvider themeProvider=session.getProvider(ThemeProvider.class,"extending");
  Theme theme;
  try {
    theme=themeProvider.getTheme(realm.getLoginTheme(),Theme.Type.LOGIN);
  }
 catch (  IOException e) {
    logger.error("Failed to create theme",e);
    return Response.serverError().build();
  }
  try {
    attributes.put("properties",theme.getProperties());
  }
 catch (  IOException e) {
    logger.warn("Failed to load properties",e);
  }
  Properties messagesBundle;
  Locale locale=LocaleHelper.getLocale(realm,user,uriInfo,session.getContext().getRequestHeaders());
  try {
    messagesBundle=theme.getMessages(locale);
    attributes.put("msg",new MessageFormatterMethod(locale,messagesBundle));
  }
 catch (  IOException e) {
    logger.warn("Failed to load messages",e);
    messagesBundle=new Properties();
  }
  MessagesPerFieldBean messagesPerField=new MessagesPerFieldBean();
  if (messages != null) {
    MessageBean wholeMessage=new MessageBean(null,messageType);
    for (    FormMessage message : this.messages) {
      String formattedMessageText=formatMessage(message,messagesBundle,locale);
      if (formattedMessageText != null) {
        wholeMessage.appendSummaryLine(formattedMessageText);
        messagesPerField.addMessage(message.getField(),formattedMessageText,messageType);
      }
    }
    attributes.put("message",wholeMessage);
  }
  attributes.put("messagesPerField",messagesPerField);
  if (page == LoginFormsPages.OAUTH_GRANT) {
    uriBuilder.replaceQuery(null);
  }
  URI baseUri=uriBuilder.build();
  attributes.put("requiredActionUrl",new RequiredActionUrlFormatterMethod(realm,baseUri));
  if (realm != null && user != null && session != null) {
    attributes.put("authenticatorConfigured",new AuthenticatorConfiguredMethod(realm,user,session));
  }
  if (realm != null) {
    attributes.put("realm",new RealmBean(realm));
    attributes.put("social",new IdentityProviderBean(realm,baseUri,uriInfo));
    attributes.put("url",new UrlBean(realm,theme,baseUri,this.actionUri));
    if (realm.isInternationalizationEnabled()) {
      UriBuilder b;
switch (page) {
case LOGIN:
        b=UriBuilder.fromUri(Urls.realmLoginPage(baseUri,realm.getName()));
      break;
case REGISTER:
    b=UriBuilder.fromUri(Urls.realmRegisterPage(baseUri,realm.getName()));
  break;
default :
b=UriBuilder.fromUri(baseUri).path(uriInfo.getPath());
break;
}
attributes.put("locale",new LocaleBean(realm,locale,b,messagesBundle));
}
}
if (client != null) {
attributes.put("client",new ClientBean(client));
}
attributes.put("login",new LoginBean(formData));
switch (page) {
case LOGIN_CONFIG_TOTP:
attributes.put("totp",new TotpBean(realm,user,baseUri));
break;
case LOGIN_UPDATE_PROFILE:
attributes.put("user",new ProfileBean(user));
break;
case REGISTER:
attributes.put("register",new RegisterBean(formData));
break;
case OAUTH_GRANT:
attributes.put("oauth",new OAuthGrantBean(accessCode,clientSession,client,realmRolesRequested,resourceRolesRequested,protocolMappersRequested,this.accessRequestMessage));
attributes.put("advancedMsg",new AdvancedMessageFormatterMethod(locale,messagesBundle));
break;
case CODE:
attributes.put(OAuth2Constants.CODE,new CodeBean(accessCode,messageType == MessageType.ERROR ? getFirstMessageUnformatted() : null));
break;
}
if (status == null) {
status=Response.Status.OK;
}
try {
String result=freeMarker.processTemplate(attributes,Templates.getTemplate(page),theme);
Response.ResponseBuilder builder=Response.status(status).type(MediaType.TEXT_HTML).entity(result);
BrowserSecurityHeaderSetup.headers(builder,realm);
for (Map.Entry<String,String> entry : httpResponseHeaders.entrySet()) {
builder.header(entry.getKey(),entry.getValue());
}
LocaleHelper.updateLocaleCookie(builder,locale,realm,uriInfo,Urls.localeCookiePath(baseUri,realm.getName()));
return builder.build();
}
 catch (FreeMarkerException e) {
logger.error("Failed to process template",e);
return Response.serverError().build();
}
}
