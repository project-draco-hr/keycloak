{
  AccessTokenResponse tokenResponse=null;
  HttpClient client=new HttpClientBuilder().disableTrustManager().build();
  try {
    HttpPost post=new HttpPost(KeycloakUriBuilder.fromUri(deployment.getAuthServerBaseUrl()).path(ServiceUrlConstants.TOKEN_PATH).build(deployment.getRealm()));
    java.util.List<NameValuePair> formparams=new java.util.ArrayList<NameValuePair>();
    formparams.add(new BasicNameValuePair(OAuth2Constants.GRANT_TYPE,OAuth2Constants.PASSWORD));
    formparams.add(new BasicNameValuePair("username",username));
    formparams.add(new BasicNameValuePair("password",password));
    if (deployment.isPublicClient()) {
      formparams.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ID,deployment.getResourceName()));
    }
 else {
      String authorization=BasicAuthHelper.createHeader(deployment.getResourceName(),deployment.getResourceCredentials().get("secret"));
      post.setHeader("Authorization",authorization);
    }
    UrlEncodedFormEntity form=new UrlEncodedFormEntity(formparams,"UTF-8");
    post.setEntity(form);
    HttpResponse response=client.execute(post);
    int status=response.getStatusLine().getStatusCode();
    HttpEntity entity=response.getEntity();
    if (status != 200) {
      throw new java.io.IOException("Bad status: " + status);
    }
    if (entity == null) {
      throw new java.io.IOException("No Entity");
    }
    java.io.InputStream is=entity.getContent();
    try {
      tokenResponse=JsonSerialization.readValue(is,AccessTokenResponse.class);
    }
  finally {
      try {
        is.close();
      }
 catch (      java.io.IOException ignored) {
      }
    }
  }
  finally {
    client.getConnectionManager().shutdown();
  }
  return (tokenResponse);
}
