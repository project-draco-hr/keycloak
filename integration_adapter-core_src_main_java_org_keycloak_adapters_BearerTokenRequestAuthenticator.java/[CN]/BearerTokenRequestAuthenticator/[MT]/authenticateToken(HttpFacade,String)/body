{
  try {
    token=RSATokenVerifier.verifyToken(tokenString,deployment.getRealmKey(),deployment.getRealmInfoUrl());
  }
 catch (  VerificationException e) {
    log.error("Failed to verify token",e);
    challenge=challengeResponse(exchange,"invalid_token",e.getMessage());
    return AuthOutcome.FAILED;
  }
  if (token.getIssuedAt() < deployment.getNotBefore()) {
    log.error("Stale token");
    challenge=challengeResponse(exchange,"invalid_token","Stale token");
    return AuthOutcome.FAILED;
  }
  boolean verifyCaller=false;
  if (deployment.isUseResourceRoleMappings()) {
    verifyCaller=token.isVerifyCaller(deployment.getResourceName());
  }
 else {
    verifyCaller=token.isVerifyCaller();
  }
  surrogate=null;
  if (verifyCaller) {
    if (token.getTrustedCertificates() == null || token.getTrustedCertificates().size() == 0) {
      log.warn("No trusted certificates in token");
      challenge=clientCertChallenge();
      return AuthOutcome.FAILED;
    }
    X509Certificate[] chain=new X509Certificate[0];
    try {
      chain=exchange.getCertificateChain();
    }
 catch (    Exception ignore) {
    }
    if (chain == null || chain.length == 0) {
      log.warn("No certificates provided by undertow to verify the caller");
      challenge=clientCertChallenge();
      return AuthOutcome.FAILED;
    }
    surrogate=chain[0].getSubjectDN().getName();
  }
  return AuthOutcome.AUTHENTICATED;
}
