{
  X509HostnameVerifier verifier=null;
  if (this.verifier != null)   verifier=new VerifierWrapper(this.verifier);
 else {
switch (policy) {
case ANY:
      verifier=new AllowAllHostnameVerifier();
    break;
case WILDCARD:
  verifier=new BrowserCompatHostnameVerifier();
break;
case STRICT:
verifier=new StrictHostnameVerifier();
break;
}
}
try {
SSLSocketFactory sslsf=null;
SSLContext theContext=sslContext;
if (disableTrustManager) {
theContext=SSLContext.getInstance("SSL");
theContext.init(null,new TrustManager[]{new PassthroughTrustManager()},new SecureRandom());
verifier=new AllowAllHostnameVerifier();
sslsf=new SSLSocketFactory(theContext,verifier);
}
 else if (theContext != null) {
sslsf=new SSLSocketFactory(theContext,verifier);
}
 else if (clientKeyStore != null || truststore != null) {
sslsf=new SSLSocketFactory(SSLSocketFactory.TLS,clientKeyStore,clientPrivateKeyPassword,truststore,null,verifier);
}
 else {
final SSLContext tlsContext=SSLContext.getInstance(SSLSocketFactory.TLS);
tlsContext.init(null,null,null);
sslsf=new SSLSocketFactory(tlsContext,verifier);
}
SchemeRegistry registry=new SchemeRegistry();
registry.register(new Scheme("http",80,PlainSocketFactory.getSocketFactory()));
Scheme httpsScheme=new Scheme("https",443,sslsf);
registry.register(httpsScheme);
ClientConnectionManager cm=null;
if (connectionPoolSize > 0) {
ThreadSafeClientConnManager tcm=new ThreadSafeClientConnManager(registry,connectionTTL,connectionTTLUnit);
tcm.setMaxTotal(connectionPoolSize);
if (maxPooledPerRoute == 0) maxPooledPerRoute=connectionPoolSize;
tcm.setDefaultMaxPerRoute(maxPooledPerRoute);
cm=tcm;
}
 else {
cm=new SingleClientConnManager(registry);
}
BasicHttpParams params=new BasicHttpParams();
if (socketTimeout > -1) {
HttpConnectionParams.setSoTimeout(params,(int)socketTimeoutUnits.toMillis(socketTimeout));
}
if (establishConnectionTimeout > -1) {
HttpConnectionParams.setConnectionTimeout(params,(int)establishConnectionTimeoutUnits.toMillis(establishConnectionTimeout));
}
return new DefaultHttpClient(cm,params);
}
 catch (Exception e) {
throw new RuntimeException(e);
}
}
