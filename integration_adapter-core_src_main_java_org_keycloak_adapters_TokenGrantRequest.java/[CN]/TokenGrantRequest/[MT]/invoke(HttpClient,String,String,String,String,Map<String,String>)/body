{
  List<NameValuePair> formparams=new ArrayList<NameValuePair>();
  redirectUri=stripOauthParametersFromRedirect(redirectUri);
  String password=credentials.get("password");
  formparams.add(new BasicNameValuePair("grant_type","authorization_code"));
  formparams.add(new BasicNameValuePair("code",code));
  formparams.add(new BasicNameValuePair("client_id",client_id));
  formparams.add(new BasicNameValuePair(CredentialRepresentation.PASSWORD,password));
  formparams.add(new BasicNameValuePair("redirect_uri",redirectUri));
  HttpResponse response=null;
  UrlEncodedFormEntity form=new UrlEncodedFormEntity(formparams,"UTF-8");
  HttpPost post=new HttpPost(codeUrl);
  post.setEntity(form);
  response=client.execute(post);
  int status=response.getStatusLine().getStatusCode();
  HttpEntity entity=response.getEntity();
  if (status != 200) {
    error(status,entity);
  }
  if (entity == null) {
    throw new HttpFailure(status,null);
  }
  InputStream is=entity.getContent();
  try {
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    int c;
    while ((c=is.read()) != -1) {
      os.write(c);
    }
    byte[] bytes=os.toByteArray();
    String json=new String(bytes);
    try {
      return JsonSerialization.readValue(json,AccessTokenResponse.class);
    }
 catch (    IOException e) {
      throw new IOException(json,e);
    }
  }
  finally {
    try {
      is.close();
    }
 catch (    IOException ignored) {
    }
  }
}
