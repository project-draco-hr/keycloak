{
  String authHeader=request.getHeader("Authorization");
  if (authHeader == null) {
    if (challenge) {
      challengeResponse(response,null,null);
      return false;
    }
 else {
      return false;
    }
  }
  String[] split=authHeader.trim().split("\\s+");
  if (split == null || split.length != 2)   challengeResponse(response,null,null);
  if (!split[0].equalsIgnoreCase("Bearer"))   challengeResponse(response,null,null);
  tokenString=split[1];
  try {
    token=RSATokenVerifier.verifyToken(tokenString,resourceMetadata);
  }
 catch (  VerificationException e) {
    log.error("Failed to verify token",e);
    challengeResponse(response,"invalid_token",e.getMessage());
  }
  boolean verifyCaller=false;
  Set<String> roles=null;
  if (resourceMetadata.getResourceName() != null) {
    SkeletonKeyToken.Access access=token.getResourceAccess(resourceMetadata.getResourceName());
    if (access != null)     roles=access.getRoles();
    verifyCaller=token.isVerifyCaller(resourceMetadata.getResourceName());
  }
 else {
    verifyCaller=token.isVerifyCaller();
    SkeletonKeyToken.Access access=token.getRealmAccess();
    if (access != null)     roles=access.getRoles();
  }
  String surrogate=null;
  if (verifyCaller) {
    if (token.getTrustedCertificates() == null || token.getTrustedCertificates().size() == 0) {
      response.sendError(400);
      throw new LoginException("No trusted certificates in token");
    }
    X509Certificate[] chain=request.getCertificateChain();
    if (chain == null || chain.length == 0) {
      response.sendError(400);
      throw new LoginException("No certificates provided by jboss web to verify the caller");
    }
    surrogate=chain[0].getSubjectX500Principal().getName();
  }
  SkeletonKeyPrincipal skeletonKeyPrincipal=new SkeletonKeyPrincipal(token.getPrincipal(),surrogate);
  principal=new CatalinaSecurityContextHelper().createPrincipal(request.getContext().getRealm(),skeletonKeyPrincipal,roles);
  request.setUserPrincipal(principal);
  request.setAuthType("OAUTH_BEARER");
  if (propagateToken) {
    SkeletonKeySession skSession=new SkeletonKeySession(tokenString,resourceMetadata);
    request.setAttribute(SkeletonKeySession.class.getName(),skSession);
    ResteasyProviderFactory.pushContext(SkeletonKeySession.class,skSession);
  }
  return true;
}
