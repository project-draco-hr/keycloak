{
  try {
    processGlobalOptions();
    if (printHelp()) {
      return CommandResult.SUCCESS;
    }
    EndpointType regType=EndpointType.DEFAULT;
    PrintStream out=commandInvocation.getShell().out();
    if (endpoint != null) {
      regType=EndpointType.of(endpoint);
    }
    if (args != null) {
      if (args.size() > 1) {
        throw new RuntimeException("Invalid option: " + args.get(1));
      }
      attr=args.get(0);
    }
    Class type=regType == EndpointType.DEFAULT ? ClientRepresentation.class : (regType == EndpointType.OIDC ? OIDCClientRepresentation.class : null);
    if (type == null) {
      throw new RuntimeException("Endpoint not supported: " + regType);
    }
    AttributeKey key=attr == null ? new AttributeKey() : new AttributeKey(attr);
    Field f=ReflectionUtil.resolveField(type,key);
    String ts=f != null ? ReflectionUtil.getTypeString(null,f) : null;
    if (f == null) {
      out.printf("Attributes for %s format:\n",regType.getEndpoint());
      LinkedHashMap<String,String> items=getAttributeListWithJSonTypes(type,key);
      for (      Map.Entry<String,String> item : items.entrySet()) {
        out.printf("  %-40s %s\n",item.getKey(),item.getValue());
      }
    }
 else {
      out.printf("%-40s %s",attr,ts);
      boolean eol=false;
      Type t=f.getGenericType();
      if (isListType(f.getType()) && t instanceof ParameterizedType) {
        t=((ParameterizedType)t).getActualTypeArguments()[0];
        if (!isBasicType(t) && t instanceof Class) {
          eol=true;
          System.out.printf(", where value is:\n",ts);
          LinkedHashMap<String,String> items=ReflectionUtil.getAttributeListWithJSonTypes((Class)t,null);
          for (          Map.Entry<String,String> item : items.entrySet()) {
            out.printf("    %-36s %s\n",item.getKey(),item.getValue());
          }
        }
      }
 else       if (isMapType(f.getType()) && t instanceof ParameterizedType) {
        t=((ParameterizedType)t).getActualTypeArguments()[1];
        if (!isBasicType(t) && t instanceof Class) {
          eol=true;
          out.printf(", where value is:\n",ts);
          LinkedHashMap<String,String> items=ReflectionUtil.getAttributeListWithJSonTypes((Class)t,null);
          for (          Map.Entry<String,String> item : items.entrySet()) {
            out.printf("    %-36s %s\n",item.getKey(),item.getValue());
          }
        }
      }
      if (!eol) {
        out.println();
      }
    }
    return CommandResult.SUCCESS;
  }
  finally {
    commandInvocation.stop();
  }
}
