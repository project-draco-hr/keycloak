{
  StringWriter sb=new StringWriter();
  PrintWriter out=new PrintWriter(sb);
  out.println("Usage: " + CMD + " update CLIENT [ARGUMENTS]");
  out.println();
  out.println("Command to update an existing client configuration. If registration access token is specified it is used.");
  out.println("Otherwise, if 'registrationAccessToken' attribute is set, that is used. Otherwise, if registration access");
  out.println("token is available in configuration file, we use that. Finally, if it's not available anywhere, the current ");
  out.println("active session is used.");
  out.println();
  out.println("Arguments:");
  out.println();
  out.println("  Global options:");
  out.println("    -x                    Print full stack trace when exiting with error");
  out.println("    --config              Path to the config file (" + DEFAULT_CONFIG_FILE_STRING + " by default)");
  out.println("    --truststore PATH     Path to a truststore containing trusted certificates");
  out.println("    --trustpass PASSWORD  Truststore password (prompted for if not specified and --truststore is used)");
  out.println("    --token TOKEN         Registration access token to use");
  out.println("    CREDENTIALS OPTIONS   Same set of options as accepted by '" + CMD + " config credentials' in order to establish");
  out.println("                          an authenticated sessions. This allows on-the-fly transient authentication that does");
  out.println("                          not touch a config file.");
  out.println();
  out.println("  Command specific options:");
  out.println("    CLIENT                ClientId of the client to update");
  out.println("    -s, --set KEY=VALUE   Set specific attribute to a specified value");
  out.println("              KEY+=VALUE  Add item to an array");
  out.println("    -d, --delete NAME     Delete the specific attribute, or array item");
  out.println("    -e, --endpoint TYPE   Endpoint type to use - one of: 'default', 'oidc'");
  out.println("    -f, --file FILENAME   Use the file or standard input if '-' is specified");
  out.println("    -m, --merge           Merge new values with existing configuration on the server");
  out.println("                          Merge is automatically enabled unless --file is specified");
  out.println("    -u, --unsafe          Allow updating without registration access token - no optimistic locking");
  out.println("    -o, --output          After update output the new client configuration");
  out.println("    -c, --compressed      Don't pretty print the output");
  out.println();
  out.println();
  out.println("Nested attributes are supported by using '.' to separate components of a KEY. Optionaly, the KEY components ");
  out.println("can be quoted with double quotes - e.g. my_client.attributes.\"external.user.id\". If VALUE starts with [ and ");
  out.println("ends with ] the attribute will be set as a JSON array. If VALUE starts with { and ends with } the attribute ");
  out.println("will be set as a JSON object. If KEY ends with an array index - e.g. clients[3]=VALUE - then the specified item");
  out.println("of the array is updated. If KEY+=VALUE syntax is used, then KEY is assumed to be an array, and another item is");
  out.println("added to it.");
  out.println();
  out.println("Attributes can also be deleted. If KEY ends with an array index, then the targeted item of an array is removed");
  out.println("and the following items are shifted.");
  out.println();
  out.println("Merged mode fetches current configuration from the server, applies attribute changes to it, and sends it");
  out.println("back to the server, overwriting existing configuration there. To ensure there are no unexpected changes");
  out.println("Registration Access Token is used for authorization when doing changes. Alternatively, one can specify to use");
  out.println("unsafe mode in which case login session's authorization is used - user requires manage-clients permission.");
  out.println();
  out.println();
  out.println("Examples:");
  out.println();
  out.println("Update a client by fetching current configuration from server, and applying specified changes.");
  out.println("  " + PROMPT + " "+ CMD+ " update my_client -s enabled=true -s 'redirectUris=[\"http://localhost:8080/myapp/*\"]'");
  out.println();
  out.println("Update a client by overwriting existing configuration on the server with a new one:");
  out.println("  " + PROMPT + " "+ CMD+ " update my_client -f new_my_client.json");
  out.println();
  out.println("Update a client by overwriting existing configuration using local file as a template:");
  out.println("  " + PROMPT + " "+ CMD+ " update my_client -f new_my_client.json -s enabled=true");
  out.println();
  out.println("Update client by fetching current configuration from server and merging with specified changes:");
  out.println("  " + PROMPT + " "+ CMD+ " update my_client -f new_my_client.json -s enabled=true --merge");
  out.println();
  out.println("Update a client using 'oidc' endpoint:");
  out.println("  " + PROMPT + " "+ CMD+ " update my_client -e oidc -s 'redirect_uris=[\"http://localhost:8080/myapp/*\"]'");
  out.println();
  out.println();
  out.println("Use '" + CMD + " help' for general information and a list of commands");
  return sb.toString();
}
