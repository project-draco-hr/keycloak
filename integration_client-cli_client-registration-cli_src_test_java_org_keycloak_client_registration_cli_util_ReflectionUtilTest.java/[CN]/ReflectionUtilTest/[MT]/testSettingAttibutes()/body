{
  Data data=new Data();
  LinkedList<AttributeOperation> attrs=new LinkedList<>();
  attrs.add(new AttributeOperation(SET,"longAttr","42"));
  attrs.add(new AttributeOperation(SET,"strAttr","not null"));
  attrs.add(new AttributeOperation(SET,"strList+","two"));
  attrs.add(new AttributeOperation(SET,"strList+","three"));
  attrs.add(new AttributeOperation(SET,"strList[0]+","one"));
  attrs.add(new AttributeOperation(SET,"config","{\"key1\": \"value1\"}"));
  attrs.add(new AttributeOperation(SET,"config.key2","value2"));
  attrs.add(new AttributeOperation(SET,"nestedConfig","{\"key1\": {\"sub key1\": \"sub value1\"}}"));
  attrs.add(new AttributeOperation(SET,"nestedConfig.key1.\"sub key2\"","sub value2"));
  attrs.add(new AttributeOperation(SET,"nested.strList","[1,2,3,4]"));
  attrs.add(new AttributeOperation(SET,"nested.dataList+","{\"baseAttr\": \"item1\", \"strList\": [\"confidential\", \"public\"]}"));
  attrs.add(new AttributeOperation(SET,"nested.dataList+","{\"baseAttr\": \"item2\", \"strList\": [\"external\"]}"));
  attrs.add(new AttributeOperation(SET,"nested.dataList[1].baseAttr","changed item2"));
  attrs.add(new AttributeOperation(SET,"nested.nested.strList","[\"first\",\"second\"]"));
  attrs.add(new AttributeOperation(DELETE,"nested.strList[1]"));
  attrs.add(new AttributeOperation(SET,"nested.nested.nested","{\"baseAttr\": \"NEW VALUE\", \"strList\": [true, false]}"));
  attrs.add(new AttributeOperation(SET,"nested.strAttr","NOT NULL"));
  attrs.add(new AttributeOperation(DELETE,"nested.strAttr"));
  ReflectionUtil.setAttributes(data,attrs);
  Assert.assertEquals("longAttr",Long.valueOf(42),data.getLongAttr());
  Assert.assertEquals("strAttr","not null",data.getStrAttr());
  Assert.assertEquals("strList",Arrays.asList("one","two","three"),data.getStrList());
  Map<String,String> expectedMap=new HashMap<>();
  expectedMap.put("key1","value1");
  expectedMap.put("key2","value2");
  Assert.assertEquals("config",expectedMap,data.getConfig());
  expectedMap=new HashMap<>();
  expectedMap.put("sub key1","sub value1");
  expectedMap.put("sub key2","sub value2");
  Assert.assertNotNull("nestedConfig",data.getNestedConfig());
  Assert.assertEquals("nestedConfig has one element",1,data.getNestedConfig().size());
  Assert.assertEquals("nestedConfig.key1",expectedMap,data.getNestedConfig().get("key1"));
  Data nested=data.getNested();
  Assert.assertEquals("nested.strAttr",null,nested.getStrAttr());
  Assert.assertEquals("nested.strList",Arrays.asList("1","3","4"),nested.getStrList());
  Assert.assertEquals("nested.dataList[0].baseAttr","item1",nested.getDataList().get(0).getBaseAttr());
  Assert.assertEquals("nested.dataList[0].strList",Arrays.asList("confidential","public"),nested.getDataList().get(0).getStrList());
  Assert.assertEquals("nested.dataList[1].baseAttr","changed item2",nested.getDataList().get(1).getBaseAttr());
  Assert.assertEquals("nested.dataList[1].strList",Arrays.asList("external"),nested.getDataList().get(1).getStrList());
  nested=nested.getNested();
  Assert.assertEquals("nested.nested.strList",Arrays.asList("first","second"),nested.getStrList());
  nested=nested.getNested();
  Assert.assertEquals("nested.nested.nested.baseAttr","NEW VALUE",nested.getBaseAttr());
  Assert.assertEquals("nested.nested.nested.strList",Arrays.asList("true","false"),nested.getStrList());
}
