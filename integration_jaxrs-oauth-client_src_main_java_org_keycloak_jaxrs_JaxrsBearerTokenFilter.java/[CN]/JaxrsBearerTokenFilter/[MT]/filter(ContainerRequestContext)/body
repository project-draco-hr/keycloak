{
  String authHeader=request.getHeaderString(HttpHeaders.AUTHORIZATION);
  if (authHeader == null) {
    challengeResponse(request,null,null);
    return;
  }
  String[] split=authHeader.trim().split("\\s+");
  if (split == null || split.length != 2)   challengeResponse(request,null,null);
  if (!split[0].equalsIgnoreCase("Bearer"))   challengeResponse(request,null,null);
  String tokenString=split[1];
  try {
    AccessToken token=RSATokenVerifier.verifyToken(tokenString,realmPublicKey,realm);
    KeycloakSecurityContext skSession=new KeycloakSecurityContext(tokenString,token,null,null);
    ResteasyProviderFactory.pushContext(KeycloakSecurityContext.class,skSession);
    final KeycloakPrincipal principal=new KeycloakPrincipal(token.getSubject(),skSession);
    final boolean isSecure=securityContext.isSecure();
    final AccessToken.Access access;
    if (resourceName != null) {
      access=token.getResourceAccess(resourceName);
    }
 else {
      access=token.getRealmAccess();
    }
    SecurityContext ctx=new SecurityContext(){
      @Override public Principal getUserPrincipal(){
        return principal;
      }
      @Override public boolean isUserInRole(      String role){
        if (access.getRoles() == null)         return false;
        return access.getRoles().contains(role);
      }
      @Override public boolean isSecure(){
        return isSecure;
      }
      @Override public String getAuthenticationScheme(){
        return "OAUTH_BEARER";
      }
    }
;
    request.setSecurityContext(ctx);
  }
 catch (  VerificationException e) {
    log.error("Failed to verify token",e);
    challengeResponse(request,"invalid_token",e.getMessage());
  }
}
