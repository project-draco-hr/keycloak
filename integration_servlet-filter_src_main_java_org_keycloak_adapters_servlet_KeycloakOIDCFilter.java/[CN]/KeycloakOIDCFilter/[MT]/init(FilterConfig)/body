{
  String configResolverClass=filterConfig.getInitParameter("keycloak.config.resolver");
  if (configResolverClass != null) {
    try {
      KeycloakConfigResolver configResolver=(KeycloakConfigResolver)getClass().getClassLoader().loadClass(configResolverClass).newInstance();
      deploymentContext=new AdapterDeploymentContext(configResolver);
      log.log(Level.INFO,"Using {0} to resolve Keycloak configuration on a per-request basis.",configResolverClass);
    }
 catch (    Exception ex) {
      log.log(Level.FINE,"The specified resolver {0} could NOT be loaded. Keycloak is unconfigured and will deny all requests. Reason: {1}",new Object[]{configResolverClass,ex.getMessage()});
      deploymentContext=new AdapterDeploymentContext(new KeycloakDeployment());
    }
  }
 else {
    String fp=filterConfig.getInitParameter("keycloak.config.file");
    InputStream is=null;
    if (fp != null) {
      try {
        is=new FileInputStream(fp);
      }
 catch (      FileNotFoundException e) {
        throw new RuntimeException(e);
      }
    }
 else {
      String path="/WEB-INF/keycloak.json";
      String pathParam=filterConfig.getInitParameter("keycloak.config.path");
      if (pathParam != null)       path=pathParam;
      is=filterConfig.getServletContext().getResourceAsStream(path);
    }
    KeycloakDeployment kd;
    if (is == null) {
      log.fine("No adapter configuration. Keycloak is unconfigured and will deny all requests.");
      kd=new KeycloakDeployment();
    }
 else {
      kd=KeycloakDeploymentBuilder.build(is);
    }
    deploymentContext=new AdapterDeploymentContext(kd);
    log.fine("Keycloak is using a per-deployment configuration.");
  }
  filterConfig.getServletContext().setAttribute(AdapterDeploymentContext.class.getName(),deploymentContext);
  nodesRegistrationManagement=new NodesRegistrationManagement();
}
