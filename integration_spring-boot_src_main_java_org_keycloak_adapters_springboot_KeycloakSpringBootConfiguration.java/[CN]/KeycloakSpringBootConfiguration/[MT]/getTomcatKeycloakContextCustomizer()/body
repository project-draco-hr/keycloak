{
  return new TomcatContextCustomizer(){
    @Override public void customize(    Context context){
      LoginConfig loginConfig=new LoginConfig();
      loginConfig.setAuthMethod("KEYCLOAK");
      context.setLoginConfig(loginConfig);
      Set<String> authRoles=new HashSet<String>();
      for (      KeycloakSpringBootProperties.SecurityConstraint constraint : keycloakProperties.getSecurityConstraints()) {
        for (        KeycloakSpringBootProperties.SecurityCollection collection : constraint.getSecurityCollections()) {
          for (          String authRole : collection.getAuthRoles()) {
            if (!authRoles.contains(authRole)) {
              context.addSecurityRole(authRole);
              authRoles.add(authRole);
            }
          }
        }
      }
      for (      KeycloakSpringBootProperties.SecurityConstraint constraint : keycloakProperties.getSecurityConstraints()) {
        SecurityConstraint tomcatConstraint=new SecurityConstraint();
        for (        KeycloakSpringBootProperties.SecurityCollection collection : constraint.getSecurityCollections()) {
          SecurityCollection tomcatSecCollection=new SecurityCollection();
          if (collection.getName() != null) {
            tomcatSecCollection.setName(collection.getName());
          }
          if (collection.getDescription() != null) {
            tomcatSecCollection.setDescription(collection.getDescription());
          }
          for (          String authRole : collection.getAuthRoles()) {
            tomcatConstraint.addAuthRole(authRole);
          }
          for (          String pattern : collection.getPatterns()) {
            tomcatSecCollection.addPattern(pattern);
          }
          for (          String method : collection.getMethods()) {
            tomcatSecCollection.addMethod(method);
          }
          for (          String method : collection.getOmittedMethods()) {
            tomcatSecCollection.addOmittedMethod(method);
          }
          tomcatConstraint.addCollection(tomcatSecCollection);
        }
        context.addConstraint(tomcatConstraint);
      }
      context.addParameter("keycloak.config.resolver",KeycloakSpringBootConfigResolver.class.getName());
    }
  }
;
}
