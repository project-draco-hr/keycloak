{
  String configResolverClass=(String)context.getServletContext().getAttribute("keycloak.config.resolver");
  if (configResolverClass != null) {
    try {
      KeycloakConfigResolver configResolver=(KeycloakConfigResolver)context.getLoader().getClassLoader().loadClass(configResolverClass).newInstance();
      deploymentContext=new AdapterDeploymentContext(configResolver);
      log.log(Level.INFO,"Using {0} to resolve Keycloak configuration on a per-request basis.",configResolverClass);
    }
 catch (    Exception ex) {
      log.log(Level.FINE,"The specified resolver {0} could NOT be loaded. Keycloak is unconfigured and will deny all requests. Reason: {1}",new Object[]{configResolverClass,ex.getMessage()});
      deploymentContext=new AdapterDeploymentContext(new KeycloakDeployment());
    }
  }
 else {
    InputStream configInputStream=getConfigInputStream(context);
    KeycloakDeployment kd;
    if (configInputStream == null) {
      log.fine("No adapter configuration. Keycloak is unconfigured and will deny all requests.");
      kd=new KeycloakDeployment();
    }
 else {
      kd=KeycloakDeploymentBuilder.build(configInputStream);
    }
    deploymentContext=new AdapterDeploymentContext(kd);
    log.fine("Keycloak is using a per-deployment configuration.");
  }
  context.getServletContext().setAttribute(AdapterDeploymentContext.class.getName(),deploymentContext);
  AuthenticatedActionsValve actions=new AuthenticatedActionsValve(deploymentContext,getNext(),getContainer());
  setNext(actions);
  nodesRegistrationManagement=new NodesRegistrationManagement();
}
