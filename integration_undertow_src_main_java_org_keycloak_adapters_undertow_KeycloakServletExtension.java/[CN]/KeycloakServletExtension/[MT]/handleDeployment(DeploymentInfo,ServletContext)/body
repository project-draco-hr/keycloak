{
  if (!isAuthenticationMechanismPresent(deploymentInfo,"KEYCLOAK")) {
    log.debug("auth-method is not keycloak!");
    return;
  }
  log.debug("KeycloakServletException initialization");
  InputStream is=getConfigInputStream(servletContext);
  KeycloakDeployment deployment=null;
  if (is == null) {
    log.warn("No adapter configuration.  Keycloak is unconfigured and will deny all requests.");
    deployment=new KeycloakDeployment();
  }
 else {
    deployment=KeycloakDeploymentBuilder.build(is);
  }
  AdapterDeploymentContext deploymentContext=new AdapterDeploymentContext(deployment);
  servletContext.setAttribute(AdapterDeploymentContext.class.getName(),deploymentContext);
  UndertowUserSessionManagement userSessionManagement=new UndertowUserSessionManagement();
  final ServletKeycloakAuthMech mech=createAuthenticationMechanism(deploymentInfo,deploymentContext,userSessionManagement);
  UndertowAuthenticatedActionsHandler.Wrapper actions=new UndertowAuthenticatedActionsHandler.Wrapper(deploymentContext);
  deploymentInfo.addOuterHandlerChainWrapper(new ServletPreAuthActionsHandler.Wrapper(deploymentContext,userSessionManagement));
  deploymentInfo.addAuthenticationMechanism("KEYCLOAK",new AuthenticationMechanismFactory(){
    @Override public AuthenticationMechanism create(    String s,    FormParserFactory formParserFactory,    Map<String,String> stringStringMap){
      return mech;
    }
  }
);
  deploymentInfo.addInnerHandlerChainWrapper(actions);
  deploymentInfo.setIdentityManager(new IdentityManager(){
    @Override public Account verify(    Account account){
      return account;
    }
    @Override public Account verify(    String id,    Credential credential){
      throw new IllegalStateException("Should never be called in Keycloak flow");
    }
    @Override public Account verify(    Credential credential){
      throw new IllegalStateException("Should never be called in Keycloak flow");
    }
  }
);
  log.debug("Setting jsession cookie path to: " + deploymentInfo.getContextPath());
  ServletSessionConfig cookieConfig=new ServletSessionConfig();
  cookieConfig.setPath(deploymentInfo.getContextPath());
  deploymentInfo.setServletSessionConfig(cookieConfig);
}
