{
  if (!isAuthenticationMechanismPresent(deploymentInfo,"KEYCLOAK")) {
    log.info("auth-method is not keycloak!");
    return;
  }
  log.info("KeycloakServletException initialization");
  InputStream is=getJSONFromServletContext(servletContext);
  if (is == null) {
    is=servletContext.getResourceAsStream("/WEB-INF/keycloak.json");
  }
  if (is == null)   throw new RuntimeException("Unable to find realm config in /WEB-INF/keycloak.json or in keycloak subsystem.");
  KeycloakDeployment deployment=KeycloakDeploymentBuilder.build(is);
  UndertowUserSessionManagement userSessionManagement=new UndertowUserSessionManagement(deployment);
  final ServletKeycloakAuthMech mech=new ServletKeycloakAuthMech(deployment,userSessionManagement,deploymentInfo.getConfidentialPortManager());
  UndertowAuthenticatedActionsHandler.Wrapper actions=new UndertowAuthenticatedActionsHandler.Wrapper(deployment);
  deploymentInfo.addOuterHandlerChainWrapper(new ServletPreAuthActionsHandler.Wrapper(deployment,userSessionManagement));
  deploymentInfo.addAuthenticationMechanism("KEYCLOAK",new AuthenticationMechanismFactory(){
    @Override public AuthenticationMechanism create(    String s,    FormParserFactory formParserFactory,    Map<String,String> stringStringMap){
      return mech;
    }
  }
);
  deploymentInfo.addInnerHandlerChainWrapper(actions);
  deploymentInfo.setIdentityManager(new IdentityManager(){
    @Override public Account verify(    Account account){
      return account;
    }
    @Override public Account verify(    String id,    Credential credential){
      throw new IllegalStateException("Should never be called in Keycloak flow");
    }
    @Override public Account verify(    Credential credential){
      throw new IllegalStateException("Should never be called in Keycloak flow");
    }
  }
);
  log.info("Setting jsession cookie path to: " + deploymentInfo.getContextPath());
  ServletSessionConfig cookieConfig=new ServletSessionConfig();
  cookieConfig.setPath(deploymentInfo.getContextPath());
  deploymentInfo.setServletSessionConfig(cookieConfig);
}
