{
  List<Policy> list=new LinkedList<Policy>();
  String[] policies=policyString.split(" and ");
  for (  String policy : policies) {
    policy=policy.trim();
    String name;
    String arg=null;
    int i=policy.indexOf('(');
    if (i == -1) {
      name=policy.trim();
    }
 else {
      name=policy.substring(0,i).trim();
      arg=policy.substring(i + 1,policy.length() - 1);
    }
    if (name.equals(Length.NAME)) {
      list.add(new Length(arg));
    }
 else     if (name.equals(Digits.NAME)) {
      list.add(new Digits(arg));
    }
 else     if (name.equals(LowerCase.NAME)) {
      list.add(new LowerCase(arg));
    }
 else     if (name.equals(UpperCase.NAME)) {
      list.add(new UpperCase(arg));
    }
 else     if (name.equals(SpecialChars.NAME)) {
      list.add(new SpecialChars(arg));
    }
 else     if (name.equals(NotUsername.NAME)) {
      list.add(new NotUsername(arg));
    }
 else     if (name.equals(HashAlgorithm.NAME)) {
      list.add(new HashAlgorithm(arg));
    }
 else     if (name.equals(HashIterations.NAME)) {
      list.add(new HashIterations(arg));
    }
 else     if (name.equals(RegexPatterns.NAME)) {
      Pattern.compile(arg);
      list.add(new RegexPatterns(arg));
    }
 else     if (name.equals(PasswordHistory.NAME)) {
      list.add(new PasswordHistory(arg));
    }
 else     if (name.equals(ForceExpiredPasswordChange.NAME)) {
      list.add(new ForceExpiredPasswordChange(arg));
    }
 else {
      throw new IllegalArgumentException("Unsupported policy");
    }
  }
  return list;
}
