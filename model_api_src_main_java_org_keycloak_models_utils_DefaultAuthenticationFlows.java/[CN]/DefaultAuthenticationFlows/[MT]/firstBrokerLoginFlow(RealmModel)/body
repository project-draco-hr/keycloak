{
  AuthenticationFlowModel firstBrokerLogin=new AuthenticationFlowModel();
  firstBrokerLogin.setAlias(FIRST_BROKER_LOGIN_FLOW);
  firstBrokerLogin.setDescription("Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account");
  firstBrokerLogin.setProviderId("basic-flow");
  firstBrokerLogin.setTopLevel(true);
  firstBrokerLogin.setBuiltIn(true);
  firstBrokerLogin=realm.addAuthenticationFlow(firstBrokerLogin);
  AuthenticatorConfigModel reviewProfileConfig=new AuthenticatorConfigModel();
  reviewProfileConfig.setAlias(IDP_REVIEW_PROFILE_CONFIG_ALIAS);
  Map<String,String> config=new HashMap<>();
  config.put("update.profile.on.first.login",IdentityProviderRepresentation.UPFLM_MISSING);
  reviewProfileConfig.setConfig(config);
  reviewProfileConfig=realm.addAuthenticatorConfig(reviewProfileConfig);
  AuthenticationExecutionModel execution=new AuthenticationExecutionModel();
  execution.setParentFlow(firstBrokerLogin.getId());
  execution.setRequirement(AuthenticationExecutionModel.Requirement.REQUIRED);
  execution.setAuthenticator("idp-review-profile");
  execution.setPriority(10);
  execution.setAuthenticatorFlow(false);
  execution.setAuthenticatorConfig(reviewProfileConfig.getId());
  realm.addAuthenticatorExecution(execution);
  AuthenticatorConfigModel createUserIfUniqueConfig=new AuthenticatorConfigModel();
  createUserIfUniqueConfig.setAlias("create unique user config");
  config=new HashMap<>();
  config.put("require.password.update.after.registration","false");
  createUserIfUniqueConfig.setConfig(config);
  createUserIfUniqueConfig=realm.addAuthenticatorConfig(createUserIfUniqueConfig);
  execution=new AuthenticationExecutionModel();
  execution.setParentFlow(firstBrokerLogin.getId());
  execution.setRequirement(AuthenticationExecutionModel.Requirement.ALTERNATIVE);
  execution.setAuthenticator("idp-create-user-if-unique");
  execution.setPriority(20);
  execution.setAuthenticatorFlow(false);
  execution.setAuthenticatorConfig(createUserIfUniqueConfig.getId());
  realm.addAuthenticatorExecution(execution);
  AuthenticationFlowModel linkExistingAccountFlow=new AuthenticationFlowModel();
  linkExistingAccountFlow.setTopLevel(false);
  linkExistingAccountFlow.setBuiltIn(true);
  linkExistingAccountFlow.setAlias("Handle Existing Account");
  linkExistingAccountFlow.setDescription("Handle what to do if there is existing account with same email/username like authenticated identity provider");
  linkExistingAccountFlow.setProviderId("basic-flow");
  linkExistingAccountFlow=realm.addAuthenticationFlow(linkExistingAccountFlow);
  execution=new AuthenticationExecutionModel();
  execution.setParentFlow(firstBrokerLogin.getId());
  execution.setRequirement(AuthenticationExecutionModel.Requirement.ALTERNATIVE);
  execution.setFlowId(linkExistingAccountFlow.getId());
  execution.setPriority(30);
  execution.setAuthenticatorFlow(true);
  realm.addAuthenticatorExecution(execution);
  execution=new AuthenticationExecutionModel();
  execution.setParentFlow(linkExistingAccountFlow.getId());
  execution.setRequirement(AuthenticationExecutionModel.Requirement.REQUIRED);
  execution.setAuthenticator("idp-confirm-link");
  execution.setPriority(10);
  execution.setAuthenticatorFlow(false);
  realm.addAuthenticatorExecution(execution);
  execution=new AuthenticationExecutionModel();
  execution.setParentFlow(linkExistingAccountFlow.getId());
  execution.setRequirement(AuthenticationExecutionModel.Requirement.ALTERNATIVE);
  execution.setAuthenticator("idp-email-verification");
  execution.setPriority(20);
  execution.setAuthenticatorFlow(false);
  realm.addAuthenticatorExecution(execution);
  AuthenticationFlowModel verifyByReauthenticationAccountFlow=new AuthenticationFlowModel();
  verifyByReauthenticationAccountFlow.setTopLevel(false);
  verifyByReauthenticationAccountFlow.setBuiltIn(true);
  verifyByReauthenticationAccountFlow.setAlias("Verify Existing Account by Re-authentication");
  verifyByReauthenticationAccountFlow.setDescription("Reauthentication of existing account");
  verifyByReauthenticationAccountFlow.setProviderId("basic-flow");
  verifyByReauthenticationAccountFlow=realm.addAuthenticationFlow(verifyByReauthenticationAccountFlow);
  execution=new AuthenticationExecutionModel();
  execution.setParentFlow(linkExistingAccountFlow.getId());
  execution.setRequirement(AuthenticationExecutionModel.Requirement.ALTERNATIVE);
  execution.setFlowId(verifyByReauthenticationAccountFlow.getId());
  execution.setPriority(30);
  execution.setAuthenticatorFlow(true);
  realm.addAuthenticatorExecution(execution);
  execution=new AuthenticationExecutionModel();
  execution.setParentFlow(verifyByReauthenticationAccountFlow.getId());
  execution.setRequirement(AuthenticationExecutionModel.Requirement.REQUIRED);
  execution.setAuthenticator("idp-username-password-form");
  execution.setPriority(10);
  execution.setAuthenticatorFlow(false);
  realm.addAuthenticatorExecution(execution);
  execution=new AuthenticationExecutionModel();
  execution.setParentFlow(verifyByReauthenticationAccountFlow.getId());
  execution.setRequirement(AuthenticationExecutionModel.Requirement.OPTIONAL);
  execution.setAuthenticator("auth-otp-form");
  execution.setPriority(20);
  execution.setAuthenticatorFlow(false);
  realm.addAuthenticatorExecution(execution);
}
