{
  ClientRepresentation rep=new ClientRepresentation();
  rep.setId(clientModel.getId());
  rep.setClientId(clientModel.getClientId());
  rep.setName(clientModel.getName());
  rep.setDescription(clientModel.getDescription());
  rep.setEnabled(clientModel.isEnabled());
  rep.setAdminUrl(clientModel.getManagementUrl());
  rep.setPublicClient(clientModel.isPublicClient());
  rep.setFrontchannelLogout(clientModel.isFrontchannelLogout());
  rep.setProtocol(clientModel.getProtocol());
  rep.setAttributes(clientModel.getAttributes());
  rep.setFullScopeAllowed(clientModel.isFullScopeAllowed());
  rep.setBearerOnly(clientModel.isBearerOnly());
  rep.setConsentRequired(clientModel.isConsentRequired());
  rep.setStandardFlowEnabled(clientModel.isStandardFlowEnabled());
  rep.setImplicitFlowEnabled(clientModel.isImplicitFlowEnabled());
  rep.setDirectAccessGrantsEnabled(clientModel.isDirectAccessGrantsEnabled());
  rep.setServiceAccountsEnabled(clientModel.isServiceAccountsEnabled());
  rep.setSurrogateAuthRequired(clientModel.isSurrogateAuthRequired());
  rep.setRootUrl(clientModel.getRootUrl());
  rep.setBaseUrl(clientModel.getBaseUrl());
  rep.setNotBefore(clientModel.getNotBefore());
  rep.setNodeReRegistrationTimeout(clientModel.getNodeReRegistrationTimeout());
  rep.setClientAuthenticatorType(clientModel.getClientAuthenticatorType());
  Set<String> redirectUris=clientModel.getRedirectUris();
  if (redirectUris != null) {
    rep.setRedirectUris(new LinkedList<>(redirectUris));
  }
  Set<String> webOrigins=clientModel.getWebOrigins();
  if (webOrigins != null) {
    rep.setWebOrigins(new LinkedList<>(webOrigins));
  }
  if (!clientModel.getDefaultRoles().isEmpty()) {
    rep.setDefaultRoles(clientModel.getDefaultRoles().toArray(new String[0]));
  }
  if (!clientModel.getRegisteredNodes().isEmpty()) {
    rep.setRegisteredNodes(new HashMap<>(clientModel.getRegisteredNodes()));
  }
  if (!clientModel.getProtocolMappers().isEmpty()) {
    List<ProtocolMapperRepresentation> mappings=new LinkedList<>();
    for (    ProtocolMapperModel model : clientModel.getProtocolMappers()) {
      mappings.add(toRepresentation(model));
    }
    rep.setProtocolMappers(mappings);
  }
  return rep;
}
