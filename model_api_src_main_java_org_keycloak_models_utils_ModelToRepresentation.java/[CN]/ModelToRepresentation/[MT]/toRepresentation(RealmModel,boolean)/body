{
  RealmRepresentation rep=new RealmRepresentation();
  rep.setId(realm.getId());
  rep.setRealm(realm.getName());
  rep.setEnabled(realm.isEnabled());
  rep.setNotBefore(realm.getNotBefore());
  rep.setSslRequired(realm.getSslRequired().name().toLowerCase());
  rep.setPublicKey(realm.getPublicKeyPem());
  if (internal) {
    rep.setPrivateKey(realm.getPrivateKeyPem());
    String privateKeyPem=realm.getPrivateKeyPem();
    if (realm.getCertificatePem() == null && privateKeyPem != null) {
      KeycloakModelUtils.generateRealmCertificate(realm);
    }
    rep.setCodeSecret(realm.getCodeSecret());
  }
  rep.setCertificate(realm.getCertificatePem());
  rep.setRegistrationAllowed(realm.isRegistrationAllowed());
  rep.setRegistrationEmailAsUsername(realm.isRegistrationEmailAsUsername());
  rep.setRememberMe(realm.isRememberMe());
  rep.setBruteForceProtected(realm.isBruteForceProtected());
  rep.setMaxFailureWaitSeconds(realm.getMaxFailureWaitSeconds());
  rep.setMinimumQuickLoginWaitSeconds(realm.getMinimumQuickLoginWaitSeconds());
  rep.setWaitIncrementSeconds(realm.getWaitIncrementSeconds());
  rep.setQuickLoginCheckMilliSeconds(realm.getQuickLoginCheckMilliSeconds());
  rep.setMaxDeltaTimeSeconds(realm.getMaxDeltaTimeSeconds());
  rep.setFailureFactor(realm.getFailureFactor());
  rep.setEventsEnabled(realm.isEventsEnabled());
  if (realm.getEventsExpiration() != 0) {
    rep.setEventsExpiration(realm.getEventsExpiration());
  }
  if (realm.getEventsListeners() != null) {
    rep.setEventsListeners(new LinkedList<String>(realm.getEventsListeners()));
  }
  if (realm.getEnabledEventTypes() != null) {
    rep.setEnabledEventTypes(new LinkedList<String>(realm.getEnabledEventTypes()));
  }
  rep.setAdminEventsEnabled(realm.isAdminEventsEnabled());
  rep.setAdminEventsDetailsEnabled(realm.isAdminEventsDetailsEnabled());
  rep.setVerifyEmail(realm.isVerifyEmail());
  rep.setResetPasswordAllowed(realm.isResetPasswordAllowed());
  rep.setEditUsernameAllowed(realm.isEditUsernameAllowed());
  rep.setAccessTokenLifespan(realm.getAccessTokenLifespan());
  rep.setSsoSessionIdleTimeout(realm.getSsoSessionIdleTimeout());
  rep.setSsoSessionMaxLifespan(realm.getSsoSessionMaxLifespan());
  rep.setAccessCodeLifespan(realm.getAccessCodeLifespan());
  rep.setAccessCodeLifespanUserAction(realm.getAccessCodeLifespanUserAction());
  rep.setAccessCodeLifespanLogin(realm.getAccessCodeLifespanLogin());
  rep.setSmtpServer(realm.getSmtpConfig());
  rep.setBrowserSecurityHeaders(realm.getBrowserSecurityHeaders());
  rep.setAccountTheme(realm.getAccountTheme());
  rep.setLoginTheme(realm.getLoginTheme());
  rep.setAdminTheme(realm.getAdminTheme());
  rep.setEmailTheme(realm.getEmailTheme());
  if (realm.getPasswordPolicy() != null) {
    rep.setPasswordPolicy(realm.getPasswordPolicy().toString());
  }
  OTPPolicy otpPolicy=realm.getOTPPolicy();
  rep.setOtpPolicyAlgorithm(otpPolicy.getAlgorithm());
  rep.setOtpPolicyPeriod(otpPolicy.getPeriod());
  rep.setOtpPolicyDigits(otpPolicy.getDigits());
  rep.setOtpPolicyInitialCounter(otpPolicy.getInitialCounter());
  rep.setOtpPolicyType(otpPolicy.getType());
  rep.setOtpPolicyLookAheadWindow(otpPolicy.getLookAheadWindow());
  if (realm.getBrowserFlow() != null)   rep.setBrowserFlow(realm.getBrowserFlow().getAlias());
  if (realm.getRegistrationFlow() != null)   rep.setRegistrationFlow(realm.getRegistrationFlow().getAlias());
  if (realm.getDirectGrantFlow() != null)   rep.setDirectGrantFlow(realm.getDirectGrantFlow().getAlias());
  if (realm.getResetCredentialsFlow() != null)   rep.setResetCredentialsFlow(realm.getResetCredentialsFlow().getAlias());
  if (realm.getClientAuthenticationFlow() != null)   rep.setClientAuthenticationFlow(realm.getClientAuthenticationFlow().getAlias());
  List<String> defaultRoles=realm.getDefaultRoles();
  if (!defaultRoles.isEmpty()) {
    List<String> roleStrings=new ArrayList<String>();
    roleStrings.addAll(defaultRoles);
    rep.setDefaultRoles(roleStrings);
  }
  List<RequiredCredentialModel> requiredCredentialModels=realm.getRequiredCredentials();
  if (requiredCredentialModels.size() > 0) {
    rep.setRequiredCredentials(new HashSet<String>());
    for (    RequiredCredentialModel cred : requiredCredentialModels) {
      rep.getRequiredCredentials().add(cred.getType());
    }
  }
  List<UserFederationProviderModel> fedProviderModels=realm.getUserFederationProviders();
  if (fedProviderModels.size() > 0) {
    List<UserFederationProviderRepresentation> fedProviderReps=new ArrayList<UserFederationProviderRepresentation>();
    for (    UserFederationProviderModel model : fedProviderModels) {
      UserFederationProviderRepresentation fedProvRep=toRepresentation(model);
      fedProviderReps.add(fedProvRep);
    }
    rep.setUserFederationProviders(fedProviderReps);
  }
  for (  UserFederationMapperModel mapper : realm.getUserFederationMappers()) {
    rep.addUserFederationMapper(toRepresentation(realm,mapper));
  }
  for (  IdentityProviderModel provider : realm.getIdentityProviders()) {
    rep.addIdentityProvider(toRepresentation(provider));
  }
  for (  IdentityProviderMapperModel mapper : realm.getIdentityProviderMappers()) {
    rep.addIdentityProviderMapper(toRepresentation(mapper));
  }
  rep.setInternationalizationEnabled(realm.isInternationalizationEnabled());
  rep.getSupportedLocales().addAll(realm.getSupportedLocales());
  rep.setDefaultLocale(realm.getDefaultLocale());
  if (internal) {
    exportAuthenticationFlows(realm,rep);
    exportRequiredActions(realm,rep);
  }
  return rep;
}
