{
  logger.debug("************ CREATE APPLICATION: {0}" + resourceRep.getClientId());
  ClientModel client=resourceRep.getId() != null ? realm.addClient(resourceRep.getId(),resourceRep.getClientId()) : realm.addClient(resourceRep.getClientId());
  if (resourceRep.isEnabled() != null)   client.setEnabled(resourceRep.isEnabled());
  client.setManagementUrl(resourceRep.getAdminUrl());
  if (resourceRep.isSurrogateAuthRequired() != null)   client.setSurrogateAuthRequired(resourceRep.isSurrogateAuthRequired());
  client.setBaseUrl(resourceRep.getBaseUrl());
  if (resourceRep.isBearerOnly() != null)   client.setBearerOnly(resourceRep.isBearerOnly());
  if (resourceRep.isConsentRequired() != null)   client.setConsentRequired(resourceRep.isConsentRequired());
  if (resourceRep.isPublicClient() != null)   client.setPublicClient(resourceRep.isPublicClient());
  if (resourceRep.isFrontchannelLogout() != null)   client.setFrontchannelLogout(resourceRep.isFrontchannelLogout());
  if (resourceRep.getProtocol() != null)   client.setProtocol(resourceRep.getProtocol());
  if (resourceRep.isFullScopeAllowed() != null) {
    client.setFullScopeAllowed(resourceRep.isFullScopeAllowed());
  }
 else {
    client.setFullScopeAllowed(true);
  }
  if (resourceRep.getNodeReRegistrationTimeout() != null) {
    client.setNodeReRegistrationTimeout(resourceRep.getNodeReRegistrationTimeout());
  }
 else {
    client.setNodeReRegistrationTimeout(-1);
  }
  client.updateApplication();
  if (resourceRep.getNotBefore() != null) {
    client.setNotBefore(resourceRep.getNotBefore());
  }
  client.setSecret(resourceRep.getSecret());
  if (client.getSecret() == null) {
    KeycloakModelUtils.generateSecret(client);
  }
  if (resourceRep.getAttributes() != null) {
    for (    Map.Entry<String,String> entry : resourceRep.getAttributes().entrySet()) {
      client.setAttribute(entry.getKey(),entry.getValue());
    }
  }
  if (resourceRep.getRedirectUris() != null) {
    for (    String redirectUri : resourceRep.getRedirectUris()) {
      client.addRedirectUri(redirectUri);
    }
  }
  if (resourceRep.getWebOrigins() != null) {
    for (    String webOrigin : resourceRep.getWebOrigins()) {
      logger.debugv("Application: {0} webOrigin: {1}",resourceRep.getClientId(),webOrigin);
      client.addWebOrigin(webOrigin);
    }
  }
 else {
    if (resourceRep.getRedirectUris() != null) {
      Set<String> origins=new HashSet<String>();
      for (      String redirectUri : resourceRep.getRedirectUris()) {
        logger.debugv("add redirect-uri to origin: {0}",redirectUri);
        if (redirectUri.startsWith("http:")) {
          URI uri=URI.create(redirectUri);
          String origin=uri.getScheme() + "://" + uri.getHost();
          if (uri.getPort() != -1) {
            origin+=":" + uri.getPort();
          }
          logger.debugv("adding default application origin: {0}",origin);
          origins.add(origin);
        }
      }
      if (origins.size() > 0) {
        client.setWebOrigins(origins);
      }
    }
  }
  if (resourceRep.getRegisteredNodes() != null) {
    for (    Map.Entry<String,Integer> entry : resourceRep.getRegisteredNodes().entrySet()) {
      client.registerNode(entry.getKey(),entry.getValue());
    }
  }
  if (addDefaultRoles && resourceRep.getDefaultRoles() != null) {
    client.updateDefaultRoles(resourceRep.getDefaultRoles());
  }
  if (resourceRep.getProtocolMappers() != null) {
    Set<ProtocolMapperModel> mappers=client.getProtocolMappers();
    for (    ProtocolMapperModel mapper : mappers)     client.removeProtocolMapper(mapper);
    for (    ProtocolMapperRepresentation mapper : resourceRep.getProtocolMappers()) {
      client.addProtocolMapper(toModel(mapper));
    }
  }
  client.updateIdentityProviders(toModel(resourceRep.getIdentityProviders(),realm));
  return client;
}
