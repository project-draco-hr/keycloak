{
  newRealm.setName(rep.getRealm());
  if (rep.isEnabled() != null)   newRealm.setEnabled(rep.isEnabled());
  if (rep.isSocial() != null)   newRealm.setSocial(rep.isSocial());
  if (rep.isBruteForceProtected() != null)   newRealm.setBruteForceProtected(rep.isBruteForceProtected());
  if (rep.getMaxFailureWaitSeconds() != null)   newRealm.setMaxFailureWaitSeconds(rep.getMaxFailureWaitSeconds());
  if (rep.getMinimumQuickLoginWaitSeconds() != null)   newRealm.setMinimumQuickLoginWaitSeconds(rep.getMinimumQuickLoginWaitSeconds());
  if (rep.getWaitIncrementSeconds() != null)   newRealm.setWaitIncrementSeconds(rep.getWaitIncrementSeconds());
  if (rep.getQuickLoginCheckMilliSeconds() != null)   newRealm.setQuickLoginCheckMilliSeconds(rep.getQuickLoginCheckMilliSeconds());
  if (rep.getMaxDeltaTimeSeconds() != null)   newRealm.setMaxDeltaTimeSeconds(rep.getMaxDeltaTimeSeconds());
  if (rep.getFailureFactor() != null)   newRealm.setFailureFactor(rep.getFailureFactor());
  if (rep.isEventsEnabled() != null)   newRealm.setEventsEnabled(rep.isEventsEnabled());
  if (rep.getEventsExpiration() != null)   newRealm.setEventsExpiration(rep.getEventsExpiration());
  if (rep.getEventsListeners() != null)   newRealm.setEventsListeners(new HashSet<String>(rep.getEventsListeners()));
  if (rep.getNotBefore() != null)   newRealm.setNotBefore(rep.getNotBefore());
  if (rep.getAccessTokenLifespan() != null)   newRealm.setAccessTokenLifespan(rep.getAccessTokenLifespan());
 else   newRealm.setAccessTokenLifespan(300);
  if (rep.getSsoSessionIdleTimeout() != null)   newRealm.setSsoSessionIdleTimeout(rep.getSsoSessionIdleTimeout());
 else   newRealm.setSsoSessionIdleTimeout(1800);
  if (rep.getSsoSessionMaxLifespan() != null)   newRealm.setSsoSessionMaxLifespan(rep.getSsoSessionMaxLifespan());
 else   newRealm.setSsoSessionMaxLifespan(36000);
  if (rep.getAccessCodeLifespan() != null)   newRealm.setAccessCodeLifespan(rep.getAccessCodeLifespan());
 else   newRealm.setAccessCodeLifespan(60);
  if (rep.getAccessCodeLifespanUserAction() != null)   newRealm.setAccessCodeLifespanUserAction(rep.getAccessCodeLifespanUserAction());
 else   newRealm.setAccessCodeLifespanUserAction(300);
  if (rep.getSslRequired() != null)   newRealm.setSslRequired(SslRequired.valueOf(rep.getSslRequired().toUpperCase()));
  if (rep.isPasswordCredentialGrantAllowed() != null)   newRealm.setPasswordCredentialGrantAllowed(rep.isPasswordCredentialGrantAllowed());
  if (rep.isRegistrationAllowed() != null)   newRealm.setRegistrationAllowed(rep.isRegistrationAllowed());
  if (rep.isRememberMe() != null)   newRealm.setRememberMe(rep.isRememberMe());
  if (rep.isVerifyEmail() != null)   newRealm.setVerifyEmail(rep.isVerifyEmail());
  if (rep.isResetPasswordAllowed() != null)   newRealm.setResetPasswordAllowed(rep.isResetPasswordAllowed());
  if (rep.isUpdateProfileOnInitialSocialLogin() != null)   newRealm.setUpdateProfileOnInitialSocialLogin(rep.isUpdateProfileOnInitialSocialLogin());
  if (rep.getPrivateKey() == null || rep.getPublicKey() == null) {
    KeycloakModelUtils.generateRealmKeys(newRealm);
  }
 else {
    newRealm.setPrivateKeyPem(rep.getPrivateKey());
    newRealm.setPublicKeyPem(rep.getPublicKey());
  }
  if (rep.getCertificate() == null) {
    KeycloakModelUtils.generateRealmCertificate(newRealm);
  }
 else {
    newRealm.setCertificatePem(rep.getCertificate());
  }
  if (rep.getCodeSecret() == null) {
    newRealm.setCodeSecret(KeycloakModelUtils.generateCodeSecret());
  }
 else {
    newRealm.setCodeSecret(rep.getCodeSecret());
  }
  if (rep.getLoginTheme() != null)   newRealm.setLoginTheme(rep.getLoginTheme());
  if (rep.getAccountTheme() != null)   newRealm.setAccountTheme(rep.getAccountTheme());
  if (rep.getAdminTheme() != null)   newRealm.setAdminTheme(rep.getAdminTheme());
  if (rep.getEmailTheme() != null)   newRealm.setEmailTheme(rep.getEmailTheme());
  if (rep.getRequiredCredentials() != null) {
    for (    String requiredCred : rep.getRequiredCredentials()) {
      addRequiredCredential(newRealm,requiredCred);
    }
  }
 else {
    addRequiredCredential(newRealm,CredentialRepresentation.PASSWORD);
  }
  if (rep.getPasswordPolicy() != null)   newRealm.setPasswordPolicy(new PasswordPolicy(rep.getPasswordPolicy()));
  if (rep.getApplications() != null) {
    Map<String,ApplicationModel> appMap=createApplications(rep,newRealm);
  }
  if (rep.getRoles() != null) {
    if (rep.getRoles().getRealm() != null) {
      for (      RoleRepresentation roleRep : rep.getRoles().getRealm()) {
        createRole(newRealm,roleRep);
      }
    }
    if (rep.getRoles().getApplication() != null) {
      for (      Map.Entry<String,List<RoleRepresentation>> entry : rep.getRoles().getApplication().entrySet()) {
        ApplicationModel app=newRealm.getApplicationByName(entry.getKey());
        if (app == null) {
          throw new RuntimeException("App doesn't exist in role definitions: " + entry.getKey());
        }
        for (        RoleRepresentation roleRep : entry.getValue()) {
          RoleModel role=roleRep.getId() != null ? app.addRole(roleRep.getId(),roleRep.getName()) : app.addRole(roleRep.getName());
          role.setDescription(roleRep.getDescription());
        }
      }
    }
    if (rep.getRoles().getRealm() != null) {
      for (      RoleRepresentation roleRep : rep.getRoles().getRealm()) {
        RoleModel role=newRealm.getRole(roleRep.getName());
        addComposites(role,roleRep,newRealm);
      }
    }
    if (rep.getRoles().getApplication() != null) {
      for (      Map.Entry<String,List<RoleRepresentation>> entry : rep.getRoles().getApplication().entrySet()) {
        ApplicationModel app=newRealm.getApplicationByName(entry.getKey());
        if (app == null) {
          throw new RuntimeException("App doesn't exist in role definitions: " + entry.getKey());
        }
        for (        RoleRepresentation roleRep : entry.getValue()) {
          RoleModel role=app.getRole(roleRep.getName());
          addComposites(role,roleRep,newRealm);
        }
      }
    }
  }
  if (rep.getDefaultRoles() != null) {
    for (    String roleString : rep.getDefaultRoles()) {
      newRealm.addDefaultRole(roleString.trim());
    }
  }
  if (rep.getApplications() != null) {
    for (    ApplicationRepresentation resourceRep : rep.getApplications()) {
      if (resourceRep.getDefaultRoles() != null) {
        ApplicationModel appModel=newRealm.getApplicationByName(resourceRep.getName());
        appModel.updateDefaultRoles(resourceRep.getDefaultRoles());
      }
    }
  }
  if (rep.getOauthClients() != null) {
    createOAuthClients(rep,newRealm);
  }
  Map<String,ApplicationModel> appMap=newRealm.getApplicationNameMap();
  if (rep.getApplicationScopeMappings() != null) {
    for (    Map.Entry<String,List<ScopeMappingRepresentation>> entry : rep.getApplicationScopeMappings().entrySet()) {
      ApplicationModel app=appMap.get(entry.getKey());
      if (app == null) {
        throw new RuntimeException("Unable to find application role mappings for app: " + entry.getKey());
      }
      createApplicationScopeMappings(newRealm,app,entry.getValue());
    }
  }
  if (rep.getScopeMappings() != null) {
    for (    ScopeMappingRepresentation scope : rep.getScopeMappings()) {
      ClientModel client=newRealm.findClient(scope.getClient());
      if (client == null) {
        throw new RuntimeException("Unknown client specification in realm scope mappings");
      }
      for (      String roleString : scope.getRoles()) {
        RoleModel role=newRealm.getRole(roleString.trim());
        if (role == null) {
          role=newRealm.addRole(roleString.trim());
        }
        client.addScopeMapping(role);
      }
    }
  }
  if (rep.getSmtpServer() != null) {
    newRealm.setSmtpConfig(new HashMap(rep.getSmtpServer()));
  }
  if (rep.getBrowserSecurityHeaders() != null) {
    newRealm.setBrowserSecurityHeaders(rep.getBrowserSecurityHeaders());
  }
 else {
    newRealm.setBrowserSecurityHeaders(BrowserSecurityHeaders.defaultHeaders);
  }
  if (rep.getSocialProviders() != null) {
    newRealm.setSocialConfig(new HashMap(rep.getSocialProviders()));
  }
  if (rep.getUserFederationProviders() != null) {
    List<UserFederationProviderModel> providerModels=convertFederationProviders(rep.getUserFederationProviders());
    newRealm.setUserFederationProviders(providerModels);
  }
  if (rep.getUsers() != null) {
    for (    UserRepresentation userRep : rep.getUsers()) {
      UserModel user=createUser(session,newRealm,userRep,appMap);
    }
  }
}
