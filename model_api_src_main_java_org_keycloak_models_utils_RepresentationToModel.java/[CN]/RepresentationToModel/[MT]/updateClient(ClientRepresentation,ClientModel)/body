{
  if (rep.getClientId() != null)   resource.setClientId(rep.getClientId());
  if (rep.getName() != null)   resource.setName(rep.getName());
  if (rep.getDescription() != null)   resource.setDescription(rep.getDescription());
  if (rep.isEnabled() != null)   resource.setEnabled(rep.isEnabled());
  if (rep.isBearerOnly() != null)   resource.setBearerOnly(rep.isBearerOnly());
  if (rep.isConsentRequired() != null)   resource.setConsentRequired(rep.isConsentRequired());
  if (rep.isServiceAccountsEnabled() != null)   resource.setServiceAccountsEnabled(rep.isServiceAccountsEnabled());
  if (rep.isDirectGrantsOnly() != null)   resource.setDirectGrantsOnly(rep.isDirectGrantsOnly());
  if (rep.isPublicClient() != null)   resource.setPublicClient(rep.isPublicClient());
  if (rep.isFullScopeAllowed() != null)   resource.setFullScopeAllowed(rep.isFullScopeAllowed());
  if (rep.isFrontchannelLogout() != null)   resource.setFrontchannelLogout(rep.isFrontchannelLogout());
  if (rep.getRootUrl() != null)   resource.setRootUrl(rep.getRootUrl());
  if (rep.getAdminUrl() != null)   resource.setManagementUrl(rep.getAdminUrl());
  if (rep.getBaseUrl() != null)   resource.setBaseUrl(rep.getBaseUrl());
  if (rep.isSurrogateAuthRequired() != null)   resource.setSurrogateAuthRequired(rep.isSurrogateAuthRequired());
  if (rep.getNodeReRegistrationTimeout() != null)   resource.setNodeReRegistrationTimeout(rep.getNodeReRegistrationTimeout());
  if (rep.getClientAuthenticatorType() != null)   resource.setClientAuthenticatorType(rep.getClientAuthenticatorType());
  resource.updateClient();
  if (rep.getProtocol() != null)   resource.setProtocol(rep.getProtocol());
  if (rep.getAttributes() != null) {
    for (    Map.Entry<String,String> entry : rep.getAttributes().entrySet()) {
      resource.setAttribute(entry.getKey(),entry.getValue());
    }
  }
  if (rep.getNotBefore() != null) {
    resource.setNotBefore(rep.getNotBefore());
  }
  if (rep.getDefaultRoles() != null) {
    resource.updateDefaultRoles(rep.getDefaultRoles());
  }
  List<String> redirectUris=rep.getRedirectUris();
  if (redirectUris != null) {
    resource.setRedirectUris(new HashSet<String>(redirectUris));
  }
  List<String> webOrigins=rep.getWebOrigins();
  if (webOrigins != null) {
    resource.setWebOrigins(new HashSet<String>(webOrigins));
  }
  if (rep.getRegisteredNodes() != null) {
    for (    Map.Entry<String,Integer> entry : rep.getRegisteredNodes().entrySet()) {
      resource.registerNode(entry.getKey(),entry.getValue());
    }
  }
}
