{
  GlobalConfigurationBuilder gcb=new GlobalConfigurationBuilder();
  boolean clustered=config.getBoolean("clustered",false);
  boolean async=config.getBoolean("async",true);
  boolean allowDuplicateJMXDomains=config.getBoolean("allowDuplicateJMXDomains",true);
  if (clustered) {
    gcb.transport().defaultTransport();
  }
  gcb.globalJmxStatistics().allowDuplicateDomains(allowDuplicateJMXDomains);
  cacheManager=new DefaultCacheManager(gcb.build());
  containerManaged=false;
  logger.debug("Started embedded Infinispan cache container");
  ConfigurationBuilder invalidationConfigBuilder=new ConfigurationBuilder();
  if (clustered) {
    invalidationConfigBuilder.clustering().cacheMode(async ? CacheMode.INVALIDATION_ASYNC : CacheMode.INVALIDATION_SYNC);
  }
  Configuration invalidationCacheConfiguration=invalidationConfigBuilder.build();
  cacheManager.defineConfiguration(InfinispanConnectionProvider.REALM_CACHE_NAME,invalidationCacheConfiguration);
  cacheManager.defineConfiguration(InfinispanConnectionProvider.USER_CACHE_NAME,invalidationCacheConfiguration);
  ConfigurationBuilder sessionConfigBuilder=new ConfigurationBuilder();
  if (clustered) {
    String sessionsMode=config.get("sessionsMode","distributed");
    if (sessionsMode.equalsIgnoreCase("replicated")) {
      sessionConfigBuilder.clustering().cacheMode(async ? CacheMode.REPL_ASYNC : CacheMode.REPL_SYNC);
    }
 else     if (sessionsMode.equalsIgnoreCase("distributed")) {
      sessionConfigBuilder.clustering().cacheMode(async ? CacheMode.DIST_ASYNC : CacheMode.DIST_SYNC);
    }
 else {
      throw new RuntimeException("Invalid value for sessionsMode");
    }
    sessionConfigBuilder.clustering().hash().numOwners(config.getInt("sessionsOwners",2)).numSegments(config.getInt("sessionsSegments",60)).build();
  }
  Configuration sessionCacheConfiguration=sessionConfigBuilder.build();
  cacheManager.defineConfiguration(InfinispanConnectionProvider.SESSION_CACHE_NAME,sessionCacheConfiguration);
  cacheManager.defineConfiguration(InfinispanConnectionProvider.OFFLINE_SESSION_CACHE_NAME,sessionCacheConfiguration);
  cacheManager.defineConfiguration(InfinispanConnectionProvider.LOGIN_FAILURE_CACHE_NAME,sessionCacheConfiguration);
  cacheManager.defineConfiguration(InfinispanConnectionProvider.AUTHORIZATION_CACHE_NAME,sessionCacheConfiguration);
  ConfigurationBuilder replicationConfigBuilder=new ConfigurationBuilder();
  if (clustered) {
    replicationConfigBuilder.clustering().cacheMode(async ? CacheMode.REPL_ASYNC : CacheMode.REPL_SYNC);
  }
  Configuration replicationCacheConfiguration=replicationConfigBuilder.build();
  cacheManager.defineConfiguration(InfinispanConnectionProvider.WORK_CACHE_NAME,replicationCacheConfiguration);
  ConfigurationBuilder counterConfigBuilder=new ConfigurationBuilder();
  counterConfigBuilder.invocationBatching().enable().transaction().transactionMode(TransactionMode.TRANSACTIONAL);
  counterConfigBuilder.transaction().transactionManagerLookup(new DummyTransactionManagerLookup());
  counterConfigBuilder.transaction().lockingMode(LockingMode.PESSIMISTIC);
  cacheManager.defineConfiguration(InfinispanConnectionProvider.REALM_REVISIONS_CACHE_NAME,getRevisionCacheConfig(InfinispanConnectionProvider.REALM_REVISIONS_CACHE_DEFAULT_MAX));
  cacheManager.getCache(InfinispanConnectionProvider.REALM_CACHE_NAME,true);
  long maxEntries=cacheManager.getCache(InfinispanConnectionProvider.USER_CACHE_NAME).getCacheConfiguration().eviction().maxEntries();
  if (maxEntries <= 0) {
    maxEntries=InfinispanConnectionProvider.USER_REVISIONS_CACHE_DEFAULT_MAX;
  }
  cacheManager.defineConfiguration(InfinispanConnectionProvider.USER_REVISIONS_CACHE_NAME,getRevisionCacheConfig(maxEntries));
  cacheManager.getCache(InfinispanConnectionProvider.USER_REVISIONS_CACHE_NAME,true);
  cacheManager.defineConfiguration(InfinispanConnectionProvider.KEYS_CACHE_NAME,getKeysCacheConfig());
  cacheManager.getCache(InfinispanConnectionProvider.KEYS_CACHE_NAME,true);
}
