{
  return new KeycloakTransaction(){
    @Override public void begin(){
      transactionActive=true;
    }
    @Override public void commit(){
      if (delegate == null)       return;
      List<String> locks=new LinkedList<>();
      locks.addAll(invalidations);
      Collections.sort(locks);
      cache.getRevisions().startBatch();
      for (      String lock : locks) {
        boolean success=cache.getRevisions().getAdvancedCache().lock(lock);
      }
    }
    @Override public void rollback(){
      setRollbackOnly=true;
      transactionActive=false;
    }
    @Override public void setRollbackOnly(){
      setRollbackOnly=true;
    }
    @Override public boolean getRollbackOnly(){
      return setRollbackOnly;
    }
    @Override public boolean isActive(){
      return transactionActive;
    }
  }
;
}
