{
  super(revision,model.getId());
  clientAuthenticatorType=model.getClientAuthenticatorType();
  secret=model.getSecret();
  registrationToken=model.getRegistrationToken();
  clientId=model.getClientId();
  name=model.getName();
  description=model.getDescription();
  this.realm=realm.getId();
  enabled=model.isEnabled();
  protocol=model.getProtocol();
  attributes.putAll(model.getAttributes());
  notBefore=model.getNotBefore();
  frontchannelLogout=model.isFrontchannelLogout();
  publicClient=model.isPublicClient();
  fullScopeAllowed=model.isFullScopeAllowed();
  redirectUris.addAll(model.getRedirectUris());
  webOrigins.addAll(model.getWebOrigins());
  for (  RoleModel role : model.getScopeMappings()) {
    scope.add(role.getId());
  }
  for (  ProtocolMapperModel mapper : model.getProtocolMappers()) {
    this.protocolMappers.add(mapper);
  }
  surrogateAuthRequired=model.isSurrogateAuthRequired();
  managementUrl=model.getManagementUrl();
  rootUrl=model.getRootUrl();
  baseUrl=model.getBaseUrl();
  defaultRoles.addAll(model.getDefaultRoles());
  bearerOnly=model.isBearerOnly();
  consentRequired=model.isConsentRequired();
  standardFlowEnabled=model.isStandardFlowEnabled();
  implicitFlowEnabled=model.isImplicitFlowEnabled();
  directAccessGrantsEnabled=model.isDirectAccessGrantsEnabled();
  serviceAccountsEnabled=model.isServiceAccountsEnabled();
  nodeReRegistrationTimeout=model.getNodeReRegistrationTimeout();
  registeredNodes=new TreeMap<>(model.getRegisteredNodes());
  if (model.getClientTemplate() != null) {
    clientTemplate=model.getClientTemplate().getId();
  }
  useTemplateConfig=model.useTemplateConfig();
  useTemplateMappers=model.useTemplateMappers();
  useTemplateScope=model.useTemplateScope();
}
