{
  super(revision,model.getId());
  name=model.getName();
  displayName=model.getDisplayName();
  displayNameHtml=model.getDisplayNameHtml();
  enabled=model.isEnabled();
  sslRequired=model.getSslRequired();
  registrationAllowed=model.isRegistrationAllowed();
  registrationEmailAsUsername=model.isRegistrationEmailAsUsername();
  rememberMe=model.isRememberMe();
  verifyEmail=model.isVerifyEmail();
  resetPasswordAllowed=model.isResetPasswordAllowed();
  identityFederationEnabled=model.isIdentityFederationEnabled();
  editUsernameAllowed=model.isEditUsernameAllowed();
  bruteForceProtected=model.isBruteForceProtected();
  maxFailureWaitSeconds=model.getMaxFailureWaitSeconds();
  minimumQuickLoginWaitSeconds=model.getMinimumQuickLoginWaitSeconds();
  waitIncrementSeconds=model.getWaitIncrementSeconds();
  quickLoginCheckMilliSeconds=model.getQuickLoginCheckMilliSeconds();
  maxDeltaTimeSeconds=model.getMaxDeltaTimeSeconds();
  failureFactor=model.getFailureFactor();
  revokeRefreshToken=model.isRevokeRefreshToken();
  ssoSessionIdleTimeout=model.getSsoSessionIdleTimeout();
  ssoSessionMaxLifespan=model.getSsoSessionMaxLifespan();
  offlineSessionIdleTimeout=model.getOfflineSessionIdleTimeout();
  accessTokenLifespan=model.getAccessTokenLifespan();
  accessTokenLifespanForImplicitFlow=model.getAccessTokenLifespanForImplicitFlow();
  accessCodeLifespan=model.getAccessCodeLifespan();
  accessCodeLifespanUserAction=model.getAccessCodeLifespanUserAction();
  accessCodeLifespanLogin=model.getAccessCodeLifespanLogin();
  notBefore=model.getNotBefore();
  passwordPolicy=model.getPasswordPolicy();
  otpPolicy=model.getOTPPolicy();
  keyId=model.getKeyId();
  publicKeyPem=model.getPublicKeyPem();
  publicKey=model.getPublicKey();
  privateKeyPem=model.getPrivateKeyPem();
  privateKey=model.getPrivateKey();
  certificatePem=model.getCertificatePem();
  certificate=model.getCertificate();
  codeSecret=model.getCodeSecret();
  loginTheme=model.getLoginTheme();
  accountTheme=model.getAccountTheme();
  adminTheme=model.getAdminTheme();
  emailTheme=model.getEmailTheme();
  requiredCredentials=model.getRequiredCredentials();
  userFederationProviders=model.getUserFederationProviders();
  userFederationMapperSet=model.getUserFederationMappers();
  for (  UserFederationMapperModel mapper : userFederationMapperSet) {
    this.userFederationMappers.add(mapper.getFederationProviderId(),mapper);
  }
  this.identityProviders=new ArrayList<>();
  for (  IdentityProviderModel identityProviderModel : model.getIdentityProviders()) {
    this.identityProviders.add(new IdentityProviderModel(identityProviderModel));
  }
  this.identityProviders=Collections.unmodifiableList(this.identityProviders);
  this.identityProviderMapperSet=model.getIdentityProviderMappers();
  for (  IdentityProviderMapperModel mapper : identityProviderMapperSet) {
    identityProviderMappers.add(mapper.getIdentityProviderAlias(),mapper);
  }
  smtpConfig=model.getSmtpConfig();
  browserSecurityHeaders=model.getBrowserSecurityHeaders();
  eventsEnabled=model.isEventsEnabled();
  eventsExpiration=model.getEventsExpiration();
  eventsListeners=model.getEventsListeners();
  enabledEventTypes=model.getEnabledEventTypes();
  adminEventsEnabled=model.isAdminEventsEnabled();
  adminEventsDetailsEnabled=model.isAdminEventsDetailsEnabled();
  defaultRoles=model.getDefaultRoles();
  ClientModel masterAdminClient=model.getMasterAdminClient();
  this.masterAdminClient=(masterAdminClient != null) ? masterAdminClient.getId() : null;
  cacheClientTemplates(model);
  internationalizationEnabled=model.isInternationalizationEnabled();
  supportedLocales=model.getSupportedLocales();
  defaultLocale=model.getDefaultLocale();
  authenticationFlowList=model.getAuthenticationFlows();
  for (  AuthenticationFlowModel flow : authenticationFlowList) {
    this.authenticationFlows.put(flow.getId(),flow);
    authenticationExecutions.put(flow.getId(),new LinkedList<AuthenticationExecutionModel>());
    for (    AuthenticationExecutionModel execution : model.getAuthenticationExecutions(flow.getId())) {
      authenticationExecutions.add(flow.getId(),execution);
      executionsById.put(execution.getId(),execution);
    }
  }
  for (  GroupModel group : model.getGroups()) {
    groups.add(group.getId());
  }
  for (  AuthenticatorConfigModel authenticator : model.getAuthenticatorConfigs()) {
    authenticatorConfigs.put(authenticator.getId(),authenticator);
  }
  requiredActionProviderList=model.getRequiredActionProviders();
  for (  RequiredActionProviderModel action : requiredActionProviderList) {
    this.requiredActionProviders.put(action.getId(),action);
    requiredActionProvidersByAlias.put(action.getAlias(),action);
  }
  for (  GroupModel group : model.getDefaultGroups()) {
    defaultGroups.add(group.getId());
  }
  browserFlow=model.getBrowserFlow();
  registrationFlow=model.getRegistrationFlow();
  directGrantFlow=model.getDirectGrantFlow();
  resetCredentialsFlow=model.getResetCredentialsFlow();
  clientAuthenticationFlow=model.getClientAuthenticationFlow();
  for (  ComponentModel component : model.getComponents()) {
    componentsByParentAndType.add(component.getParentId() + component.getProviderType(),component);
  }
  for (  ComponentModel component : model.getComponents()) {
    componentsByParent.add(component.getParentId(),component);
  }
  for (  ComponentModel component : model.getComponents()) {
    components.put(component.getId(),component);
  }
  try {
    attributes=model.getAttributes();
  }
 catch (  UnsupportedOperationException ex) {
  }
}
