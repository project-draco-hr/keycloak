{
  final Cache<String,SessionEntity> cache=getCache(offline);
  Iterator<UserSessionTimestamp> itr=cache.entrySet().stream().filter(ClientSessionPredicate.create(realm.getId()).client(client.getId()).requireUserSession()).map(Mappers.clientSessionToUserSessionTimestamp()).iterator();
  Map<String,UserSessionTimestamp> m=new HashMap<>();
  while (itr.hasNext()) {
    UserSessionTimestamp next=itr.next();
    if (!m.containsKey(next.getUserSessionId()) || m.get(next.getUserSessionId()).getClientSessionTimestamp() < next.getClientSessionTimestamp()) {
      m.put(next.getUserSessionId(),next);
    }
  }
  Stream<UserSessionTimestamp> stream=new LinkedList<>(m.values()).stream().sorted(Comparators.userSessionTimestamp());
  if (firstResult > 0) {
    stream=stream.skip(firstResult);
  }
  if (maxResults > 0) {
    stream=stream.limit(maxResults);
  }
  final List<UserSessionModel> sessions=new LinkedList<>();
  stream.forEach(new Consumer<UserSessionTimestamp>(){
    @Override public void accept(    UserSessionTimestamp userSessionTimestamp){
      SessionEntity entity=cache.get(userSessionTimestamp.getUserSessionId());
      if (entity != null) {
        sessions.add(wrap(realm,(UserSessionEntity)entity,offline));
      }
    }
  }
);
  return sessions;
}
