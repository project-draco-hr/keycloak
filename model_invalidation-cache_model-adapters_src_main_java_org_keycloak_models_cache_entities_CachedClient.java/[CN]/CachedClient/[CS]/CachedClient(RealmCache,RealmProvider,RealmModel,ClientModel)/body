{
  id=model.getId();
  clientAuthenticatorType=model.getClientAuthenticatorType();
  secret=model.getSecret();
  registrationSecret=model.getRegistrationSecret();
  clientId=model.getClientId();
  name=model.getName();
  description=model.getDescription();
  this.realm=realm.getId();
  enabled=model.isEnabled();
  protocol=model.getProtocol();
  attributes.putAll(model.getAttributes());
  notBefore=model.getNotBefore();
  directGrantsOnly=model.isDirectGrantsOnly();
  frontchannelLogout=model.isFrontchannelLogout();
  publicClient=model.isPublicClient();
  fullScopeAllowed=model.isFullScopeAllowed();
  redirectUris.addAll(model.getRedirectUris());
  webOrigins.addAll(model.getWebOrigins());
  for (  RoleModel role : model.getScopeMappings()) {
    scope.add(role.getId());
  }
  for (  ProtocolMapperModel mapper : model.getProtocolMappers()) {
    this.protocolMappers.add(mapper);
  }
  surrogateAuthRequired=model.isSurrogateAuthRequired();
  managementUrl=model.getManagementUrl();
  rootUrl=model.getRootUrl();
  baseUrl=model.getBaseUrl();
  defaultRoles.addAll(model.getDefaultRoles());
  bearerOnly=model.isBearerOnly();
  consentRequired=model.isConsentRequired();
  serviceAccountsEnabled=model.isServiceAccountsEnabled();
  for (  RoleModel role : model.getRoles()) {
    roles.put(role.getName(),role.getId());
    cache.addCachedRole(new CachedClientRole(id,role,realm));
  }
  nodeReRegistrationTimeout=model.getNodeReRegistrationTimeout();
  registeredNodes=new TreeMap<String,Integer>(model.getRegisteredNodes());
}
