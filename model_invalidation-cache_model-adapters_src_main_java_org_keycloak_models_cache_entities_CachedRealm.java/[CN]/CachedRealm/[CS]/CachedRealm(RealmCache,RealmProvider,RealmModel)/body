{
  id=model.getId();
  name=model.getName();
  enabled=model.isEnabled();
  sslRequired=model.getSslRequired();
  registrationAllowed=model.isRegistrationAllowed();
  rememberMe=model.isRememberMe();
  verifyEmail=model.isVerifyEmail();
  passwordCredentialGrantAllowed=model.isPasswordCredentialGrantAllowed();
  resetPasswordAllowed=model.isResetPasswordAllowed();
  social=model.isSocial();
  updateProfileOnInitialSocialLogin=model.isUpdateProfileOnInitialSocialLogin();
  bruteForceProtected=model.isBruteForceProtected();
  maxFailureWaitSeconds=model.getMaxFailureWaitSeconds();
  minimumQuickLoginWaitSeconds=model.getMinimumQuickLoginWaitSeconds();
  waitIncrementSeconds=model.getWaitIncrementSeconds();
  quickLoginCheckMilliSeconds=model.getQuickLoginCheckMilliSeconds();
  maxDeltaTimeSeconds=model.getMaxDeltaTimeSeconds();
  failureFactor=model.getFailureFactor();
  ssoSessionIdleTimeout=model.getSsoSessionIdleTimeout();
  ssoSessionMaxLifespan=model.getSsoSessionMaxLifespan();
  accessTokenLifespan=model.getAccessTokenLifespan();
  accessCodeLifespan=model.getAccessCodeLifespan();
  accessCodeLifespanUserAction=model.getAccessCodeLifespanUserAction();
  notBefore=model.getNotBefore();
  passwordPolicy=model.getPasswordPolicy();
  publicKeyPem=model.getPublicKeyPem();
  privateKeyPem=model.getPrivateKeyPem();
  loginTheme=model.getLoginTheme();
  accountTheme=model.getAccountTheme();
  adminTheme=model.getAdminTheme();
  emailTheme=model.getEmailTheme();
  requiredCredentials=model.getRequiredCredentials();
  userFederationProviders=model.getUserFederationProviders();
  smtpConfig.putAll(model.getSmtpConfig());
  socialConfig.putAll(model.getSocialConfig());
  browserSecurityHeaders.putAll(model.getBrowserSecurityHeaders());
  auditEnabled=model.isAuditEnabled();
  auditExpiration=model.getAuditExpiration();
  auditListeners.addAll(model.getAuditListeners());
  defaultRoles.addAll(model.getDefaultRoles());
  masterAdminApp=model.getMasterAdminApp().getId();
  for (  RoleModel role : model.getRoles()) {
    realmRoles.put(role.getName(),role.getId());
    CachedRole cachedRole=new CachedRealmRole(role,model);
    cache.addCachedRole(cachedRole);
  }
  for (  ApplicationModel app : model.getApplications()) {
    applications.put(app.getName(),app.getId());
    CachedApplication cachedApp=new CachedApplication(cache,delegate,model,app);
    cache.addCachedApplication(cachedApp);
  }
  for (  OAuthClientModel client : model.getOAuthClients()) {
    clients.put(client.getClientId(),client.getId());
    CachedOAuthClient cachedApp=new CachedOAuthClient(cache,delegate,model,client);
    cache.addCachedOAuthClient(cachedApp);
  }
}
