{
  id=model.getId();
  name=model.getName();
  enabled=model.isEnabled();
  sslRequired=model.getSslRequired();
  registrationAllowed=model.isRegistrationAllowed();
  registrationEmailAsUsername=model.isRegistrationEmailAsUsername();
  rememberMe=model.isRememberMe();
  verifyEmail=model.isVerifyEmail();
  resetPasswordAllowed=model.isResetPasswordAllowed();
  identityFederationEnabled=model.isIdentityFederationEnabled();
  editUsernameAllowed=model.isEditUsernameAllowed();
  bruteForceProtected=model.isBruteForceProtected();
  maxFailureWaitSeconds=model.getMaxFailureWaitSeconds();
  minimumQuickLoginWaitSeconds=model.getMinimumQuickLoginWaitSeconds();
  waitIncrementSeconds=model.getWaitIncrementSeconds();
  quickLoginCheckMilliSeconds=model.getQuickLoginCheckMilliSeconds();
  maxDeltaTimeSeconds=model.getMaxDeltaTimeSeconds();
  failureFactor=model.getFailureFactor();
  ssoSessionIdleTimeout=model.getSsoSessionIdleTimeout();
  ssoSessionMaxLifespan=model.getSsoSessionMaxLifespan();
  accessTokenLifespan=model.getAccessTokenLifespan();
  accessCodeLifespan=model.getAccessCodeLifespan();
  accessCodeLifespanUserAction=model.getAccessCodeLifespanUserAction();
  accessCodeLifespanLogin=model.getAccessCodeLifespanLogin();
  notBefore=model.getNotBefore();
  passwordPolicy=model.getPasswordPolicy();
  publicKeyPem=model.getPublicKeyPem();
  privateKeyPem=model.getPrivateKeyPem();
  certificatePem=model.getCertificatePem();
  codeSecret=model.getCodeSecret();
  loginTheme=model.getLoginTheme();
  accountTheme=model.getAccountTheme();
  adminTheme=model.getAdminTheme();
  emailTheme=model.getEmailTheme();
  requiredCredentials=model.getRequiredCredentials();
  userFederationProviders=model.getUserFederationProviders();
  for (  UserFederationMapperModel mapper : model.getUserFederationMappers()) {
    userFederationMappers.add(mapper.getFederationProviderId(),mapper);
  }
  this.identityProviders=new ArrayList<>();
  for (  IdentityProviderModel identityProviderModel : model.getIdentityProviders()) {
    this.identityProviders.add(new IdentityProviderModel(identityProviderModel));
  }
  for (  IdentityProviderMapperModel mapper : model.getIdentityProviderMappers()) {
    identityProviderMappers.add(mapper.getIdentityProviderAlias(),mapper);
  }
  smtpConfig.putAll(model.getSmtpConfig());
  browserSecurityHeaders.putAll(model.getBrowserSecurityHeaders());
  eventsEnabled=model.isEventsEnabled();
  eventsExpiration=model.getEventsExpiration();
  eventsListeners.addAll(model.getEventsListeners());
  enabledEventTypes.addAll(model.getEnabledEventTypes());
  adminEventsEnabled=model.isAdminEventsEnabled();
  adminEventsDetailsEnabled=model.isAdminEventsDetailsEnabled();
  defaultRoles.addAll(model.getDefaultRoles());
  masterAdminClient=model.getMasterAdminClient().getId();
  for (  RoleModel role : model.getRoles()) {
    realmRoles.put(role.getName(),role.getId());
    CachedRole cachedRole=new CachedRealmRole(role,model);
    cache.addCachedRole(cachedRole);
  }
  for (  ClientModel client : model.getClients()) {
    clients.put(client.getClientId(),client.getId());
    CachedClient cachedClient=new CachedClient(cache,delegate,model,client);
    cache.addCachedClient(cachedClient);
  }
  internationalizationEnabled=model.isInternationalizationEnabled();
  supportedLocales.addAll(model.getSupportedLocales());
  defaultLocale=model.getDefaultLocale();
  for (  AuthenticationFlowModel flow : model.getAuthenticationFlows()) {
    authenticationFlows.put(flow.getId(),flow);
    authenticationExecutions.put(flow.getId(),new LinkedList<AuthenticationExecutionModel>());
    for (    AuthenticationExecutionModel execution : model.getAuthenticationExecutions(flow.getId())) {
      authenticationExecutions.add(flow.getId(),execution);
      executionsById.put(execution.getId(),execution);
    }
  }
  for (  AuthenticatorConfigModel authenticator : model.getAuthenticatorConfigs()) {
    authenticatorConfigs.put(authenticator.getId(),authenticator);
  }
  for (  RequiredActionProviderModel action : model.getRequiredActionProviders()) {
    requiredActionProviders.put(action.getId(),action);
    requiredActionProvidersByAlias.put(action.getAlias(),action);
  }
}
