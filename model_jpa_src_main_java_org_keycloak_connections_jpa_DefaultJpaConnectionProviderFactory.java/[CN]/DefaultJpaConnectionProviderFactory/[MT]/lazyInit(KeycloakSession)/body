{
  if (emf == null) {
synchronized (this) {
      if (emf == null) {
        logger.debug("Initializing JPA connections");
        Connection connection=null;
        Map<String,Object> properties=new HashMap<String,Object>();
        String unitName="keycloak-default";
        String dataSource=config.get("dataSource");
        if (dataSource != null) {
          if (config.getBoolean("jta",false)) {
            properties.put(AvailableSettings.JTA_DATASOURCE,dataSource);
          }
 else {
            properties.put(AvailableSettings.NON_JTA_DATASOURCE,dataSource);
          }
        }
 else {
          properties.put(AvailableSettings.JDBC_URL,config.get("url"));
          properties.put(AvailableSettings.JDBC_DRIVER,config.get("driver"));
          String user=config.get("user");
          if (user != null) {
            properties.put(AvailableSettings.JDBC_USER,user);
          }
          String password=config.get("password");
          if (password != null) {
            properties.put(AvailableSettings.JDBC_PASSWORD,password);
          }
        }
        String schema=getSchema();
        if (schema != null) {
          properties.put(JpaUtils.HIBERNATE_DEFAULT_SCHEMA,schema);
        }
        String databaseSchema=config.get("databaseSchema");
        if (databaseSchema == null) {
          throw new RuntimeException("Property 'databaseSchema' needs to be specified in the configuration");
        }
        if (databaseSchema.equals("development-update")) {
          properties.put("hibernate.hbm2ddl.auto","update");
          databaseSchema=null;
        }
 else         if (databaseSchema.equals("development-validate")) {
          properties.put("hibernate.hbm2ddl.auto","validate");
          databaseSchema=null;
        }
        properties.put("hibernate.show_sql",config.getBoolean("showSql",false));
        properties.put("hibernate.format_sql",config.getBoolean("formatSql",true));
        connection=getConnection();
        try {
          prepareOperationalInfo(connection);
          String driverDialect=detectDialect(connection);
          if (driverDialect != null) {
            properties.put("hibernate.dialect",driverDialect);
          }
          if (databaseSchema != null) {
            logger.trace("Updating database");
            JpaUpdaterProvider updater=session.getProvider(JpaUpdaterProvider.class);
            if (updater == null) {
              throw new RuntimeException("Can't update database: JPA updater provider not found");
            }
            if (databaseSchema.equals("update")) {
              updater.update(connection,schema);
            }
 else             if (databaseSchema.equals("validate")) {
              updater.validate(connection,schema);
            }
 else {
              throw new RuntimeException("Invalid value for databaseSchema: " + databaseSchema);
            }
            logger.trace("Database update completed");
          }
          int globalStatsInterval=config.getInt("globalStatsInterval",-1);
          if (globalStatsInterval != -1) {
            properties.put("hibernate.generate_statistics",true);
          }
          logger.trace("Creating EntityManagerFactory");
          emf=JpaUtils.createEntityManagerFactory(session,unitName,properties,getClass().getClassLoader());
          logger.trace("EntityManagerFactory created");
          if (globalStatsInterval != -1) {
            startGlobalStats(session,globalStatsInterval);
          }
        }
 catch (        Exception e) {
          if (connection != null) {
            try {
              connection.rollback();
            }
 catch (            SQLException e2) {
              logger.warn("Can't rollback connection",e2);
            }
          }
          throw e;
        }
 finally {
          if (connection != null) {
            try {
              connection.close();
            }
 catch (            SQLException e) {
              logger.warn("Can't close connection",e);
            }
          }
        }
      }
    }
  }
}
