{
  Collection<ClientIdentityProviderMappingEntity> entities=entity.getIdentityProviders();
  Set<String> already=new HashSet<String>();
  List<ClientIdentityProviderMappingEntity> remove=new ArrayList<ClientIdentityProviderMappingEntity>();
  for (  ClientIdentityProviderMappingEntity entity : entities) {
    IdentityProviderEntity identityProvider=entity.getIdentityProvider();
    boolean toRemove=true;
    for (    ClientIdentityProviderMappingModel model : identityProviders) {
      if (model.getIdentityProvider().equals(identityProvider.getId())) {
        toRemove=false;
        break;
      }
    }
    if (toRemove) {
      remove.add(entity);
    }
 else {
      already.add(entity.getIdentityProvider().getId());
    }
  }
  for (  ClientIdentityProviderMappingEntity entity : remove) {
    entities.remove(entity);
    em.remove(entity);
  }
  em.flush();
  for (  ClientIdentityProviderMappingModel model : identityProviders) {
    ClientIdentityProviderMappingEntity mappingEntity=null;
    if (!already.contains(model.getIdentityProvider())) {
      mappingEntity=new ClientIdentityProviderMappingEntity();
      entities.add(mappingEntity);
    }
 else {
      for (      ClientIdentityProviderMappingEntity entity : entities) {
        if (entity.getIdentityProvider().getId().equals(model.getIdentityProvider())) {
          mappingEntity=entity;
          break;
        }
      }
    }
    TypedQuery<IdentityProviderEntity> query=em.createNamedQuery("findIdentityProviderById",IdentityProviderEntity.class).setParameter("id",model.getIdentityProvider());
    IdentityProviderEntity identityProviderEntity=query.getSingleResult();
    mappingEntity.setIdentityProvider(identityProviderEntity);
    mappingEntity.setClient(this.entity);
    mappingEntity.setRetrieveToken(model.isRetrieveToken());
    em.persist(mappingEntity);
  }
  em.flush();
}
