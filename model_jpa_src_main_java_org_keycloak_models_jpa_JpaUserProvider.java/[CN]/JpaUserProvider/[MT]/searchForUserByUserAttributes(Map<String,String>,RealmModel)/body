{
  StringBuilder builder=new StringBuilder("select attr.user,count(attr.user) from UserAttributeEntity attr where attr.user.realmId = :realmId");
  boolean first=true;
  for (  Map.Entry<String,String> entry : attributes.entrySet()) {
    String attrName=entry.getKey();
    if (first) {
      builder.append(" and ");
      first=false;
    }
 else {
      builder.append(" or ");
    }
    builder.append(" ( attr.name like :").append(attrName);
    builder.append(" and attr.value like :").append(attrName).append("val )");
  }
  builder.append(" group by attr.user having count(attr.user) = " + attributes.size());
  Query query=em.createQuery(builder.toString());
  query.setParameter("realmId",realm.getId());
  for (  Map.Entry<String,String> entry : attributes.entrySet()) {
    query.setParameter(entry.getKey(),entry.getKey());
    query.setParameter(entry.getKey() + "val",entry.getValue());
  }
  List results=query.getResultList();
  List<UserModel> users=new ArrayList<UserModel>();
  for (  Object o : results) {
    UserEntity user=(UserEntity)((Object[])o)[0];
    users.add(new UserAdapter(realm,em,user));
  }
  return users;
}
