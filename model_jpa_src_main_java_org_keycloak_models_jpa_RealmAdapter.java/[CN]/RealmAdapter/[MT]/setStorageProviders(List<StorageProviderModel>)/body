{
  for (  StorageProviderModel currentProvider : providers) {
    KeycloakModelUtils.ensureUniqueDisplayName(currentProvider.getDisplayName(),currentProvider,providers);
  }
  Iterator<StorageProviderEntity> it=realm.getStorageProviders().iterator();
  while (it.hasNext()) {
    StorageProviderEntity entity=it.next();
    boolean found=false;
    for (    StorageProviderModel model : providers) {
      if (entity.getId().equals(model.getId())) {
        entity.setConfig(model.getConfig());
        entity.setPriority(model.getPriority());
        entity.setProviderName(model.getProviderName());
        String displayName=model.getDisplayName();
        if (displayName != null) {
          entity.setDisplayName(displayName);
        }
        found=true;
        break;
      }
    }
    if (found)     continue;
    session.users().preRemove(this,toModel(entity));
    removeFederationMappersForProvider(entity.getId());
    it.remove();
    em.remove(entity);
  }
  List<StorageProviderModel> add=new LinkedList<>();
  for (  StorageProviderModel model : providers) {
    boolean found=false;
    for (    StorageProviderEntity entity : realm.getStorageProviders()) {
      if (entity.getId().equals(model.getId())) {
        found=true;
        break;
      }
    }
    if (!found)     add.add(model);
  }
  for (  StorageProviderModel model : add) {
    StorageProviderEntity entity=new StorageProviderEntity();
    if (model.getId() != null) {
      entity.setId(model.getId());
    }
 else {
      String id=KeycloakModelUtils.generateId();
      entity.setId(id);
      model.setId(id);
    }
    entity.setConfig(model.getConfig());
    entity.setPriority(model.getPriority());
    entity.setProviderName(model.getProviderName());
    entity.setPriority(model.getPriority());
    String displayName=model.getDisplayName();
    if (displayName == null) {
      displayName=entity.getId();
    }
    entity.setDisplayName(displayName);
    entity.setRealm(realm);
    em.persist(entity);
    realm.getStorageProviders().add(entity);
  }
}
