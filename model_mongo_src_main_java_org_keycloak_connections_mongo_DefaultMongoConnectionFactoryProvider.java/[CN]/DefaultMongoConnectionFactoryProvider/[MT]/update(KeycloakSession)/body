{
  String databaseSchema=config.get("databaseSchema");
  if (databaseSchema == null) {
    throw new RuntimeException("Property 'databaseSchema' needs to be specified in the configuration of mongo connections");
  }
 else {
    MongoUpdaterProvider mongoUpdater=session.getProvider(MongoUpdaterProvider.class);
    if (mongoUpdater == null) {
      throw new RuntimeException("Can't update database: Mongo updater provider not found");
    }
    DBLockProvider dbLock=new DBLockManager(session).getDBLock();
    if (dbLock.hasLock()) {
      updateOrValidateDB(databaseSchema,session,mongoUpdater);
    }
 else {
      logger.trace("Don't have DBLock retrieved before upgrade. Needs to acquire lock first in separate transaction");
      KeycloakModelUtils.runJobInTransaction(session.getKeycloakSessionFactory(),new KeycloakSessionTask(){
        @Override public void run(        KeycloakSession lockSession){
          DBLockManager dbLockManager=new DBLockManager(lockSession);
          DBLockProvider dbLock2=dbLockManager.getDBLock();
          dbLock2.waitForLock();
          try {
            updateOrValidateDB(databaseSchema,session,mongoUpdater);
          }
  finally {
            dbLock2.releaseLock();
          }
        }
      }
);
    }
    if (databaseSchema.equals("update")) {
      mongoUpdater.update(session,db);
    }
 else     if (databaseSchema.equals("validate")) {
      mongoUpdater.validate(session,db);
    }
 else {
      throw new RuntimeException("Invalid value for databaseSchema: " + databaseSchema);
    }
  }
}
