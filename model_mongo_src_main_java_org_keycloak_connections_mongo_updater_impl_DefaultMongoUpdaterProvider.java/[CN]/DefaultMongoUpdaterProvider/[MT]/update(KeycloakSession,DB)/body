{
  log.debug("Starting database update");
  try {
    boolean changeLogExists=db.collectionExists(CHANGE_LOG_COLLECTION);
    boolean realmExists=db.collectionExists("realms");
    DBCollection changeLog=db.getCollection(CHANGE_LOG_COLLECTION);
    List<String> executed=new LinkedList<String>();
    if (!changeLogExists && realmExists) {
      Update1_0_0_Final u=new Update1_0_0_Final();
      executed.add(u.getId());
      createLog(changeLog,u,1);
    }
 else     if (changeLogExists) {
      DBCursor cursor=changeLog.find().sort(new BasicDBObject("orderExecuted",1));
      while (cursor.hasNext()) {
        executed.add((String)cursor.next().get("_id"));
      }
    }
    List<Update> updatesToRun=new LinkedList<Update>();
    for (    Class<? extends Update> updateClass : updates) {
      Update u=updateClass.newInstance();
      if (!executed.contains(u.getId())) {
        updatesToRun.add(u);
      }
    }
    if (!updatesToRun.isEmpty()) {
      if (executed.isEmpty()) {
        log.info("Initializing database schema");
      }
 else {
        if (log.isDebugEnabled()) {
          log.infov("Updating database from {0} to {1}",executed.get(executed.size() - 1),updatesToRun.get(updatesToRun.size() - 1).getId());
        }
 else {
          log.debugv("Updating database");
        }
      }
      int order=executed.size();
      for (      Update u : updatesToRun) {
        log.debugv("Executing updates for {0}",u.getId());
        u.setLog(log);
        u.setDb(db);
        u.update(session);
        createLog(changeLog,u,++order);
        log.debugv("Completed updates for {0}",u.getId());
      }
      log.debug("Completed database update");
    }
 else {
      log.debug("Skip database update. Database is already up to date");
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Failed to update database",e);
  }
}
