{
  Map<String,Integer> map=new MapReduceTask(sessionCache).mappedWith(ClientSessionMapper.create(realm.getId()).client(client.getId()).emitUserSessionAndTimestamp()).reducedWith(new LargestResultReducer()).execute();
  List<Map.Entry<String,Integer>> sessionTimestamps=new LinkedList<Map.Entry<String,Integer>>(map.entrySet());
  Collections.sort(sessionTimestamps,new Comparator<Map.Entry<String,Integer>>(){
    @Override public int compare(    Map.Entry<String,Integer> e1,    Map.Entry<String,Integer> e2){
      return e1.getValue().compareTo(e2.getValue());
    }
  }
);
  if (firstResult != -1 || maxResults == -1) {
    if (firstResult == -1) {
      firstResult=0;
    }
    if (maxResults == -1) {
      maxResults=Integer.MAX_VALUE;
    }
    if (firstResult > sessionTimestamps.size()) {
      return Collections.emptyList();
    }
    int toIndex=(firstResult + maxResults) < sessionTimestamps.size() ? firstResult + maxResults : sessionTimestamps.size();
    sessionTimestamps=sessionTimestamps.subList(firstResult,toIndex);
  }
  List<UserSessionModel> userSessions=new LinkedList<UserSessionModel>();
  for (  Map.Entry<String,Integer> e : sessionTimestamps) {
    UserSessionEntity userSessionEntity=(UserSessionEntity)sessionCache.get(e.getKey());
    if (userSessionEntity != null) {
      userSessions.add(wrap(realm,userSessionEntity));
    }
  }
  return userSessions;
}
