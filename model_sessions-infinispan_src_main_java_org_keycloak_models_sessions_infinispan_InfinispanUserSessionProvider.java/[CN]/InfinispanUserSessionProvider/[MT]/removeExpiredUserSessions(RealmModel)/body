{
  UserSessionPersisterProvider persister=session.getProvider(UserSessionPersisterProvider.class);
  int expired=Time.currentTime() - realm.getSsoSessionMaxLifespan();
  int expiredRefresh=Time.currentTime() - realm.getSsoSessionIdleTimeout();
  int expiredOffline=Time.currentTime() - realm.getOfflineSessionIdleTimeout();
  int expiredDettachedClientSession=Time.currentTime() - RealmInfoUtil.getDettachedClientSessionLifespan(realm);
  Map<String,String> map=new MapReduceTask(sessionCache).mappedWith(UserSessionMapper.create(realm.getId()).expired(expired,expiredRefresh).emitKey()).reducedWith(new FirstResultReducer()).execute();
  for (  String id : map.keySet()) {
    removeUserSession(realm,id);
  }
  map=new MapReduceTask(sessionCache).mappedWith(ClientSessionMapper.create(realm.getId()).expiredRefresh(expiredDettachedClientSession).requireNullUserSession(true).emitKey()).reducedWith(new FirstResultReducer()).execute();
  for (  String id : map.keySet()) {
    tx.remove(sessionCache,id);
  }
  map=new MapReduceTask(offlineSessionCache).mappedWith(UserSessionMapper.create(realm.getId()).expired(null,expiredOffline).emitKey()).reducedWith(new FirstResultReducer()).execute();
  for (  String id : map.keySet()) {
    tx.remove(offlineSessionCache,id);
    persister.removeUserSession(id,true);
  }
  map=new MapReduceTask(offlineSessionCache).mappedWith(new ClientSessionsOfUserSessionMapper(realm.getId(),new HashSet<>(map.keySet())).emitKey()).reducedWith(new FirstResultReducer()).execute();
  for (  String id : map.keySet()) {
    tx.remove(offlineSessionCache,id);
  }
}
