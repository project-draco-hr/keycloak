{
  session=EasyMock.createMock(KeycloakSession.class);
  model=EasyMock.createMock(ModelProvider.class);
  EasyMock.expect(session.model()).andReturn(model).anyTimes();
  realm=EasyMock.createMock(RealmModel.class);
  EasyMock.expect(realm.getId()).andReturn("realm-id").anyTimes();
  EasyMock.expect(realm.getSsoSessionIdleTimeout()).andReturn(1).anyTimes();
  EasyMock.expect(model.getRealm("realm-id")).andReturn(realm).anyTimes();
  user=EasyMock.createMock(UserModel.class);
  EasyMock.expect(user.getId()).andReturn("user-id").anyTimes();
  EasyMock.expect(model.getUserById("user-id",realm)).andReturn(user).anyTimes();
  app1=EasyMock.createMock(ApplicationModel.class);
  EasyMock.expect(app1.getClientId()).andReturn("app1").anyTimes();
  EasyMock.expect(realm.findClient("app1")).andReturn(app1).anyTimes();
  app2=EasyMock.createMock(ApplicationModel.class);
  EasyMock.expect(app2.getClientId()).andReturn("app2").anyTimes();
  EasyMock.expect(realm.findClient("app2")).andReturn(app2).anyTimes();
  client1=EasyMock.createMock(OAuthClientModel.class);
  EasyMock.expect(client1.getClientId()).andReturn("client1").anyTimes();
  EasyMock.expect(realm.findClient("client1")).andReturn(client1).anyTimes();
  EasyMock.replay(session,model,realm,user,app1,app2,client1);
  provider=createProvider(session);
  provider.getTransaction().begin();
}
