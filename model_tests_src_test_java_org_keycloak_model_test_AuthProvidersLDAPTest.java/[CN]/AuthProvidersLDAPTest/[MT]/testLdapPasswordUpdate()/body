{
  setupAuthenticationProviders();
  LDAPTestUtils.setLdapPassword(session,realm,"johnkeycloak","password");
  MultivaluedMap<String,String> formData=AuthProvidersExternalModelTest.createFormData("johnkeycloak","password");
  Assert.assertEquals(AuthenticationManager.AuthenticationStatus.SUCCESS,am.authenticateForm(session,null,realm,formData));
  AuthenticationProviderManager authProviderManager=AuthenticationProviderManager.getManager(realm,session);
  UserModel john=session.users().getUserByUsername("johnkeycloak",realm);
  try {
    Assert.assertTrue(authProviderManager.updatePassword(john,"password-updated"));
  }
 catch (  AuthenticationProviderException ape) {
    ape.printStackTrace();
    Assert.fail("Error not expected");
  }
  formData=AuthProvidersExternalModelTest.createFormData("johnkeycloak","password-updated");
  Assert.assertEquals(AuthenticationManager.AuthenticationStatus.SUCCESS,am.authenticateForm(session,null,realm,formData));
  Assert.assertFalse(realm.validatePassword(john,"password-updated"));
  AuthProvidersExternalModelTest.setPasswordUpdateForProvider(false,AuthProviderConstants.PROVIDER_NAME_PICKETLINK,realm);
  try {
    Assert.assertFalse(authProviderManager.updatePassword(john,"password-updated2"));
  }
 catch (  AuthenticationProviderException ape) {
    ape.printStackTrace();
    Assert.fail("Error not expected");
  }
  formData=AuthProvidersExternalModelTest.createFormData("johnkeycloak","password-updated2");
  Assert.assertEquals(AuthenticationManager.AuthenticationStatus.INVALID_CREDENTIALS,am.authenticateForm(session,null,realm,formData));
}
