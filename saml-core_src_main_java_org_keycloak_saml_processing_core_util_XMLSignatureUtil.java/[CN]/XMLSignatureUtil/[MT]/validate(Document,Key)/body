{
  if (signedDoc == null)   throw logger.nullArgumentError("Signed Document");
  propagateIDAttributeSetup(signedDoc.getDocumentElement(),signedDoc.getDocumentElement());
  NodeList nl=signedDoc.getElementsByTagNameNS(XMLSignature.XMLNS,"Signature");
  if (nl == null || nl.getLength() == 0) {
    logger.debug("Cannot find Signature element");
    return false;
  }
  if (publicKey == null)   throw logger.nullValueError("Public Key");
  int signedAssertions=0;
  String assertionNameSpaceUri=null;
  for (int i=0; i < nl.getLength(); i++) {
    Node signatureNode=nl.item(i);
    Node parent=signatureNode.getParentNode();
    if (parent != null && JBossSAMLConstants.ASSERTION.get().equals(parent.getLocalName())) {
      ++signedAssertions;
      if (assertionNameSpaceUri == null) {
        assertionNameSpaceUri=parent.getNamespaceURI();
      }
    }
    DOMValidateContext valContext=new DOMValidateContext(publicKey,nl.item(i));
    XMLSignature signature=fac.unmarshalXMLSignature(valContext);
    boolean coreValidity=signature.validate(valContext);
    if (!coreValidity) {
      if (logger.isTraceEnabled()) {
        boolean sv=signature.getSignatureValue().validate(valContext);
        logger.trace("Signature validation status: " + sv);
        List<Reference> references=signature.getSignedInfo().getReferences();
        for (        Reference ref : references) {
          logger.trace("[Ref id=" + ref.getId() + ":uri="+ ref.getURI()+ "]validity status:"+ ref.validate(valContext));
        }
      }
      return false;
    }
  }
  NodeList assertions=signedDoc.getElementsByTagNameNS(assertionNameSpaceUri,JBossSAMLConstants.ASSERTION.get());
  if (signedAssertions > 0 && assertions != null && assertions.getLength() != signedAssertions) {
    if (logger.isDebugEnabled()) {
      logger.debug("SAML Response document may contain malicious assertions. Signature validation will fail.");
    }
    return false;
  }
  return true;
}
