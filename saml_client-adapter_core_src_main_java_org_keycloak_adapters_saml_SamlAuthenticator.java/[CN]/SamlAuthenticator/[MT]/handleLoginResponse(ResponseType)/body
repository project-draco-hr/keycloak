{
  AssertionType assertion=null;
  try {
    assertion=AssertionUtil.getAssertion(responseType,deployment.getDecryptionKey());
    if (AssertionUtil.hasExpired(assertion)) {
      return initiateLogin();
    }
  }
 catch (  Exception e) {
    log.error("Error extracting SAML assertion, e");
    return AuthOutcome.FAILED;
  }
  SubjectType subject=assertion.getSubject();
  SubjectType.STSubType subType=subject.getSubType();
  NameIDType subjectNameID=(NameIDType)subType.getBaseID();
  String principalName=subjectNameID.getValue();
  final Set<String> roles=new HashSet<>();
  MultivaluedHashMap<String,String> attributes=new MultivaluedHashMap<>();
  MultivaluedHashMap<String,String> friendlyAttributes=new MultivaluedHashMap<>();
  Set<StatementAbstractType> statements=assertion.getStatements();
  for (  StatementAbstractType statement : statements) {
    if (statement instanceof AttributeStatementType) {
      AttributeStatementType attributeStatement=(AttributeStatementType)statement;
      List<AttributeStatementType.ASTChoiceType> attList=attributeStatement.getAttributes();
      for (      AttributeStatementType.ASTChoiceType obj : attList) {
        AttributeType attr=obj.getAttribute();
        if (isRole(attr)) {
          List<Object> attributeValues=attr.getAttributeValue();
          if (attributeValues != null) {
            for (            Object attrValue : attributeValues) {
              String role=getAttributeValue(attrValue);
              log.debugv("Add role: {0}",role);
              roles.add(role);
            }
          }
        }
 else {
          List<Object> attributeValues=attr.getAttributeValue();
          if (attributeValues != null) {
            for (            Object attrValue : attributeValues) {
              String value=getAttributeValue(attrValue);
              if (attr.getName() != null) {
                attributes.add(attr.getName(),value);
              }
              if (attr.getFriendlyName() != null) {
                friendlyAttributes.add(attr.getFriendlyName(),value);
              }
            }
          }
        }
      }
    }
  }
  if (deployment.getPrincipalNamePolicy() == SamlDeployment.PrincipalNamePolicy.FROM_ATTRIBUTE) {
    if (deployment.getPrincipalAttributeName() != null) {
      String attribute=attributes.getFirst(deployment.getPrincipalAttributeName());
      if (attribute != null)       principalName=attribute;
 else {
        attribute=friendlyAttributes.getFirst(deployment.getPrincipalAttributeName());
        if (attribute != null)         principalName=attribute;
      }
    }
  }
  AuthnStatementType authn=null;
  for (  Object statement : assertion.getStatements()) {
    if (statement instanceof AuthnStatementType) {
      authn=(AuthnStatementType)statement;
      break;
    }
  }
  URI nameFormat=subjectNameID.getFormat();
  String nameFormatString=nameFormat == null ? JBossSAMLURIConstants.NAMEID_FORMAT_UNSPECIFIED.get() : nameFormat.toString();
  final SamlPrincipal principal=new SamlPrincipal(principalName,principalName,nameFormatString,attributes,friendlyAttributes);
  String index=authn == null ? null : authn.getSessionIndex();
  final String sessionIndex=index;
  SamlSession account=new SamlSession(principal,roles,sessionIndex);
  sessionStore.saveAccount(account);
  completeAuthentication(account);
  String redirectUri=sessionStore.getRedirectUri();
  if (redirectUri != null) {
    facade.getResponse().setHeader("Location",redirectUri);
    facade.getResponse().setStatus(302);
    facade.getResponse().end();
  }
 else {
    log.debug("IDP initiated invocation");
  }
  log.debug("AUTHENTICATED authn");
  return AuthOutcome.AUTHENTICATED;
}
