{
  SAMLDocumentHolder holder=null;
  boolean postBinding=false;
  String requestUri=facade.getRequest().getURI();
  if (facade.getRequest().getMethod().equalsIgnoreCase("GET")) {
    int index=requestUri.indexOf('?');
    if (index > -1) {
      requestUri=requestUri.substring(0,index);
    }
    holder=extractRedirectBindingResponse(samlResponse);
  }
 else {
    postBinding=true;
    holder=extractPostBindingResponse(samlResponse);
  }
  final StatusResponseType statusResponse=(StatusResponseType)holder.getSamlObject();
  if (!requestUri.equals(statusResponse.getDestination())) {
    log.error("Request URI does not match SAML request destination");
    return AuthOutcome.FAILED;
  }
  if (statusResponse instanceof ResponseType) {
    try {
      if (deployment.getIDP().getSingleSignOnService().validateResponseSignature()) {
        try {
          validateSamlSignature(holder,postBinding,GeneralConstants.SAML_RESPONSE_KEY);
        }
 catch (        VerificationException e) {
          log.error("Failed to verify saml response signature",e);
          challenge=new AuthChallenge(){
            @Override public boolean challenge(            HttpFacade exchange){
              SamlAuthError error=new SamlAuthError(SamlAuthError.Reason.INVALID_SIGNATURE);
              exchange.getRequest().setError(error);
              exchange.getResponse().sendError(403);
              return true;
            }
            @Override public int getResponseCode(){
              return 403;
            }
          }
;
          return AuthOutcome.FAILED;
        }
      }
      return handleLoginResponse((ResponseType)statusResponse);
    }
  finally {
      sessionStore.setCurrentAction(SamlSessionStore.CurrentAction.NONE);
    }
  }
 else {
    if (sessionStore.isLoggingOut()) {
      try {
        if (deployment.getIDP().getSingleLogoutService().validateResponseSignature()) {
          try {
            validateSamlSignature(holder,postBinding,GeneralConstants.SAML_RESPONSE_KEY);
          }
 catch (          VerificationException e) {
            log.error("Failed to verify saml response signature",e);
            return AuthOutcome.FAILED;
          }
        }
        return handleLogoutResponse(holder,statusResponse,relayState);
      }
  finally {
        sessionStore.setCurrentAction(SamlSessionStore.CurrentAction.NONE);
      }
    }
 else     if (sessionStore.isLoggingIn()) {
      try {
        challenge=new AuthChallenge(){
          @Override public boolean challenge(          HttpFacade exchange){
            SamlAuthError error=new SamlAuthError(SamlAuthError.Reason.ERROR_STATUS,statusResponse);
            exchange.getRequest().setError(error);
            exchange.getResponse().sendError(403);
            return true;
          }
          @Override public int getResponseCode(){
            return 403;
          }
        }
;
        return AuthOutcome.FAILED;
      }
  finally {
        sessionStore.setCurrentAction(SamlSessionStore.CurrentAction.NONE);
      }
    }
    return AuthOutcome.NOT_ATTEMPTED;
  }
}
