{
  ClientSessionModel clientSession=accessCode.getClientSession();
  ClientModel client=clientSession.getClient();
  String requestID=clientSession.getNote(SAML_REQUEST_ID);
  String relayState=clientSession.getNote(GeneralConstants.RELAY_STATE);
  String redirectUri=clientSession.getRedirectUri();
  String responseIssuer=getResponseIssuer(realm);
  String nameIdFormat=getNameIdFormat(clientSession);
  String nameId=getNameId(nameIdFormat,clientSession,userSession);
  clientSession.setNote(SAML_NAME_ID,nameId);
  clientSession.setNote(SAML_NAME_ID_FORMAT,nameIdFormat);
  SALM2LoginResponseBuilder builder=new SALM2LoginResponseBuilder();
  builder.requestID(requestID).destination(redirectUri).issuer(responseIssuer).requestIssuer(clientSession.getClient().getClientId()).nameIdentifier(nameIdFormat,nameId).authMethod(JBossSAMLURIConstants.AC_UNSPECIFIED.get());
  initClaims(builder,clientSession.getClient(),userSession.getUser());
  if (clientSession.getRoles() != null) {
    if (multivaluedRoles(client)) {
      builder.multiValuedRoles(true);
    }
    for (    String roleId : clientSession.getRoles()) {
      RoleModel roleModel=clientSession.getRealm().getRoleById(roleId);
      builder.roles(roleModel.getName());
    }
  }
  if (!includeAuthnStatement(client)) {
    builder.disableAuthnStatement(true);
  }
  Document samlDocument=null;
  try {
    ResponseType samlModel=builder.buildModel();
    transformAttributeStatement(session,samlModel,client,userSession,clientSession);
    samlModel=transformLoginResponse(session,samlModel,client,userSession,clientSession);
    samlDocument=builder.buildDocument(samlModel);
  }
 catch (  Exception e) {
    logger.error("failed",e);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Failed to process response");
  }
  SAML2BindingBuilder2 bindingBuilder=new SAML2BindingBuilder2();
  bindingBuilder.relayState(relayState);
  if (requiresRealmSignature(client)) {
    bindingBuilder.signatureAlgorithm(getSignatureAlgorithm(client)).signWith(realm.getPrivateKey(),realm.getPublicKey(),realm.getCertificate()).signDocument();
  }
  if (requiresAssertionSignature(client)) {
    bindingBuilder.signatureAlgorithm(getSignatureAlgorithm(client)).signWith(realm.getPrivateKey(),realm.getPublicKey(),realm.getCertificate()).signAssertions();
  }
  if (requiresEncryption(client)) {
    PublicKey publicKey=null;
    try {
      publicKey=SamlProtocolUtils.getEncryptionValidationKey(client);
    }
 catch (    Exception e) {
      logger.error("failed",e);
      return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Failed to process response");
    }
    bindingBuilder.encrypt(publicKey);
  }
  try {
    if (isPostBinding(clientSession)) {
      return bindingBuilder.postBinding(samlDocument).response(redirectUri);
    }
 else {
      return bindingBuilder.redirectBinding(samlDocument).response(redirectUri);
    }
  }
 catch (  Exception e) {
    logger.error("failed",e);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Failed to process response");
  }
}
