{
  ClientSessionModel clientSession=accessCode.getClientSession();
  ClientModel client=clientSession.getClient();
  String requestID=clientSession.getNote(SAML_REQUEST_ID);
  String relayState=clientSession.getNote(GeneralConstants.RELAY_STATE);
  String redirectUri=clientSession.getRedirectUri();
  String responseIssuer=getResponseIssuer(realm);
  String nameIdFormat=getNameIdFormat(clientSession);
  String nameId=getNameId(nameIdFormat,clientSession,userSession);
  clientSession.setNote(SAML_NAME_ID,nameId);
  clientSession.setNote(SAML_NAME_ID_FORMAT,nameIdFormat);
  SAML2LoginResponseBuilder builder=new SAML2LoginResponseBuilder();
  builder.requestID(requestID).destination(redirectUri).issuer(responseIssuer).assertionExpiration(realm.getAccessCodeLifespan()).subjectExpiration(realm.getAccessTokenLifespan()).sessionIndex(clientSession.getId()).requestIssuer(clientSession.getClient().getClientId()).nameIdentifier(nameIdFormat,nameId).authMethod(JBossSAMLURIConstants.AC_UNSPECIFIED.get());
  if (!includeAuthnStatement(client)) {
    builder.disableAuthnStatement(true);
  }
  List<ProtocolMapperProcessor<SAMLAttributeStatementMapper>> attributeStatementMappers=new LinkedList<>();
  List<ProtocolMapperProcessor<SAMLLoginResponseMapper>> loginResponseMappers=new LinkedList<>();
  ProtocolMapperProcessor<SAMLRoleListMapper> roleListMapper=null;
  Set<ProtocolMapperModel> mappings=accessCode.getRequestedProtocolMappers();
  for (  ProtocolMapperModel mapping : mappings) {
    ProtocolMapper mapper=(ProtocolMapper)session.getKeycloakSessionFactory().getProviderFactory(ProtocolMapper.class,mapping.getProtocolMapper());
    if (mapper == null)     continue;
    if (mapper instanceof SAMLAttributeStatementMapper) {
      attributeStatementMappers.add(new ProtocolMapperProcessor<SAMLAttributeStatementMapper>((SAMLAttributeStatementMapper)mapper,mapping));
    }
    if (mapper instanceof SAMLLoginResponseMapper) {
      loginResponseMappers.add(new ProtocolMapperProcessor<SAMLLoginResponseMapper>((SAMLLoginResponseMapper)mapper,mapping));
    }
    if (mapper instanceof SAMLRoleListMapper) {
      roleListMapper=new ProtocolMapperProcessor<SAMLRoleListMapper>((SAMLRoleListMapper)mapper,mapping);
    }
  }
  Document samlDocument=null;
  try {
    ResponseType samlModel=builder.buildModel();
    transformAttributeStatement(attributeStatementMappers,samlModel,session,userSession,clientSession);
    populateRoles(roleListMapper,samlModel,session,userSession,clientSession);
    samlModel=transformLoginResponse(loginResponseMappers,samlModel,session,userSession,clientSession);
    samlDocument=builder.buildDocument(samlModel);
  }
 catch (  Exception e) {
    logger.error("failed",e);
    return ErrorPage.error(session,Messages.FAILED_TO_PROCESS_RESPONSE);
  }
  SAML2BindingBuilder2 bindingBuilder=new SAML2BindingBuilder2();
  bindingBuilder.relayState(relayState);
  if (requiresRealmSignature(client)) {
    String canonicalization=client.getAttribute(SAML_CANONICALIZATION_METHOD_ATTRIBUTE);
    if (canonicalization != null) {
      bindingBuilder.canonicalizationMethod(canonicalization);
    }
    bindingBuilder.signatureAlgorithm(getSignatureAlgorithm(client)).signWith(realm.getPrivateKey(),realm.getPublicKey(),realm.getCertificate()).signDocument();
  }
  if (requiresAssertionSignature(client)) {
    String canonicalization=client.getAttribute(SAML_CANONICALIZATION_METHOD_ATTRIBUTE);
    if (canonicalization != null) {
      bindingBuilder.canonicalizationMethod(canonicalization);
    }
    bindingBuilder.signatureAlgorithm(getSignatureAlgorithm(client)).signWith(realm.getPrivateKey(),realm.getPublicKey(),realm.getCertificate()).signAssertions();
  }
  if (requiresEncryption(client)) {
    PublicKey publicKey=null;
    try {
      publicKey=SamlProtocolUtils.getEncryptionValidationKey(client);
    }
 catch (    Exception e) {
      logger.error("failed",e);
      return ErrorPage.error(session,Messages.FAILED_TO_PROCESS_RESPONSE);
    }
    bindingBuilder.encrypt(publicKey);
  }
  try {
    if (isPostBinding(clientSession)) {
      return bindingBuilder.postBinding(samlDocument).response(redirectUri);
    }
 else {
      return bindingBuilder.redirectBinding(samlDocument).response(redirectUri);
    }
  }
 catch (  Exception e) {
    logger.error("failed",e);
    return ErrorPage.error(session,Messages.FAILED_TO_PROCESS_RESPONSE);
  }
}
