{
  ClientSessionModel clientSession=accessCode.getClientSession();
  String requestID=clientSession.getNote("REQUEST_ID");
  String relayState=clientSession.getNote(GeneralConstants.RELAY_STATE);
  String redirectUri=clientSession.getRedirectUri();
  String responseIssuer=getResponseIssuer(realm);
  SALM2LoginResponseBuilder builder=new SALM2LoginResponseBuilder();
  builder.requestID(requestID).relayState(relayState).destination(redirectUri).responseIssuer(responseIssuer).requestIssuer(clientSession.getClient().getClientId()).userPrincipal(userSession.getUser().getUsername()).attribute(X500SAMLProfileConstants.USERID.getFriendlyName(),userSession.getUser().getId()).authMethod(JBossSAMLURIConstants.AC_UNSPECIFIED.get());
  initClaims(builder,clientSession.getClient(),userSession.getUser());
  if (clientSession.getRoles() != null) {
    for (    String roleId : clientSession.getRoles()) {
      RoleModel roleModel=clientSession.getRealm().getRoleById(roleId);
      builder.roles(roleModel.getName());
    }
  }
  ClientModel client=clientSession.getClient();
  if (requiresRealmSignature(client)) {
    builder.signatureAlgorithm(getSignatureAlgorithm(client));
    builder.sign(realm.getPrivateKey(),realm.getPublicKey());
  }
  if (requiresEncryption(client)) {
    PublicKey publicKey=null;
    try {
      publicKey=PemUtils.decodePublicKey(client.getAttribute(ClientModel.PUBLIC_KEY));
    }
 catch (    Exception e) {
      logger.error("failed",e);
      return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Failed to process response");
    }
    builder.encrypt(publicKey);
  }
  try {
    if (isPostBinding(clientSession)) {
      return builder.postBinding().response();
    }
 else {
      return builder.redirectBinding().response();
    }
  }
 catch (  Exception e) {
    logger.error("failed",e);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Failed to process response");
  }
}
