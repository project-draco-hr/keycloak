{
  ClientModel client=clientSession.getClient();
  String logoutUrl=getLogoutServiceUrl(uriInfo,client,SAML_POST_BINDING);
  if (logoutUrl == null) {
    logger.warnv("Can't do backchannel logout. No SingleLogoutService POST Binding registered for client: {1}",client.getClientId());
    return;
  }
  SAML2LogoutRequestBuilder logoutBuilder=createLogoutRequest(logoutUrl,clientSession,client);
  String logoutRequestString=null;
  try {
    JaxrsSAML2BindingBuilder binding=createBindingBuilder(client);
    logoutRequestString=binding.postBinding(logoutBuilder.buildDocument()).encoded();
  }
 catch (  Exception e) {
    logger.warn("failed to send saml logout",e);
    return;
  }
  HttpClient httpClient=session.getProvider(HttpClientProvider.class).getHttpClient();
  for (int i=0; i < 2; i++) {
    try {
      List<NameValuePair> formparams=new ArrayList<NameValuePair>();
      formparams.add(new BasicNameValuePair(GeneralConstants.SAML_REQUEST_KEY,logoutRequestString));
      formparams.add(new BasicNameValuePair("BACK_CHANNEL_LOGOUT","BACK_CHANNEL_LOGOUT"));
      UrlEncodedFormEntity form=new UrlEncodedFormEntity(formparams,"UTF-8");
      HttpPost post=new HttpPost(logoutUrl);
      post.setEntity(form);
      HttpResponse response=httpClient.execute(post);
      try {
        int status=response.getStatusLine().getStatusCode();
        if (status == 302 && !logoutUrl.endsWith("/")) {
          String redirect=response.getFirstHeader(HttpHeaders.LOCATION).getValue();
          String withSlash=logoutUrl + "/";
          if (withSlash.equals(redirect)) {
            logoutUrl=withSlash;
            continue;
          }
        }
      }
  finally {
        HttpEntity entity=response.getEntity();
        if (entity != null) {
          InputStream is=entity.getContent();
          if (is != null)           is.close();
        }
      }
    }
 catch (    IOException e) {
      logger.warn("failed to send saml logout",e);
    }
    break;
  }
}
