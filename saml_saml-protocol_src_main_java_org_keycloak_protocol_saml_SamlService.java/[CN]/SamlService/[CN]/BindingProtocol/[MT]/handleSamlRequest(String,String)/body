{
  SAMLDocumentHolder documentHolder=extractRequestDocument(samlRequest);
  if (documentHolder == null) {
    event.event(EventType.LOGIN);
    event.error(Errors.INVALID_TOKEN);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,headers,Messages.INVALID_REQUEST);
  }
  SAML2Object samlObject=documentHolder.getSamlObject();
  RequestAbstractType requestAbstractType=(RequestAbstractType)samlObject;
  String issuer=requestAbstractType.getIssuer().getValue();
  ClientModel client=realm.findClient(issuer);
  if (client == null) {
    event.event(EventType.LOGIN);
    event.error(Errors.CLIENT_NOT_FOUND);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,headers,Messages.UNKNOWN_LOGIN_REQUESTER);
  }
  if (!client.isEnabled()) {
    event.event(EventType.LOGIN);
    event.error(Errors.CLIENT_DISABLED);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,headers,Messages.LOGIN_REQUESTER_NOT_ENABLED);
  }
  if ((client instanceof ApplicationModel) && ((ApplicationModel)client).isBearerOnly()) {
    event.event(EventType.LOGIN);
    event.error(Errors.NOT_ALLOWED);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,headers,Messages.BEARER_ONLY);
  }
  if (client.isDirectGrantsOnly()) {
    event.event(EventType.LOGIN);
    event.error(Errors.NOT_ALLOWED);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,headers,Messages.DIRECT_GRANTS_ONLY);
  }
  try {
    verifySignature(documentHolder,client);
  }
 catch (  VerificationException e) {
    SamlService.logger.error("request validation failed",e);
    event.event(EventType.LOGIN);
    event.error(Errors.INVALID_SIGNATURE);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,headers,Messages.INVALID_REQUESTER);
  }
  logger.debug("verified request");
  if (samlObject instanceof AuthnRequestType) {
    logger.debug("** login request");
    event.event(EventType.LOGIN);
    AuthnRequestType authn=(AuthnRequestType)samlObject;
    return loginRequest(relayState,authn,client);
  }
 else   if (samlObject instanceof LogoutRequestType) {
    logger.debug("** logout request");
    event.event(EventType.LOGOUT);
    LogoutRequestType logout=(LogoutRequestType)samlObject;
    return logoutRequest(logout,client,relayState);
  }
 else {
    event.event(EventType.LOGIN);
    event.error(Errors.INVALID_TOKEN);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,headers,Messages.INVALID_REQUEST);
  }
}
