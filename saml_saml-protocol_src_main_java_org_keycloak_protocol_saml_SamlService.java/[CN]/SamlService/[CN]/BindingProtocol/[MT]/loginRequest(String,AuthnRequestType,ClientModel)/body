{
  SamlClient samlClient=new SamlClient(client);
  if (requestAbstractType.getDestination() != null && !uriInfo.getAbsolutePath().equals(requestAbstractType.getDestination())) {
    event.detail(Details.REASON,"invalid_destination");
    event.error(Errors.INVALID_SAML_AUTHN_REQUEST);
    return ErrorPage.error(session,Messages.INVALID_REQUEST);
  }
  String bindingType=getBindingType(requestAbstractType);
  if (samlClient.forcePostBinding())   bindingType=SamlProtocol.SAML_POST_BINDING;
  String redirect=null;
  URI redirectUri=requestAbstractType.getAssertionConsumerServiceURL();
  if (redirectUri != null && !"null".equals(redirectUri)) {
    redirect=RedirectUtils.verifyRedirectUri(uriInfo,redirectUri.toString(),realm,client);
  }
 else {
    if (bindingType.equals(SamlProtocol.SAML_POST_BINDING)) {
      redirect=client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_POST_ATTRIBUTE);
    }
 else {
      redirect=client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_REDIRECT_ATTRIBUTE);
    }
    if (redirect == null) {
      redirect=client.getManagementUrl();
    }
  }
  if (redirect == null) {
    event.error(Errors.INVALID_REDIRECT_URI);
    return ErrorPage.error(session,Messages.INVALID_REDIRECT_URI);
  }
  ClientSessionModel clientSession=session.sessions().createClientSession(realm,client);
  clientSession.setAuthMethod(SamlProtocol.LOGIN_PROTOCOL);
  clientSession.setRedirectUri(redirect);
  clientSession.setAction(ClientSessionModel.Action.AUTHENTICATE.name());
  clientSession.setNote(ClientSessionCode.ACTION_KEY,KeycloakModelUtils.generateCodeSecret());
  clientSession.setNote(SamlProtocol.SAML_BINDING,bindingType);
  clientSession.setNote(GeneralConstants.RELAY_STATE,relayState);
  clientSession.setNote(SamlProtocol.SAML_REQUEST_ID,requestAbstractType.getID());
  NameIDPolicyType nameIdPolicy=requestAbstractType.getNameIDPolicy();
  if (nameIdPolicy != null && !samlClient.forceNameIDFormat()) {
    String nameIdFormat=nameIdPolicy.getFormat().toString();
    if (isSupportedNameIdFormat(nameIdFormat)) {
      clientSession.setNote(GeneralConstants.NAMEID_FORMAT,nameIdFormat);
    }
 else {
      event.detail(Details.REASON,"unsupported_nameid_format");
      event.error(Errors.INVALID_SAML_AUTHN_REQUEST);
      return ErrorPage.error(session,Messages.UNSUPPORTED_NAME_ID_FORMAT);
    }
  }
  return newBrowserAuthentication(clientSession,requestAbstractType.isIsPassive());
}
