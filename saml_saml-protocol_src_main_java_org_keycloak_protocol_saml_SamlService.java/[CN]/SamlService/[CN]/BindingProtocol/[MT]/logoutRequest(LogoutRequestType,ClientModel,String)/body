{
  if (logoutRequest.getDestination() != null && !uriInfo.getAbsolutePath().equals(logoutRequest.getDestination())) {
    event.detail(Details.REASON,"invalid_destination");
    event.error(Errors.INVALID_SAML_LOGOUT_REQUEST);
    return ErrorPage.error(session,Messages.INVALID_REQUEST);
  }
  AuthenticationManager.AuthResult authResult=authManager.authenticateIdentityCookie(session,realm,uriInfo,clientConnection,headers,false);
  if (authResult != null) {
    String logoutBinding=getBindingType();
    if ("true".equals(client.getAttribute(SamlProtocol.SAML_FORCE_POST_BINDING)))     logoutBinding=SamlProtocol.SAML_POST_BINDING;
    String bindingUri=SamlProtocol.getLogoutServiceUrl(uriInfo,client,logoutBinding);
    UserSessionModel userSession=authResult.getSession();
    userSession.setNote(SamlProtocol.SAML_LOGOUT_BINDING_URI,bindingUri);
    if (SamlProtocol.requiresRealmSignature(client)) {
      userSession.setNote(SamlProtocol.SAML_LOGOUT_SIGNATURE_ALGORITHM,SamlProtocol.getSignatureAlgorithm(client).toString());
    }
    if (relayState != null)     userSession.setNote(SamlProtocol.SAML_LOGOUT_RELAY_STATE,relayState);
    userSession.setNote(SamlProtocol.SAML_LOGOUT_REQUEST_ID,logoutRequest.getID());
    userSession.setNote(SamlProtocol.SAML_LOGOUT_BINDING,logoutBinding);
    userSession.setNote(AuthenticationManager.KEYCLOAK_LOGOUT_PROTOCOL,SamlProtocol.LOGIN_PROTOCOL);
    for (    ClientSessionModel clientSession : userSession.getClientSessions()) {
      if (clientSession.getClient().getId().equals(client.getId())) {
        clientSession.setAction(ClientSessionModel.Action.LOGGED_OUT);
      }
    }
    logger.debug("browser Logout");
    return authManager.browserLogout(session,realm,userSession,uriInfo,clientConnection,headers);
  }
 else   if (logoutRequest.getSessionIndex() != null) {
    for (    String sessionIndex : logoutRequest.getSessionIndex()) {
      ClientSessionModel clientSession=session.sessions().getClientSession(realm,sessionIndex);
      if (clientSession == null)       continue;
      if (clientSession.getClient().getClientId().equals(client.getClientId())) {
        clientSession.setAction(ClientSessionModel.Action.LOGGED_OUT);
      }
      UserSessionModel userSession=clientSession.getUserSession();
      try {
        authManager.backchannelLogout(session,realm,userSession,uriInfo,clientConnection,headers,true);
      }
 catch (      Exception e) {
        logger.warn("Failure with backchannel logout",e);
      }
    }
  }
  String logoutBinding=getBindingType();
  String logoutBindingUri=SamlProtocol.getLogoutServiceUrl(uriInfo,client,logoutBinding);
  String logoutRelayState=relayState;
  SAML2LogoutResponseBuilder builder=new SAML2LogoutResponseBuilder();
  builder.logoutRequestID(logoutRequest.getID());
  builder.destination(logoutBindingUri);
  builder.issuer(RealmsResource.realmBaseUrl(uriInfo).build(realm.getName()).toString());
  builder.relayState(logoutRelayState);
  if (SamlProtocol.requiresRealmSignature(client)) {
    SignatureAlgorithm algorithm=SamlProtocol.getSignatureAlgorithm(client);
    builder.signatureAlgorithm(algorithm).signWith(realm.getPrivateKey(),realm.getPublicKey(),realm.getCertificate()).signDocument();
  }
  try {
    if (SamlProtocol.SAML_POST_BINDING.equals(logoutBinding)) {
      return builder.postBinding().response(logoutBindingUri);
    }
 else {
      return builder.redirectBinding().response(logoutBindingUri);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
