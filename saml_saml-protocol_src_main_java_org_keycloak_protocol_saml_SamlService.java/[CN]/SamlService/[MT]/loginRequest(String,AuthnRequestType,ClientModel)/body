{
  URI redirectUri=requestAbstractType.getAssertionConsumerServiceURL();
  String redirect=OpenIDConnectService.verifyRedirectUri(uriInfo,redirectUri.toString(),realm,client);
  if (redirect == null) {
    event.error(Errors.INVALID_REDIRECT_URI);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Invalid redirect_uri.");
  }
  ClientSessionModel clientSession=session.sessions().createClientSession(realm,client);
  clientSession.setAuthMethod(SalmProtocol.LOGIN_PROTOCOL);
  clientSession.setRedirectUri(redirect);
  clientSession.setAction(ClientSessionModel.Action.AUTHENTICATE);
  clientSession.setNote(SalmProtocol.SAML_BINDING,SalmProtocol.SAML_POST_BINDING);
  clientSession.setNote(GeneralConstants.RELAY_STATE,relayState);
  clientSession.setNote("REQUEST_ID",requestAbstractType.getID());
  Response response=authManager.checkNonFormAuthentication(session,clientSession,realm,uriInfo,request,clientConnection,headers,event);
  if (response != null)   return response;
  LoginFormsProvider forms=Flows.forms(session,realm,clientSession.getClient(),uriInfo).setClientSessionCode(new ClientSessionCode(realm,clientSession).getCode());
  String rememberMeUsername=AuthenticationManager.getRememberMeUsername(realm,headers);
  if (rememberMeUsername != null) {
    MultivaluedMap<String,String> formData=new MultivaluedMapImpl<String,String>();
    formData.add(AuthenticationManager.FORM_USERNAME,rememberMeUsername);
    formData.add("rememberMe","on");
    forms.setFormData(formData);
  }
  return forms.createLogin();
}
