{
  String issuer=requestAbstractType.getIssuer().getValue();
  ClientModel client=realm.findClient(issuer);
  if (client == null) {
    event.error(Errors.CLIENT_NOT_FOUND);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Unknown login requester.");
  }
  if (!client.isEnabled()) {
    event.error(Errors.CLIENT_DISABLED);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Login requester not enabled.");
  }
  if ((client instanceof ApplicationModel) && ((ApplicationModel)client).isBearerOnly()) {
    event.error(Errors.NOT_ALLOWED);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Bearer-only applications are not allowed to initiate browser login");
  }
  if (client.isDirectGrantsOnly()) {
    event.error(Errors.NOT_ALLOWED);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"direct-grants-only clients are not allowed to initiate browser login");
  }
  AuthenticationManager.AuthResult authResult=authManager.authenticateIdentityCookie(session,realm,uriInfo,clientConnection,headers,false);
  if (authResult != null) {
    logout(authResult.getSession());
  }
  String redirectUri=null;
  if (client instanceof ApplicationModel) {
    redirectUri=((ApplicationModel)client).getBaseUrl();
  }
  if (redirectUri != null) {
    String validatedRedirect=OpenIDConnectService.verifyRedirectUri(uriInfo,redirectUri,realm,client);
    ;
    if (validatedRedirect == null) {
      return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Invalid redirect uri.");
    }
    return Response.status(302).location(UriBuilder.fromUri(validatedRedirect).build()).build();
  }
 else {
    return Response.ok().build();
  }
}
