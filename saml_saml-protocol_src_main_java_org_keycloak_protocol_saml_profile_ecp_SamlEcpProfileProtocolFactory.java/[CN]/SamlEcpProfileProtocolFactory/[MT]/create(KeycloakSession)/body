{
  return new SamlProtocol(){
    @Override protected Response buildAuthenticatedResponse(    ClientSessionModel clientSession,    String redirectUri,    Document samlDocument,    JaxrsSAML2BindingBuilder bindingBuilder) throws ConfigurationException, ProcessingException, IOException {
      Document document=bindingBuilder.postBinding(samlDocument).getDocument();
      try {
        SoapMessageBuilder messageBuilder=Soap.createMessage().addNamespace(NS_PREFIX_SAML_ASSERTION,JBossSAMLURIConstants.ASSERTION_NSURI.get()).addNamespace(NS_PREFIX_SAML_PROTOCOL,JBossSAMLURIConstants.PROTOCOL_NSURI.get()).addNamespace(NS_PREFIX_PROFILE_ECP,JBossSAMLURIConstants.ECP_PROFILE.get());
        createEcpResponseHeader(redirectUri,messageBuilder);
        createRequestAuthenticatedHeader(clientSession,messageBuilder);
        messageBuilder.addToBody(document);
        return messageBuilder.build();
      }
 catch (      Exception e) {
        throw new RuntimeException("Error while creating SAML response.",e);
      }
    }
    private void createRequestAuthenticatedHeader(    ClientSessionModel clientSession,    SoapMessageBuilder messageBuilder){
      ClientModel client=clientSession.getClient();
      if ("true".equals(client.getAttribute(SamlProtocol.SAML_CLIENT_SIGNATURE_ATTRIBUTE))) {
        SOAPHeaderElement ecpRequestAuthenticated=messageBuilder.addHeader(JBossSAMLConstants.REQUEST_AUTHENTICATED.get(),NS_PREFIX_PROFILE_ECP);
        ecpRequestAuthenticated.setMustUnderstand(true);
        ecpRequestAuthenticated.setActor("http://schemas.xmlsoap.org/soap/actor/next");
      }
    }
    private void createEcpResponseHeader(    String redirectUri,    SoapMessageBuilder messageBuilder) throws SOAPException {
      SOAPHeaderElement ecpResponseHeader=messageBuilder.addHeader(JBossSAMLConstants.RESPONSE.get(),NS_PREFIX_PROFILE_ECP);
      ecpResponseHeader.setMustUnderstand(true);
      ecpResponseHeader.setActor("http://schemas.xmlsoap.org/soap/actor/next");
      ecpResponseHeader.addAttribute(messageBuilder.createName(JBossSAMLConstants.ASSERTION_CONSUMER_SERVICE_URL.get()),redirectUri);
    }
    @Override protected Response buildErrorResponse(    ClientSessionModel clientSession,    JaxrsSAML2BindingBuilder binding,    Document document) throws ConfigurationException, ProcessingException, IOException {
      return Soap.createMessage().addToBody(document).build();
    }
    @Override protected Response buildLogoutResponse(    UserSessionModel userSession,    String logoutBindingUri,    SAML2LogoutResponseBuilder builder,    JaxrsSAML2BindingBuilder binding) throws ConfigurationException, ProcessingException, IOException {
      return Soap.createFault().reason("Logout not supported.").build();
    }
  }
.setSession(session);
}
