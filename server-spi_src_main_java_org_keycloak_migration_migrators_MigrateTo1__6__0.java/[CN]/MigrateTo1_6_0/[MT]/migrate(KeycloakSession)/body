{
  MigrationProvider provider=session.getProvider(MigrationProvider.class);
  List<ProtocolMapperModel> builtinMappers=provider.getBuiltinMappers("openid-connect");
  ProtocolMapperModel localeMapper=null;
  for (  ProtocolMapperModel m : builtinMappers) {
    if (m.getName().equals("locale")) {
      localeMapper=m;
    }
  }
  if (localeMapper == null) {
    throw new RuntimeException("Can't find default locale mapper");
  }
  List<RealmModel> realms=session.realms().getRealms();
  for (  RealmModel realm : realms) {
    realm.setOfflineSessionIdleTimeout(Constants.DEFAULT_OFFLINE_SESSION_IDLE_TIMEOUT);
    if (realm.getRole(Constants.OFFLINE_ACCESS_ROLE) == null) {
      for (      RoleModel realmRole : realm.getRoles()) {
        realmRole.setScopeParamRequired(false);
      }
      for (      ClientModel client : realm.getClients()) {
        for (        RoleModel clientRole : client.getRoles()) {
          clientRole.setScopeParamRequired(false);
        }
      }
      KeycloakModelUtils.setupOfflineTokens(realm);
      RoleModel role=realm.getRole(Constants.OFFLINE_ACCESS_ROLE);
      session.users().grantToAllUsers(realm,role);
    }
    ClientModel adminConsoleClient=realm.getClientByClientId(Constants.ADMIN_CONSOLE_CLIENT_ID);
    if ((adminConsoleClient != null) && !localeMapperAdded(adminConsoleClient)) {
      adminConsoleClient.addProtocolMapper(localeMapper);
    }
    ClientModel client=realm.getMasterAdminClient();
    if (client.getRole(AdminRoles.CREATE_CLIENT) == null) {
      RoleModel role=client.addRole(AdminRoles.CREATE_CLIENT);
      role.setDescription("${role_" + AdminRoles.CREATE_CLIENT + "}");
      role.setScopeParamRequired(false);
      client.getRealm().getRole(AdminRoles.ADMIN).addCompositeRole(role);
    }
    if (!realm.getName().equals(Config.getAdminRealm())) {
      client=realm.getClientByClientId(Constants.REALM_MANAGEMENT_CLIENT_ID);
      if (client.getRole(AdminRoles.CREATE_CLIENT) == null) {
        RoleModel role=client.addRole(AdminRoles.CREATE_CLIENT);
        role.setDescription("${role_" + AdminRoles.CREATE_CLIENT + "}");
        role.setScopeParamRequired(false);
        client.getRole(AdminRoles.REALM_ADMIN).addCompositeRole(role);
      }
    }
  }
}
