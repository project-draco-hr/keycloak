{
  this.policyString=policyString;
  this.policies=new LinkedList<>();
  if (policyString != null && !policyString.trim().isEmpty()) {
    for (    String policy : policyString.split(" and ")) {
      policy=policy.trim();
      String name;
      String arg=null;
      int i=policy.indexOf('(');
      if (i == -1) {
        name=policy.trim();
      }
 else {
        name=policy.substring(0,i).trim();
        arg=policy.substring(i + 1,policy.length() - 1);
      }
      if (name.equals(Length.NAME)) {
        policies.add(new Length(arg));
      }
 else       if (name.equals(Digits.NAME)) {
        policies.add(new Digits(arg));
      }
 else       if (name.equals(LowerCase.NAME)) {
        policies.add(new LowerCase(arg));
      }
 else       if (name.equals(UpperCase.NAME)) {
        policies.add(new UpperCase(arg));
      }
 else       if (name.equals(SpecialChars.NAME)) {
        policies.add(new SpecialChars(arg));
      }
 else       if (name.equals(NotUsername.NAME)) {
        policies.add(new NotUsername(arg));
      }
 else       if (name.equals(HashAlgorithm.NAME)) {
        policies.add(new HashAlgorithm(arg));
      }
 else       if (name.equals(HashIterations.NAME)) {
        policies.add(new HashIterations(arg));
      }
 else       if (name.equals(RegexPatterns.NAME)) {
        Pattern.compile(arg);
        policies.add(new RegexPatterns(arg));
      }
 else       if (name.equals(PasswordHistory.NAME)) {
        policies.add(new PasswordHistory(arg,this));
      }
 else       if (name.equals(ForceExpiredPasswordChange.NAME)) {
        policies.add(new ForceExpiredPasswordChange(arg));
      }
 else {
        throw new IllegalArgumentException("Unsupported policy");
      }
    }
  }
}
