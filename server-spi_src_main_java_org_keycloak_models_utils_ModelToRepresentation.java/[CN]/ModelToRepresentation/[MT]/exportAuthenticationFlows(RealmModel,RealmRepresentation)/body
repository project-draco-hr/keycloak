{
  rep.setAuthenticationFlows(new LinkedList<AuthenticationFlowRepresentation>());
  rep.setAuthenticatorConfig(new LinkedList<AuthenticatorConfigRepresentation>());
  List<AuthenticationFlowModel> authenticationFlows=new ArrayList<>(realm.getAuthenticationFlows());
  Collections.sort(authenticationFlows,new Comparator<AuthenticationFlowModel>(){
    @Override public int compare(    AuthenticationFlowModel left,    AuthenticationFlowModel right){
      return left.getAlias().compareTo(right.getAlias());
    }
  }
);
  for (  AuthenticationFlowModel model : authenticationFlows) {
    AuthenticationFlowRepresentation flowRep=toRepresentation(realm,model);
    rep.getAuthenticationFlows().add(flowRep);
  }
  List<AuthenticatorConfigModel> authenticatorConfigs=new ArrayList<>(realm.getAuthenticatorConfigs());
  Collections.sort(authenticatorConfigs,new Comparator<AuthenticatorConfigModel>(){
    @Override public int compare(    AuthenticatorConfigModel left,    AuthenticatorConfigModel right){
      return left.getAlias().compareTo(right.getAlias());
    }
  }
);
  for (  AuthenticatorConfigModel model : authenticatorConfigs) {
    rep.getAuthenticatorConfig().add(toRepresentation(model));
  }
}
