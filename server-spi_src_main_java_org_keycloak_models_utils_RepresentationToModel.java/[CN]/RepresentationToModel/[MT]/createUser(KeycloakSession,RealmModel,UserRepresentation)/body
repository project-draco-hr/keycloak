{
  convertDeprecatedSocialProviders(userRep);
  UserModel user=session.userStorage().addUser(newRealm,userRep.getId(),userRep.getUsername(),false,false);
  user.setEnabled(userRep.isEnabled() != null && userRep.isEnabled());
  user.setCreatedTimestamp(userRep.getCreatedTimestamp());
  user.setEmail(userRep.getEmail());
  if (userRep.isEmailVerified() != null)   user.setEmailVerified(userRep.isEmailVerified());
  user.setFirstName(userRep.getFirstName());
  user.setLastName(userRep.getLastName());
  user.setFederationLink(userRep.getFederationLink());
  if (userRep.isTotp() != null)   user.setOtpEnabled(userRep.isTotp());
  if (userRep.getAttributes() != null) {
    for (    Map.Entry<String,Object> entry : userRep.getAttributes().entrySet()) {
      Object value=entry.getValue();
      if (value instanceof Collection) {
        Collection<String> colVal=(Collection<String>)value;
        user.setAttribute(entry.getKey(),new ArrayList<>(colVal));
      }
 else       if (value instanceof String) {
        String stringVal=(String)value;
        user.setSingleAttribute(entry.getKey(),stringVal);
      }
    }
  }
  if (userRep.getRequiredActions() != null) {
    for (    String requiredAction : userRep.getRequiredActions()) {
      user.addRequiredAction(UserModel.RequiredAction.valueOf(requiredAction));
    }
  }
  createCredentials(userRep,user);
  if (userRep.getFederatedIdentities() != null) {
    for (    FederatedIdentityRepresentation identity : userRep.getFederatedIdentities()) {
      FederatedIdentityModel mappingModel=new FederatedIdentityModel(identity.getIdentityProvider(),identity.getUserId(),identity.getUserName());
      session.users().addFederatedIdentity(newRealm,user,mappingModel);
    }
  }
  createRoleMappings(userRep,user,newRealm);
  if (userRep.getClientConsents() != null) {
    for (    UserConsentRepresentation consentRep : userRep.getClientConsents()) {
      UserConsentModel consentModel=toModel(newRealm,consentRep);
      session.userStorage().addConsent(newRealm,user,consentModel);
    }
  }
  if (userRep.getServiceAccountClientId() != null) {
    String clientId=userRep.getServiceAccountClientId();
    ClientModel client=newRealm.getClientByClientId(clientId);
    if (client == null) {
      throw new RuntimeException("Unable to find client specified for service account link. Client: " + clientId);
    }
    user.setServiceAccountClientLink(client.getId());
    ;
  }
  if (userRep.getGroups() != null) {
    for (    String path : userRep.getGroups()) {
      GroupModel group=KeycloakModelUtils.findGroupByPath(newRealm,path);
      if (group == null) {
        throw new RuntimeException("Unable to find group specified by path: " + path);
      }
      user.joinGroup(group);
    }
  }
  return user;
}
