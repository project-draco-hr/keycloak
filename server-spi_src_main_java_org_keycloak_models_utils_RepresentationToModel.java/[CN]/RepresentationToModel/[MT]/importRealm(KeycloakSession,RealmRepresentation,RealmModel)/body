{
  convertDeprecatedSocialProviders(rep);
  convertDeprecatedApplications(session,rep);
  newRealm.setName(rep.getRealm());
  if (rep.getDisplayName() != null)   newRealm.setDisplayName(rep.getDisplayName());
  if (rep.getDisplayNameHtml() != null)   newRealm.setDisplayNameHtml(rep.getDisplayNameHtml());
  if (rep.isEnabled() != null)   newRealm.setEnabled(rep.isEnabled());
  if (rep.isBruteForceProtected() != null)   newRealm.setBruteForceProtected(rep.isBruteForceProtected());
  if (rep.getMaxFailureWaitSeconds() != null)   newRealm.setMaxFailureWaitSeconds(rep.getMaxFailureWaitSeconds());
  if (rep.getMinimumQuickLoginWaitSeconds() != null)   newRealm.setMinimumQuickLoginWaitSeconds(rep.getMinimumQuickLoginWaitSeconds());
  if (rep.getWaitIncrementSeconds() != null)   newRealm.setWaitIncrementSeconds(rep.getWaitIncrementSeconds());
  if (rep.getQuickLoginCheckMilliSeconds() != null)   newRealm.setQuickLoginCheckMilliSeconds(rep.getQuickLoginCheckMilliSeconds());
  if (rep.getMaxDeltaTimeSeconds() != null)   newRealm.setMaxDeltaTimeSeconds(rep.getMaxDeltaTimeSeconds());
  if (rep.getFailureFactor() != null)   newRealm.setFailureFactor(rep.getFailureFactor());
  if (rep.isEventsEnabled() != null)   newRealm.setEventsEnabled(rep.isEventsEnabled());
  if (rep.getEventsExpiration() != null)   newRealm.setEventsExpiration(rep.getEventsExpiration());
  if (rep.getEventsListeners() != null)   newRealm.setEventsListeners(new HashSet<>(rep.getEventsListeners()));
  if (rep.isAdminEventsEnabled() != null)   newRealm.setAdminEventsEnabled(rep.isAdminEventsEnabled());
  if (rep.isAdminEventsDetailsEnabled() != null)   newRealm.setAdminEventsDetailsEnabled(rep.isAdminEventsDetailsEnabled());
  if (rep.getNotBefore() != null)   newRealm.setNotBefore(rep.getNotBefore());
  if (rep.getRevokeRefreshToken() != null)   newRealm.setRevokeRefreshToken(rep.getRevokeRefreshToken());
 else   newRealm.setRevokeRefreshToken(false);
  if (rep.getAccessTokenLifespan() != null)   newRealm.setAccessTokenLifespan(rep.getAccessTokenLifespan());
 else   newRealm.setAccessTokenLifespan(300);
  if (rep.getAccessTokenLifespanForImplicitFlow() != null)   newRealm.setAccessTokenLifespanForImplicitFlow(rep.getAccessTokenLifespanForImplicitFlow());
 else   newRealm.setAccessTokenLifespanForImplicitFlow(Constants.DEFAULT_ACCESS_TOKEN_LIFESPAN_FOR_IMPLICIT_FLOW_TIMEOUT);
  if (rep.getSsoSessionIdleTimeout() != null)   newRealm.setSsoSessionIdleTimeout(rep.getSsoSessionIdleTimeout());
 else   newRealm.setSsoSessionIdleTimeout(1800);
  if (rep.getSsoSessionMaxLifespan() != null)   newRealm.setSsoSessionMaxLifespan(rep.getSsoSessionMaxLifespan());
 else   newRealm.setSsoSessionMaxLifespan(36000);
  if (rep.getOfflineSessionIdleTimeout() != null)   newRealm.setOfflineSessionIdleTimeout(rep.getOfflineSessionIdleTimeout());
 else   newRealm.setOfflineSessionIdleTimeout(Constants.DEFAULT_OFFLINE_SESSION_IDLE_TIMEOUT);
  if (rep.getAccessCodeLifespan() != null)   newRealm.setAccessCodeLifespan(rep.getAccessCodeLifespan());
 else   newRealm.setAccessCodeLifespan(60);
  if (rep.getAccessCodeLifespanUserAction() != null)   newRealm.setAccessCodeLifespanUserAction(rep.getAccessCodeLifespanUserAction());
 else   newRealm.setAccessCodeLifespanUserAction(300);
  if (rep.getAccessCodeLifespanLogin() != null)   newRealm.setAccessCodeLifespanLogin(rep.getAccessCodeLifespanLogin());
 else   newRealm.setAccessCodeLifespanLogin(1800);
  if (rep.getSslRequired() != null)   newRealm.setSslRequired(SslRequired.valueOf(rep.getSslRequired().toUpperCase()));
  if (rep.isRegistrationAllowed() != null)   newRealm.setRegistrationAllowed(rep.isRegistrationAllowed());
  if (rep.isRegistrationEmailAsUsername() != null)   newRealm.setRegistrationEmailAsUsername(rep.isRegistrationEmailAsUsername());
  if (rep.isRememberMe() != null)   newRealm.setRememberMe(rep.isRememberMe());
  if (rep.isVerifyEmail() != null)   newRealm.setVerifyEmail(rep.isVerifyEmail());
  if (rep.isResetPasswordAllowed() != null)   newRealm.setResetPasswordAllowed(rep.isResetPasswordAllowed());
  if (rep.isEditUsernameAllowed() != null)   newRealm.setEditUsernameAllowed(rep.isEditUsernameAllowed());
  if (rep.getPrivateKey() == null || rep.getPublicKey() == null) {
    KeycloakModelUtils.generateRealmKeys(newRealm);
  }
 else {
    newRealm.setPrivateKeyPem(rep.getPrivateKey());
    newRealm.setPublicKeyPem(rep.getPublicKey());
  }
  if (rep.getCertificate() == null) {
    KeycloakModelUtils.generateRealmCertificate(newRealm);
  }
 else {
    newRealm.setCertificatePem(rep.getCertificate());
  }
  if (rep.getCodeSecret() == null) {
    newRealm.setCodeSecret(KeycloakModelUtils.generateCodeSecret());
  }
 else {
    newRealm.setCodeSecret(rep.getCodeSecret());
  }
  if (rep.getLoginTheme() != null)   newRealm.setLoginTheme(rep.getLoginTheme());
  if (rep.getAccountTheme() != null)   newRealm.setAccountTheme(rep.getAccountTheme());
  if (rep.getAdminTheme() != null)   newRealm.setAdminTheme(rep.getAdminTheme());
  if (rep.getEmailTheme() != null)   newRealm.setEmailTheme(rep.getEmailTheme());
  if (rep.getRequiredCredentials() != null) {
    for (    String requiredCred : rep.getRequiredCredentials()) {
      newRealm.addRequiredCredential(requiredCred);
    }
  }
 else {
    newRealm.addRequiredCredential(CredentialRepresentation.PASSWORD);
  }
  if (rep.getPasswordPolicy() != null)   newRealm.setPasswordPolicy(PasswordPolicy.parse(session,rep.getPasswordPolicy()));
  if (rep.getOtpPolicyType() != null)   newRealm.setOTPPolicy(toPolicy(rep));
 else   newRealm.setOTPPolicy(OTPPolicy.DEFAULT_POLICY);
  importAuthenticationFlows(newRealm,rep);
  if (rep.getRequiredActions() != null) {
    for (    RequiredActionProviderRepresentation action : rep.getRequiredActions()) {
      RequiredActionProviderModel model=toModel(action);
      MigrationUtils.updateOTPRequiredAction(model);
      newRealm.addRequiredActionProvider(model);
    }
  }
 else {
    DefaultRequiredActions.addActions(newRealm);
  }
  importIdentityProviders(rep,newRealm);
  importIdentityProviderMappers(rep,newRealm);
  if (rep.getClientTemplates() != null) {
    createClientTemplates(session,rep,newRealm);
  }
  if (rep.getClients() != null) {
    createClients(session,rep,newRealm);
  }
  importRoles(rep.getRoles(),newRealm);
  if (rep.getDefaultRoles() != null) {
    for (    String roleString : rep.getDefaultRoles()) {
      newRealm.addDefaultRole(roleString.trim());
    }
  }
  if (rep.getClients() != null) {
    for (    ClientRepresentation resourceRep : rep.getClients()) {
      if (resourceRep.getDefaultRoles() != null) {
        ClientModel clientModel=newRealm.getClientByClientId(resourceRep.getClientId());
        clientModel.updateDefaultRoles(resourceRep.getDefaultRoles());
      }
    }
  }
  if (rep.getClientScopeMappings() != null) {
    for (    Map.Entry<String,List<ScopeMappingRepresentation>> entry : rep.getClientScopeMappings().entrySet()) {
      ClientModel app=newRealm.getClientByClientId(entry.getKey());
      if (app == null) {
        throw new RuntimeException("Unable to find client role mappings for client: " + entry.getKey());
      }
      createClientScopeMappings(newRealm,app,entry.getValue());
    }
  }
  if (rep.getScopeMappings() != null) {
    for (    ScopeMappingRepresentation scope : rep.getScopeMappings()) {
      ScopeContainerModel scopeContainer=getScopeContainerHavingScope(newRealm,scope);
      for (      String roleString : scope.getRoles()) {
        RoleModel role=newRealm.getRole(roleString.trim());
        if (role == null) {
          role=newRealm.addRole(roleString.trim());
        }
        scopeContainer.addScopeMapping(role);
      }
    }
  }
  if (rep.getSmtpServer() != null) {
    newRealm.setSmtpConfig(new HashMap(rep.getSmtpServer()));
  }
  if (rep.getBrowserSecurityHeaders() != null) {
    newRealm.setBrowserSecurityHeaders(rep.getBrowserSecurityHeaders());
  }
 else {
    newRealm.setBrowserSecurityHeaders(BrowserSecurityHeaders.defaultHeaders);
  }
  if (rep.getComponents() != null) {
    MultivaluedHashMap<String,ComponentExportRepresentation> components=rep.getComponents();
    String parentId=newRealm.getId();
    importComponents(newRealm,components,parentId);
  }
  List<UserFederationProviderModel> providerModels=null;
  if (rep.getUserFederationProviders() != null) {
    providerModels=convertFederationProviders(rep.getUserFederationProviders());
    newRealm.setUserFederationProviders(providerModels);
  }
  if (rep.getUserFederationMappers() != null) {
    if (rep.getUserFederationProviders() != null) {
      Set<String> providerNames=new TreeSet<String>();
      for (      UserFederationMapperRepresentation representation : rep.getUserFederationMappers()) {
        providerNames.add(representation.getFederationProviderDisplayName());
      }
      for (      String providerName : providerNames) {
        for (        UserFederationProviderModel providerModel : providerModels) {
          if (providerName.equals(providerModel.getDisplayName())) {
            Set<UserFederationMapperModel> toDelete=newRealm.getUserFederationMappersByFederationProvider(providerModel.getId());
            for (            UserFederationMapperModel mapperModel : toDelete) {
              newRealm.removeUserFederationMapper(mapperModel);
            }
          }
        }
      }
    }
    for (    UserFederationMapperRepresentation representation : rep.getUserFederationMappers()) {
      newRealm.addUserFederationMapper(toModel(newRealm,representation));
    }
  }
  if (rep.getGroups() != null) {
    importGroups(newRealm,rep);
    if (rep.getDefaultGroups() != null) {
      for (      String path : rep.getDefaultGroups()) {
        GroupModel found=KeycloakModelUtils.findGroupByPath(newRealm,path);
        if (found == null)         throw new RuntimeException("default group in realm rep doesn't exist: " + path);
        newRealm.addDefaultGroup(found);
      }
    }
  }
  if (rep.getUsers() != null) {
    for (    UserRepresentation userRep : rep.getUsers()) {
      UserModel user=createUser(session,newRealm,userRep);
    }
  }
  if (rep.isInternationalizationEnabled() != null) {
    newRealm.setInternationalizationEnabled(rep.isInternationalizationEnabled());
  }
  if (rep.getSupportedLocales() != null) {
    newRealm.setSupportedLocales(new HashSet<String>(rep.getSupportedLocales()));
  }
  if (rep.getDefaultLocale() != null) {
    newRealm.setDefaultLocale(rep.getDefaultLocale());
  }
}
