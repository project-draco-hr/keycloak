{
  IdentityProviderModel identityProviderModel=new IdentityProviderModel();
  identityProviderModel.setInternalId(representation.getInternalId());
  identityProviderModel.setAlias(representation.getAlias());
  identityProviderModel.setProviderId(representation.getProviderId());
  identityProviderModel.setEnabled(representation.isEnabled());
  identityProviderModel.setTrustEmail(representation.isTrustEmail());
  identityProviderModel.setAuthenticateByDefault(representation.isAuthenticateByDefault());
  identityProviderModel.setStoreToken(representation.isStoreToken());
  identityProviderModel.setAddReadTokenRoleOnCreate(representation.isAddReadTokenRoleOnCreate());
  identityProviderModel.setConfig(representation.getConfig());
  String flowAlias=representation.getFirstBrokerLoginFlowAlias();
  if (flowAlias == null) {
    flowAlias=DefaultAuthenticationFlows.FIRST_BROKER_LOGIN_FLOW;
  }
  AuthenticationFlowModel flowModel=realm.getFlowByAlias(flowAlias);
  if (flowModel == null) {
    throw new ModelException("No available authentication flow with alias: " + flowAlias);
  }
  identityProviderModel.setFirstBrokerLoginFlowId(flowModel.getId());
  flowAlias=representation.getPostBrokerLoginFlowAlias();
  if (flowAlias == null || flowAlias.trim().length() == 0) {
    identityProviderModel.setPostBrokerLoginFlowId(null);
  }
 else {
    flowModel=realm.getFlowByAlias(flowAlias);
    if (flowModel == null) {
      throw new ModelException("No available authentication flow with alias: " + flowAlias);
    }
    identityProviderModel.setPostBrokerLoginFlowId(flowModel.getId());
  }
  return identityProviderModel;
}
