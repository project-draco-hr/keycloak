{
  if (StorageId.isLocalStorage(user)) {
    return localStorage().validCredentials(session,realm,user,input);
  }
  List<UserCredentialValueModel> userCreds=user.getCredentialsDirectly();
  LinkedList<UserCredentialModel> toValidate=new LinkedList<>();
  toValidate.addAll(input);
  Iterator<UserCredentialModel> it=toValidate.iterator();
  boolean failedStoredCredential=false;
  while (it.hasNext()) {
    UserCredentialModel cred=it.next();
    boolean credValidated=false;
    for (    UserCredentialValueModel userCred : userCreds) {
      if (!userCred.getType().equals(cred.getType()))       continue;
      if (CredentialValidation.validCredential(session,realm,user,cred)) {
        credValidated=true;
        break;
      }
 else {
        failedStoredCredential=true;
      }
    }
    if (credValidated) {
      it.remove();
    }
 else     if (failedStoredCredential) {
      return false;
    }
  }
  if (toValidate.isEmpty())   return true;
  UserStorageProvider provider=getStorageProvider(realm,StorageId.resolveProviderId(user));
  if (!(provider instanceof UserCredentialValidatorProvider)) {
    return false;
  }
  return ((UserCredentialValidatorProvider)provider).validCredentials(session,realm,user,toValidate);
}
