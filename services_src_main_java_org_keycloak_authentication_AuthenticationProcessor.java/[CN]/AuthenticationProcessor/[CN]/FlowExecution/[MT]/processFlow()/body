{
  while (executions.hasNext()) {
    AuthenticationExecutionModel model=executions.next();
    if (isProcessed(model)) {
      logger.debug("execution is processed");
      if (!alternativeSuccessful && model.isAlternative() && isSuccessful(model))       alternativeSuccessful=true;
      continue;
    }
    if (model.isAlternative() && alternativeSuccessful) {
      clientSession.setExecutionStatus(model.getId(),ClientSessionModel.ExecutionStatus.SKIPPED);
      continue;
    }
    if (model.isAutheticatorFlow()) {
      FlowExecution flowExecution=createFlowExecution(model.getAuthenticator());
      Response flowResponse=flowExecution.processFlow();
      if (flowResponse == null) {
        clientSession.setExecutionStatus(model.getId(),ClientSessionModel.ExecutionStatus.SUCCESS);
        if (model.isAlternative())         alternativeSuccessful=true;
        continue;
      }
 else {
        return flowResponse;
      }
    }
    AuthenticatorModel authenticatorModel=realm.getAuthenticatorById(model.getAuthenticator());
    AuthenticatorFactory factory=(AuthenticatorFactory)session.getKeycloakSessionFactory().getProviderFactory(Authenticator.class,authenticatorModel.getProviderId());
    Authenticator authenticator=factory.create(authenticatorModel);
    logger.debugv("authenticator: {0}",authenticatorModel.getProviderId());
    UserModel authUser=clientSession.getAuthenticatedUser();
    if (authenticator.requiresUser() && authUser == null) {
      if (alternativeChallenge != null) {
        clientSession.setExecutionStatus(challengedAlternativeExecution.getId(),ClientSessionModel.ExecutionStatus.CHALLENGED);
        return alternativeChallenge;
      }
      throw new AuthException("authenticator: " + authenticatorModel.getProviderId(),Error.UNKNOWN_USER);
    }
    boolean configuredFor=false;
    if (authenticator.requiresUser() && authUser != null) {
      configuredFor=authenticator.configuredFor(session,realm,authUser);
      if (!configuredFor) {
        if (model.isRequired()) {
          if (model.isUserSetupAllowed()) {
            logger.debugv("authenticator SETUP_REQUIRED: {0}",authenticatorModel.getProviderId());
            clientSession.setExecutionStatus(model.getId(),ClientSessionModel.ExecutionStatus.SETUP_REQUIRED);
            authenticator.setRequiredActions(session,realm,clientSession.getAuthenticatedUser());
            continue;
          }
 else {
            throw new AuthException(Error.CREDENTIAL_SETUP_REQUIRED);
          }
        }
 else         if (model.isOptional()) {
          clientSession.setExecutionStatus(model.getId(),ClientSessionModel.ExecutionStatus.SKIPPED);
          continue;
        }
      }
    }
    Result context=new Result(model,authenticatorModel,authenticator);
    authenticator.authenticate(context);
    Response response=processResult(context);
    if (response != null)     return response;
  }
  return null;
}
