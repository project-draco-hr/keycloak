{
  if (failure instanceof AuthenticationFlowException) {
    AuthenticationFlowException e=(AuthenticationFlowException)failure;
    if (e.getError() == AuthenticationFlowError.INVALID_USER) {
      ServicesLogger.LOGGER.failedAuthentication(e);
      event.error(Errors.USER_NOT_FOUND);
      return ErrorPage.error(session,Messages.INVALID_USER);
    }
 else     if (e.getError() == AuthenticationFlowError.USER_DISABLED) {
      ServicesLogger.LOGGER.failedAuthentication(e);
      event.error(Errors.USER_DISABLED);
      return ErrorPage.error(session,Messages.ACCOUNT_DISABLED);
    }
 else     if (e.getError() == AuthenticationFlowError.USER_TEMPORARILY_DISABLED) {
      ServicesLogger.LOGGER.failedAuthentication(e);
      event.error(Errors.USER_TEMPORARILY_DISABLED);
      return ErrorPage.error(session,Messages.INVALID_USER);
    }
 else     if (e.getError() == AuthenticationFlowError.INVALID_CLIENT_SESSION) {
      ServicesLogger.LOGGER.failedAuthentication(e);
      event.error(Errors.INVALID_CODE);
      return ErrorPage.error(session,Messages.INVALID_CODE);
    }
 else     if (e.getError() == AuthenticationFlowError.EXPIRED_CODE) {
      ServicesLogger.LOGGER.failedAuthentication(e);
      event.error(Errors.EXPIRED_CODE);
      return ErrorPage.error(session,Messages.EXPIRED_CODE);
    }
 else     if (e.getError() == AuthenticationFlowError.FORK_FLOW) {
      ForkFlowException reset=(ForkFlowException)e;
      ClientSessionModel clone=clone(session,clientSession);
      clone.setAction(ClientSessionModel.Action.AUTHENTICATE.name());
      AuthenticationProcessor processor=new AuthenticationProcessor();
      processor.setClientSession(clone).setFlowPath(LoginActionsService.AUTHENTICATE_PATH).setFlowId(realm.getBrowserFlow().getId()).setForwardedErrorMessage(reset.getErrorMessage()).setForwardedSuccessMessage(reset.getSuccessMessage()).setConnection(connection).setEventBuilder(event).setRealm(realm).setBrowserFlow(isBrowserFlow()).setSession(session).setUriInfo(uriInfo).setRequest(request);
      CacheControlUtil.noBackButtonCacheControlHeader();
      return processor.authenticate();
    }
 else {
      ServicesLogger.LOGGER.failedAuthentication(e);
      event.error(Errors.INVALID_USER_CREDENTIALS);
      return ErrorPage.error(session,Messages.INVALID_USER);
    }
  }
 else {
    ServicesLogger.LOGGER.failedAuthentication(failure);
    event.error(Errors.INVALID_USER_CREDENTIALS);
    return ErrorPage.error(session,Messages.UNEXPECTED_ERROR_HANDLING_REQUEST);
  }
}
