{
  List<AuthenticationExecutionModel> executions=findExecutionsToRun();
  for (  AuthenticationExecutionModel model : executions) {
    ClientAuthenticatorFactory factory=(ClientAuthenticatorFactory)processor.getSession().getKeycloakSessionFactory().getProviderFactory(ClientAuthenticator.class,model.getAuthenticator());
    if (factory == null) {
      throw new AuthenticationFlowException("Could not find ClientAuthenticatorFactory for: " + model.getAuthenticator(),AuthenticationFlowError.INTERNAL_ERROR);
    }
    ClientAuthenticator authenticator=factory.create();
    logger.debugv("client authenticator: {0}",factory.getId());
    AuthenticationProcessor.Result context=processor.createClientAuthenticatorContext(model,authenticator,executions);
    authenticator.authenticateClient(context);
    ClientModel client=processor.getClient();
    if (client != null) {
      String expectedClientAuthType=client.getClientAuthenticatorType();
      if (expectedClientAuthType == null) {
        expectedClientAuthType=KeycloakModelUtils.getDefaultClientAuthenticatorType();
        ServicesLogger.LOGGER.authMethodFallback(client.getClientId(),expectedClientAuthType);
      }
      if (factory.getId().equals(expectedClientAuthType)) {
        Response response=processResult(context);
        if (response != null)         return response;
        if (!context.getStatus().equals(FlowStatus.SUCCESS)) {
          throw new AuthenticationFlowException("Expected success, but for an unknown reason the status was " + context.getStatus(),AuthenticationFlowError.INTERNAL_ERROR);
        }
        logger.debugv("Client {0} authenticated by {1}",client.getClientId(),factory.getId());
        processor.getEvent().detail(Details.CLIENT_AUTH_METHOD,factory.getId());
        return null;
      }
    }
  }
  if (alternativeChallenge != null) {
    processor.getEvent().error(Errors.INVALID_CLIENT);
    return alternativeChallenge;
  }
  throw new AuthenticationFlowException("Client was not identified by any client authenticator",AuthenticationFlowError.UNKNOWN_CLIENT);
}
