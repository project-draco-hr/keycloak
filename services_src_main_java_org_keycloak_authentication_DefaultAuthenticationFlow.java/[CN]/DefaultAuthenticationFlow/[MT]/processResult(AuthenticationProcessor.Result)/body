{
  AuthenticationExecutionModel execution=result.getExecution();
  FlowStatus status=result.getStatus();
switch (status) {
case SUCCESS:
    logger.debugv("authenticator SUCCESS: {0}",execution.getAuthenticator());
  processor.getClientSession().setExecutionStatus(execution.getId(),ClientSessionModel.ExecutionStatus.SUCCESS);
if (execution.isAlternative()) alternativeSuccessful=true;
return null;
case FAILED:
logger.debugv("authenticator FAILED: {0}",execution.getAuthenticator());
processor.logFailure();
processor.getClientSession().setExecutionStatus(execution.getId(),ClientSessionModel.ExecutionStatus.FAILED);
if (result.getChallenge() != null) {
return sendChallenge(result,execution);
}
throw new AuthenticationFlowException(result.getError());
case FORK:
logger.debugv("reset browser login from authenticator: {0}",execution.getAuthenticator());
processor.getClientSession().setNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION,execution.getId());
throw new ForkFlowException(result.getSuccessMessage(),result.getErrorMessage());
case FORCE_CHALLENGE:
processor.getClientSession().setExecutionStatus(execution.getId(),ClientSessionModel.ExecutionStatus.CHALLENGED);
return sendChallenge(result,execution);
case CHALLENGE:
logger.debugv("authenticator CHALLENGE: {0}",execution.getAuthenticator());
if (execution.isRequired()) {
processor.getClientSession().setExecutionStatus(execution.getId(),ClientSessionModel.ExecutionStatus.CHALLENGED);
return sendChallenge(result,execution);
}
UserModel authenticatedUser=processor.getClientSession().getAuthenticatedUser();
if (execution.isOptional() && authenticatedUser != null && result.getAuthenticator().configuredFor(processor.getSession(),processor.getRealm(),authenticatedUser)) {
processor.getClientSession().setExecutionStatus(execution.getId(),ClientSessionModel.ExecutionStatus.CHALLENGED);
return sendChallenge(result,execution);
}
if (execution.isAlternative()) {
alternativeChallenge=result.getChallenge();
challengedAlternativeExecution=execution;
}
 else {
processor.getClientSession().setExecutionStatus(execution.getId(),ClientSessionModel.ExecutionStatus.SKIPPED);
}
return null;
case FAILURE_CHALLENGE:
logger.debugv("authenticator FAILURE_CHALLENGE: {0}",execution.getAuthenticator());
processor.logFailure();
processor.getClientSession().setExecutionStatus(execution.getId(),ClientSessionModel.ExecutionStatus.CHALLENGED);
return sendChallenge(result,execution);
case ATTEMPTED:
logger.debugv("authenticator ATTEMPTED: {0}",execution.getAuthenticator());
if (execution.getRequirement() == AuthenticationExecutionModel.Requirement.REQUIRED) {
throw new AuthenticationFlowException(AuthenticationFlowError.INVALID_CREDENTIALS);
}
processor.getClientSession().setExecutionStatus(execution.getId(),ClientSessionModel.ExecutionStatus.ATTEMPTED);
return null;
case FLOW_RESET:
AuthenticationProcessor.resetFlow(processor.getClientSession());
return processor.authenticate();
default :
logger.debugv("authenticator INTERNAL_ERROR: {0}",execution.getAuthenticator());
ServicesLogger.LOGGER.unknownResultStatus();
throw new AuthenticationFlowException(AuthenticationFlowError.INTERNAL_ERROR);
}
}
