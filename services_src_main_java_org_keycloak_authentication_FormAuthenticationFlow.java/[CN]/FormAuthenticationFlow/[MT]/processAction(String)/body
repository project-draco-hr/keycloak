{
  if (!actionExecution.equals(formExecution.getId())) {
    throw new AuthenticationFlowException("action is not current execution",AuthenticationFlowError.INTERNAL_ERROR);
  }
  Map<String,ClientSessionModel.ExecutionStatus> executionStatus=new HashMap<>();
  List<FormAction> requiredActions=new LinkedList<>();
  List<ValidationContextImpl> successes=new LinkedList<>();
  List<ValidationContextImpl> errors=new LinkedList<>();
  for (  AuthenticationExecutionModel formActionExecution : formActionExecutions) {
    if (!formActionExecution.isEnabled()) {
      executionStatus.put(formActionExecution.getId(),ClientSessionModel.ExecutionStatus.SKIPPED);
      continue;
    }
    FormActionFactory factory=(FormActionFactory)processor.getSession().getKeycloakSessionFactory().getProviderFactory(FormAction.class,formActionExecution.getAuthenticator());
    FormAction action=factory.create(processor.getSession());
    UserModel authUser=processor.getClientSession().getAuthenticatedUser();
    if (action.requiresUser() && authUser == null) {
      throw new AuthenticationFlowException("form action: " + formExecution.getAuthenticator() + " requires user",AuthenticationFlowError.UNKNOWN_USER);
    }
    boolean configuredFor=false;
    if (action.requiresUser() && authUser != null) {
      configuredFor=action.configuredFor(processor.getSession(),processor.getRealm(),authUser);
      if (!configuredFor) {
        if (formActionExecution.isRequired()) {
          if (factory.isUserSetupAllowed()) {
            AuthenticationProcessor.logger.debugv("authenticator SETUP_REQUIRED: {0}",formExecution.getAuthenticator());
            executionStatus.put(formActionExecution.getId(),ClientSessionModel.ExecutionStatus.SETUP_REQUIRED);
            requiredActions.add(action);
            continue;
          }
 else {
            throw new AuthenticationFlowException(AuthenticationFlowError.CREDENTIAL_SETUP_REQUIRED);
          }
        }
 else         if (formActionExecution.isOptional()) {
          executionStatus.put(formActionExecution.getId(),ClientSessionModel.ExecutionStatus.SKIPPED);
          continue;
        }
      }
    }
    ValidationContextImpl result=new ValidationContextImpl(formActionExecution,action);
    action.validate(result);
    if (result.success) {
      executionStatus.put(formActionExecution.getId(),ClientSessionModel.ExecutionStatus.SUCCESS);
      successes.add(result);
    }
 else {
      executionStatus.put(formActionExecution.getId(),ClientSessionModel.ExecutionStatus.CHALLENGED);
      errors.add(result);
    }
  }
  if (!errors.isEmpty()) {
    processor.logFailure();
    List<FormMessage> messages=new LinkedList<>();
    Set<String> fields=new HashSet<>();
    for (    ValidationContextImpl v : errors) {
      for (      FormMessage m : v.errors) {
        if (!fields.contains(m.getField())) {
          fields.add(m.getField());
          messages.add(m);
        }
      }
    }
    ValidationContextImpl first=errors.get(0);
    first.getEvent().error(first.error);
    return renderForm(first.formData,messages);
  }
  for (  ValidationContextImpl context : successes) {
    context.action.success(context);
  }
  for (  Map.Entry<String,ClientSessionModel.ExecutionStatus> entry : executionStatus.entrySet()) {
    processor.getClientSession().setExecutionStatus(entry.getKey(),entry.getValue());
  }
  for (  FormAction action : requiredActions) {
    action.setRequiredActions(processor.getSession(),processor.getRealm(),processor.getClientSession().getAuthenticatedUser());
  }
  processor.getClientSession().setExecutionStatus(actionExecution,ClientSessionModel.ExecutionStatus.SUCCESS);
  processor.getClientSession().removeNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION);
  processor.setActionSuccessful();
  return null;
}
