{
  if (!actionExecution.equals(formExecution.getId())) {
    throw new AuthenticationProcessor.AuthException("action is not current execution",AuthenticationProcessor.Error.INTERNAL_ERROR);
  }
  Map<String,ClientSessionModel.ExecutionStatus> executionStatus=new HashMap<>();
  List<FormAction> requiredActions=new LinkedList<>();
  for (  AuthenticationExecutionModel formActionExecution : formActionExecutions) {
    FormAction action=processor.getSession().getProvider(FormAction.class,formActionExecution.getAuthenticator());
    UserModel authUser=processor.getClientSession().getAuthenticatedUser();
    if (action.requiresUser() && authUser == null) {
      throw new AuthenticationProcessor.AuthException("form action: " + formExecution.getAuthenticator() + " requires user",AuthenticationProcessor.Error.UNKNOWN_USER);
    }
    boolean configuredFor=false;
    if (action.requiresUser() && authUser != null) {
      configuredFor=action.configuredFor(processor.getSession(),processor.getRealm(),authUser);
      if (!configuredFor) {
        if (formActionExecution.isRequired()) {
          if (formActionExecution.isUserSetupAllowed()) {
            AuthenticationProcessor.logger.debugv("authenticator SETUP_REQUIRED: {0}",formExecution.getAuthenticator());
            executionStatus.put(formActionExecution.getId(),ClientSessionModel.ExecutionStatus.SETUP_REQUIRED);
            requiredActions.add(action);
            continue;
          }
 else {
            throw new AuthenticationProcessor.AuthException(AuthenticationProcessor.Error.CREDENTIAL_SETUP_REQUIRED);
          }
        }
 else         if (formActionExecution.isOptional()) {
          executionStatus.put(formActionExecution.getId(),ClientSessionModel.ExecutionStatus.SKIPPED);
          continue;
        }
      }
    }
    AuthenticatorContext delegate=processor.createAuthenticatorContext(formActionExecution,null,formActionExecutions);
    FormActionContext result=new FormContext(delegate);
    action.authenticate(result);
    Response challenge=processResult(executionStatus,result,formActionExecution);
    if (challenge != null)     return challenge;
    executionStatus.put(formActionExecution.getId(),ClientSessionModel.ExecutionStatus.SUCCESS);
  }
  for (  Map.Entry<String,ClientSessionModel.ExecutionStatus> entry : executionStatus.entrySet()) {
    processor.getClientSession().setExecutionStatus(entry.getKey(),entry.getValue());
  }
  for (  FormAction action : requiredActions) {
    action.setRequiredActions(processor.getSession(),processor.getRealm(),processor.getClientSession().getAuthenticatedUser());
  }
  return null;
}
