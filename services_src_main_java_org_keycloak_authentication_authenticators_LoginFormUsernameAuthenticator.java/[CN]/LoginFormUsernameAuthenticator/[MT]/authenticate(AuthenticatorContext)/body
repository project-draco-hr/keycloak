{
  if (!isActionUrl(context)) {
    MultivaluedMap<String,String> formData=new MultivaluedMapImpl<>();
    String loginHint=context.getClientSession().getNote(OIDCLoginProtocol.LOGIN_HINT_PARAM);
    String rememberMeUsername=AuthenticationManager.getRememberMeUsername(context.getRealm(),context.getHttpRequest().getHttpHeaders());
    if (loginHint != null || rememberMeUsername != null) {
      if (loginHint != null) {
        formData.add(AuthenticationManager.FORM_USERNAME,loginHint);
      }
 else {
        formData.add(AuthenticationManager.FORM_USERNAME,rememberMeUsername);
        formData.add("rememberMe","on");
      }
    }
    if (loginHint != null)     formData.add(AuthenticationManager.FORM_USERNAME,loginHint);
    Response challengeResponse=challenge(context,formData);
    context.challenge(challengeResponse);
    return;
  }
  MultivaluedMap<String,String> formData=context.getHttpRequest().getDecodedFormParameters();
  if (formData.containsKey("cancel")) {
    context.getEvent().error(Errors.REJECTED_BY_USER);
    LoginProtocol protocol=context.getSession().getProvider(LoginProtocol.class,context.getClientSession().getAuthMethod());
    protocol.setRealm(context.getRealm()).setHttpHeaders(context.getHttpRequest().getHttpHeaders()).setUriInfo(context.getUriInfo());
    Response response=protocol.cancelLogin(context.getClientSession());
    context.challenge(response);
    return;
  }
  validateUser(context,formData);
}
