{
  KeycloakSession session=context.getSession();
  RealmModel realm=context.getRealm();
  if (context.getClientSession().getNote(EXISTING_USER_INFO) != null) {
    context.attempted();
    return;
  }
  String username=getUsername(context,serializedCtx,brokerContext);
  if (username == null) {
    logger.resetFlow(realm.isRegistrationEmailAsUsername() ? "Email" : "Username");
    context.getClientSession().setNote(ENFORCE_UPDATE_PROFILE,"true");
    context.resetFlow();
    return;
  }
  ExistingUserInfo duplication=checkExistingUser(context,username,serializedCtx,brokerContext);
  if (duplication == null) {
    logger.debugf("No duplication detected. Creating account for user '%s' and linking with identity provider '%s' .",username,brokerContext.getIdpConfig().getAlias());
    UserModel federatedUser=session.users().addUser(realm,username);
    federatedUser.setEnabled(true);
    federatedUser.setEmail(brokerContext.getEmail());
    federatedUser.setFirstName(brokerContext.getFirstName());
    federatedUser.setLastName(brokerContext.getLastName());
    for (    Map.Entry<String,List<String>> attr : serializedCtx.getAttributes().entrySet()) {
      federatedUser.setAttribute(attr.getKey(),attr.getValue());
    }
    AuthenticatorConfigModel config=context.getAuthenticatorConfig();
    if (config != null && Boolean.parseBoolean(config.getConfig().get(IdpCreateUserIfUniqueAuthenticatorFactory.REQUIRE_PASSWORD_UPDATE_AFTER_REGISTRATION))) {
      logger.debugf("User '%s' required to update password",federatedUser.getUsername());
      federatedUser.addRequiredAction(UserModel.RequiredAction.UPDATE_PASSWORD);
    }
    context.setUser(federatedUser);
    context.getClientSession().setNote(BROKER_REGISTERED_NEW_USER,"true");
    context.success();
  }
 else {
    logger.debugf("Duplication detected. There is already existing user with %s '%s' .",duplication.getDuplicateAttributeName(),duplication.getDuplicateAttributeValue());
    context.getClientSession().setNote(EXISTING_USER_INFO,duplication.serialize());
    Response challengeResponse=context.form().setError(Messages.FEDERATED_IDENTITY_EXISTS,duplication.getDuplicateAttributeName(),duplication.getDuplicateAttributeValue()).createErrorPage();
    context.challenge(challengeResponse);
    if (context.getExecution().isRequired()) {
      context.getEvent().user(duplication.getExistingUserId()).detail("existing_" + duplication.getDuplicateAttributeName(),duplication.getDuplicateAttributeValue()).removeDetail(Details.AUTH_METHOD).removeDetail(Details.AUTH_TYPE).error(Errors.FEDERATED_IDENTITY_EXISTS);
    }
  }
}
