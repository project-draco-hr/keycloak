{
  ProviderConfigProperty forceOtpUserAttribute=new ProviderConfigProperty();
  forceOtpUserAttribute.setType(STRING_TYPE);
  forceOtpUserAttribute.setName(OTP_CONTROL_USER_ATTRIBUTE);
  forceOtpUserAttribute.setLabel("OTP control User Attribute");
  forceOtpUserAttribute.setHelpText("The name of the user attribute to explicitly control OTP auth. " + "If attribute value is 'force' then OTP is always required. " + "If value is 'skip' the OTP auth is skipped. Otherwise this check is ignored.");
  ProviderConfigProperty skipOtpRole=new ProviderConfigProperty();
  skipOtpRole.setType(ROLE_TYPE);
  skipOtpRole.setName(SKIP_OTP_ROLE);
  skipOtpRole.setLabel("Skip OTP for Role");
  skipOtpRole.setHelpText("OTP is always skipped if user has the given Role.");
  ProviderConfigProperty forceOtpRole=new ProviderConfigProperty();
  forceOtpRole.setType(ROLE_TYPE);
  forceOtpRole.setName(FORCE_OTP_ROLE);
  forceOtpRole.setLabel("Force OTP for Role");
  forceOtpRole.setHelpText("OTP is always required if user has the given Role.");
  ProviderConfigProperty noOtpRequiredForHttpHeader=new ProviderConfigProperty();
  noOtpRequiredForHttpHeader.setType(STRING_TYPE);
  noOtpRequiredForHttpHeader.setName(NO_OTP_REQUIRED_FOR_HTTP_HEADER);
  noOtpRequiredForHttpHeader.setLabel("No OTP for Header");
  noOtpRequiredForHttpHeader.setHelpText("OTP required if a HTTP request header does not match the given pattern." + "Can be used to specify trusted networks via: X-Forwarded-Host: (1.2.3.4|1.2.3.5)." + "In this case requests from 1.2.3.4 and 1.2.3.5 come from a trusted source.");
  noOtpRequiredForHttpHeader.setDefaultValue("");
  ProviderConfigProperty forceOtpForHttpHeader=new ProviderConfigProperty();
  forceOtpForHttpHeader.setType(STRING_TYPE);
  forceOtpForHttpHeader.setName(FORCE_OTP_FOR_HTTP_HEADER);
  forceOtpForHttpHeader.setLabel("Force OTP for Header");
  forceOtpForHttpHeader.setHelpText("OTP required if a HTTP request header matches the given pattern.");
  forceOtpForHttpHeader.setDefaultValue("");
  ProviderConfigProperty defaultOutcome=new ProviderConfigProperty();
  defaultOutcome.setType(LIST_TYPE);
  defaultOutcome.setName(DEFAULT_OTP_OUTCOME);
  defaultOutcome.setLabel("Fallback OTP handling");
  defaultOutcome.setDefaultValue(asList(SKIP,FORCE));
  defaultOutcome.setHelpText("What to do in case of every check abstains. Defaults to force OTP authentication.");
  return asList(forceOtpUserAttribute,skipOtpRole,forceOtpRole,noOtpRequiredForHttpHeader,forceOtpForHttpHeader,defaultOutcome);
}
