{
  HttpRequest request=context.getHttpRequest();
  String authHeader=request.getHttpHeaders().getRequestHeaders().getFirst(HttpHeaders.AUTHORIZATION);
  if (authHeader == null) {
    Response challenge=challengeNegotiation(context,null);
    context.forceChallenge(challenge);
    return;
  }
  String[] tokens=authHeader.split(" ");
  if (tokens.length == 0) {
    logger.debug("Invalid length of tokens: " + tokens.length);
    context.attempted();
    return;
  }
  if (!KerberosConstants.NEGOTIATE.equalsIgnoreCase(tokens[0])) {
    logger.debug("Unknown scheme " + tokens[0]);
    context.attempted();
    return;
  }
  if (tokens.length != 2) {
    context.failure(AuthenticationFlowError.INVALID_CREDENTIALS);
    return;
  }
  String spnegoToken=tokens[1];
  UserCredentialModel spnegoCredential=UserCredentialModel.kerberos(spnegoToken);
  CredentialValidationOutput output=context.getSession().userCredentialManager().authenticate(context.getSession(),context.getRealm(),spnegoCredential);
  if (output.getAuthStatus() == CredentialValidationOutput.Status.AUTHENTICATED) {
    context.setUser(output.getAuthenticatedUser());
    if (output.getState() != null && !output.getState().isEmpty()) {
      for (      Map.Entry<String,String> entry : output.getState().entrySet()) {
        context.getClientSession().setUserSessionNote(entry.getKey(),entry.getValue());
      }
    }
    context.success();
  }
 else   if (output.getAuthStatus() == CredentialValidationOutput.Status.CONTINUE) {
    String spnegoResponseToken=(String)output.getState().get(KerberosConstants.RESPONSE_TOKEN);
    Response challenge=challengeNegotiation(context,spnegoResponseToken);
    context.challenge(challenge);
  }
 else {
    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);
    context.failure(AuthenticationFlowError.INVALID_CREDENTIALS);
  }
}
