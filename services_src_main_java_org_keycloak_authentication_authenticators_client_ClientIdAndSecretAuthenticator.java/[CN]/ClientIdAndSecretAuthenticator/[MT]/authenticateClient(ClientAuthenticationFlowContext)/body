{
  String client_id=null;
  String clientSecret=null;
  String authorizationHeader=context.getHttpRequest().getHttpHeaders().getRequestHeaders().getFirst(HttpHeaders.AUTHORIZATION);
  MultivaluedMap<String,String> formData=context.getHttpRequest().getDecodedFormParameters();
  if (authorizationHeader != null) {
    String[] usernameSecret=BasicAuthHelper.parseHeader(authorizationHeader);
    if (usernameSecret != null) {
      client_id=usernameSecret[0];
      clientSecret=usernameSecret[1];
    }
 else {
      if (!formData.containsKey(OAuth2Constants.CLIENT_ID)) {
        Response challengeResponse=Response.status(Response.Status.UNAUTHORIZED).header(HttpHeaders.WWW_AUTHENTICATE,"Basic realm=\"" + context.getRealm().getName() + "\"").build();
        context.challenge(challengeResponse);
        return;
      }
    }
  }
  if (client_id == null) {
    client_id=formData.getFirst(OAuth2Constants.CLIENT_ID);
    clientSecret=formData.getFirst("client_secret");
  }
  if (client_id == null) {
    Response challengeResponse=ClientAuthUtil.errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),"invalid_client","Missing client_id parameter");
    context.challenge(challengeResponse);
    return;
  }
  context.getEvent().client(client_id);
  ClientModel client=context.getRealm().getClientByClientId(client_id);
  if (client == null) {
    context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND,null);
    return;
  }
  if (!client.isEnabled()) {
    context.failure(AuthenticationFlowError.CLIENT_DISABLED,null);
    return;
  }
  context.setClient(client);
  if (client.isPublicClient()) {
    context.success();
    return;
  }
  if (clientSecret == null) {
    Response challengeResponse=ClientAuthUtil.errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),"unauthorized_client","Client secret not provided in request");
    context.challenge(challengeResponse);
    return;
  }
  if (client.getSecret() == null) {
    Response challengeResponse=ClientAuthUtil.errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),"unauthorized_client","Client secret setup required for client " + client.getClientId());
    context.challenge(challengeResponse);
    return;
  }
  if (!client.validateSecret(clientSecret)) {
    Response challengeResponse=ClientAuthUtil.errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),"unauthorized_client","Invalid client secret");
    context.failure(AuthenticationFlowError.INVALID_CLIENT_CREDENTIALS,challengeResponse);
    return;
  }
  context.success();
}
