{
  MultivaluedMap<String,String> params=context.getHttpRequest().getDecodedFormParameters();
  String clientAssertionType=params.getFirst(OAuth2Constants.CLIENT_ASSERTION_TYPE);
  String clientAssertion=params.getFirst(OAuth2Constants.CLIENT_ASSERTION);
  if (clientAssertionType == null) {
    Response challengeResponse=ClientAuthUtil.errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),"invalid_client","Parameter client_assertion_type is missing");
    context.challenge(challengeResponse);
    return;
  }
  if (!clientAssertionType.equals(OAuth2Constants.CLIENT_ASSERTION_TYPE_JWT)) {
    Response challengeResponse=ClientAuthUtil.errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),"invalid_client","Parameter client_assertion_type has value '" + clientAssertionType + "' but expected is '"+ OAuth2Constants.CLIENT_ASSERTION_TYPE_JWT+ "'");
    context.challenge(challengeResponse);
    return;
  }
  if (clientAssertion == null) {
    Response challengeResponse=ClientAuthUtil.errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),"invalid_client","client_assertion parameter missing");
    context.failure(AuthenticationFlowError.INVALID_CLIENT_CREDENTIALS,challengeResponse);
    return;
  }
  try {
    JWSInput jws=new JWSInput(clientAssertion);
    JsonWebToken token=jws.readJsonContent(JsonWebToken.class);
    RealmModel realm=context.getRealm();
    String clientId=token.getSubject();
    if (clientId == null) {
      throw new RuntimeException("Can't identify client. Issuer missing on JWT token");
    }
    context.getEvent().client(clientId);
    ClientModel client=realm.getClientByClientId(clientId);
    if (client == null) {
      context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND,null);
      return;
    }
 else {
      context.setClient(client);
    }
    if (!client.isEnabled()) {
      context.failure(AuthenticationFlowError.CLIENT_DISABLED,null);
      return;
    }
    String encodedCertificate=client.getAttribute(CERTIFICATE_ATTR);
    if (encodedCertificate == null) {
      Response challengeResponse=ClientAuthUtil.errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),"unauthorized_client","Client '" + clientId + "' doesn't have certificate configured");
      context.failure(AuthenticationFlowError.CLIENT_CREDENTIALS_SETUP_REQUIRED,challengeResponse);
      return;
    }
    X509Certificate clientCert=KeycloakModelUtils.getCertificate(encodedCertificate);
    PublicKey clientPublicKey=clientCert.getPublicKey();
    boolean signatureValid;
    try {
      signatureValid=RSAProvider.verify(jws,clientPublicKey);
    }
 catch (    RuntimeException e) {
      Throwable cause=e.getCause() != null ? e.getCause() : e;
      throw new RuntimeException("Signature on JWT token failed validation",cause);
    }
    if (!signatureValid) {
      throw new RuntimeException("Signature on JWT token failed validation");
    }
    String expectedAudience=Urls.realmIssuer(context.getUriInfo().getBaseUri(),realm.getName());
    if (!token.hasAudience(expectedAudience)) {
      throw new RuntimeException("Token audience doesn't match domain. Realm audience is '" + expectedAudience + "' but audience from token is '"+ Arrays.asList(token.getAudience()).toString()+ "'");
    }
    if (!token.isActive()) {
      throw new RuntimeException("Token is not active");
    }
    if (token.getExpiration() == 0 && token.getIssuedAt() + 10 < Time.currentTime()) {
      throw new RuntimeException("Token is not active");
    }
    context.success();
  }
 catch (  Exception e) {
    logger.errorValidatingAssertion(e);
    Response challengeResponse=ClientAuthUtil.errorResponse(Response.Status.BAD_REQUEST.getStatusCode(),"unauthorized_client","Client authentication with signed JWT failed: " + e.getMessage());
    context.failure(AuthenticationFlowError.INVALID_CLIENT_CREDENTIALS,challengeResponse);
  }
}
