{
  MultivaluedMap<String,String> formData=context.getHttpRequest().getDecodedFormParameters();
  List<FormMessage> errors=new ArrayList<>();
  String eventError=Errors.INVALID_REGISTRATION;
  if (Validation.isBlank(formData.getFirst((RegistrationPage.FIELD_FIRST_NAME)))) {
    errors.add(new FormMessage(RegistrationPage.FIELD_FIRST_NAME,Messages.MISSING_FIRST_NAME));
  }
  if (Validation.isBlank(formData.getFirst((RegistrationPage.FIELD_LAST_NAME)))) {
    errors.add(new FormMessage(RegistrationPage.FIELD_LAST_NAME,Messages.MISSING_LAST_NAME));
  }
  String email=formData.getFirst(Validation.FIELD_EMAIL);
  if (Validation.isBlank(email)) {
    errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL,Messages.MISSING_EMAIL));
  }
 else   if (!Validation.isEmailValid(email)) {
    formData.remove(Validation.FIELD_EMAIL);
    errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL,Messages.INVALID_EMAIL));
  }
  if (context.getSession().users().getUserByEmail(email,context.getRealm()) != null) {
    eventError=Errors.EMAIL_IN_USE;
    formData.remove(Validation.FIELD_EMAIL);
    errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL,Messages.EMAIL_EXISTS));
  }
  if (errors.size() > 0) {
    context.getEvent().error(eventError);
    Response challenge=context.getFormAuthenticator().createChallenge(context,formData,errors);
    context.challenge(challenge);
    return;
  }
 else {
    context.success();
  }
}
