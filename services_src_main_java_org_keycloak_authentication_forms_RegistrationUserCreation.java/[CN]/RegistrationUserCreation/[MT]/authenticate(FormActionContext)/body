{
  MultivaluedMap<String,String> formData=context.getHttpRequest().getDecodedFormParameters();
  String email=formData.getFirst(Validation.FIELD_EMAIL);
  String username=formData.getFirst(RegistrationPage.FIELD_USERNAME);
  if (context.getRealm().isRegistrationEmailAsUsername()) {
    username=formData.getFirst(RegistrationPage.FIELD_EMAIL);
  }
  UserModel user=context.getSession().users().addUser(context.getRealm(),username);
  user.setEnabled(true);
  user.setFirstName(formData.getFirst("firstName"));
  user.setLastName(formData.getFirst("lastName"));
  user.setEmail(email);
  context.getClientSession().setNote(OIDCLoginProtocol.LOGIN_HINT_PARAM,username);
  AttributeFormDataProcessor.process(formData,context.getRealm(),user);
  context.setUser(user);
  AuthenticationExecutionModel.Requirement categoryRequirement=context.getCategoryRequirementFromCurrentFlow(UserCredentialModel.PASSWORD);
  boolean passwordRequired=categoryRequirement != null && categoryRequirement != AuthenticationExecutionModel.Requirement.DISABLED;
  if (passwordRequired) {
    String password=formData.getFirst(RegistrationPage.FIELD_PASSWORD);
    UserCredentialModel credentials=new UserCredentialModel();
    credentials.setType(CredentialRepresentation.PASSWORD);
    credentials.setValue(password);
    try {
      context.getSession().users().updateCredential(context.getRealm(),user,UserCredentialModel.password(formData.getFirst("password")));
    }
 catch (    Exception me) {
      user.addRequiredAction(UserModel.RequiredAction.UPDATE_PASSWORD);
    }
  }
  context.getEvent().user(user);
  context.success();
}
