{
  MultivaluedMap<String,String> formData=context.getHttpRequest().getDecodedFormParameters();
  List<FormMessage> errors=new ArrayList<>();
  context.getEvent().detail(Details.REGISTER_METHOD,"form");
  String email=formData.getFirst(Validation.FIELD_EMAIL);
  String username=formData.getFirst(RegistrationPage.FIELD_USERNAME);
  context.getEvent().detail(Details.USERNAME,username);
  context.getEvent().detail(Details.EMAIL,email);
  String usernameField=RegistrationPage.FIELD_USERNAME;
  if (context.getRealm().isRegistrationEmailAsUsername()) {
    context.getEvent().detail(Details.USERNAME,email);
    if (Validation.isBlank(email)) {
      errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL,Messages.MISSING_EMAIL));
    }
 else     if (!Validation.isEmailValid(email)) {
      errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL,Messages.INVALID_EMAIL));
      formData.remove(Validation.FIELD_EMAIL);
    }
    if (errors.size() > 0) {
      context.error(Errors.INVALID_REGISTRATION);
      context.validationError(formData,errors);
      return;
    }
    if (email != null && context.getSession().users().getUserByEmail(email,context.getRealm()) != null) {
      context.error(Errors.EMAIL_IN_USE);
      formData.remove(Validation.FIELD_EMAIL);
      errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL,Messages.EMAIL_EXISTS));
      context.validationError(formData,errors);
      return;
    }
  }
 else {
    if (Validation.isBlank(username)) {
      context.error(Errors.INVALID_REGISTRATION);
      errors.add(new FormMessage(RegistrationPage.FIELD_USERNAME,Messages.MISSING_USERNAME));
      context.validationError(formData,errors);
      return;
    }
    if (context.getSession().users().getUserByUsername(username,context.getRealm()) != null) {
      context.error(Errors.USERNAME_IN_USE);
      errors.add(new FormMessage(usernameField,Messages.USERNAME_EXISTS));
      formData.remove(Validation.FIELD_USERNAME);
      context.validationError(formData,errors);
      return;
    }
  }
  context.success();
}
