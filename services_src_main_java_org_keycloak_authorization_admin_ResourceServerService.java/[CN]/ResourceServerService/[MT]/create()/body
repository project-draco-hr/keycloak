{
  if (resourceServer == null) {
    RoleModel umaProtectionRole=client.getRole(Constants.AUTHZ_UMA_PROTECTION);
    if (umaProtectionRole == null) {
      umaProtectionRole=client.addRole(Constants.AUTHZ_UMA_PROTECTION);
    }
    KeycloakSession session=this.authorization.getKeycloakSession();
    UserModel serviceAccount=session.users().getUserByServiceAccountClient(client);
    if (!serviceAccount.hasRole(umaProtectionRole)) {
      serviceAccount.grantRole(umaProtectionRole);
    }
    this.resourceServer=this.authorization.getStoreFactory().getResourceServerStore().create(this.client.getId());
    ResourceRepresentation defaultResource=new ResourceRepresentation();
    defaultResource.setName("Default Resource");
    defaultResource.setUri("/*");
    defaultResource.setType("urn:" + this.client.getClientId() + ":resources:default");
    getResourceSetResource().create(defaultResource);
    PolicyRepresentation defaultPolicy=new PolicyRepresentation();
    defaultPolicy.setName("Only From Realm Policy");
    defaultPolicy.setDescription("A policy that grants access only for users within this realm");
    defaultPolicy.setType("js");
    defaultPolicy.setDecisionStrategy(Policy.DecisionStrategy.AFFIRMATIVE);
    defaultPolicy.setLogic(Policy.Logic.POSITIVE);
    HashMap<String,String> defaultPolicyConfig=new HashMap<>();
    defaultPolicyConfig.put("code","var context = $evaluation.getContext();\n" + "\n" + "// using attributes from the evaluation context to obtain the realm\n"+ "var contextAttributes = context.getAttributes();\n"+ "var realmName = contextAttributes.getValue('kc.authz.context.authc.realm').asString(0);\n"+ "\n"+ "// using attributes from the identity to obtain the issuer\n"+ "var identity = context.getIdentity();\n"+ "var identityAttributes = identity.getAttributes();\n"+ "var issuer = identityAttributes.getValue('iss').asString(0);\n"+ "\n"+ "// only users from the realm have access granted \n"+ "if (issuer.endsWith(realmName)) {\n"+ "    $evaluation.grant();\n"+ "}");
    defaultPolicy.setConfig(defaultPolicyConfig);
    getPolicyResource().create(defaultPolicy);
    PolicyRepresentation defaultPermission=new PolicyRepresentation();
    defaultPermission.setName("Default Permission");
    defaultPermission.setType("resource");
    defaultPermission.setDescription("A permission that applies to the default resource type");
    defaultPermission.setDecisionStrategy(Policy.DecisionStrategy.UNANIMOUS);
    defaultPermission.setLogic(Policy.Logic.POSITIVE);
    HashMap<String,String> defaultPermissionConfig=new HashMap<>();
    defaultPermissionConfig.put("default","true");
    defaultPermissionConfig.put("defaultResourceType",defaultResource.getType());
    defaultPermissionConfig.put("applyPolicies","[\"Only From Realm Policy\"]");
    defaultPermission.setConfig(defaultPermissionConfig);
    getPolicyResource().create(defaultPermission);
  }
}
