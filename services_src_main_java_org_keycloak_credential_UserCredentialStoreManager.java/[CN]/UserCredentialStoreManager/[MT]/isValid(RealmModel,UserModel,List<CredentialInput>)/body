{
  List<CredentialInput> toValidate=new LinkedList<>();
  toValidate.addAll(inputs);
  if (!StorageId.isLocalStorage(user)) {
    String providerId=StorageId.resolveProviderId(user);
    UserStorageProvider provider=UserStorageManager.getStorageProvider(session,realm,providerId);
    if (provider instanceof CredentialInputValidator) {
      Iterator<CredentialInput> it=toValidate.iterator();
      while (it.hasNext()) {
        CredentialInput input=it.next();
        CredentialInputValidator validator=(CredentialInputValidator)provider;
        if (validator.supportsCredentialType(input.getType()) && validator.isValid(realm,user,input)) {
          it.remove();
        }
      }
    }
  }
 else {
    UserFederationProvider link=session.users().getFederationLink(realm,user);
    if (link != null) {
      session.users().validateUser(realm,user);
      validate(realm,user,toValidate,link);
    }
 else     if (user.getFederationLink() != null) {
      UserStorageProvider provider=UserStorageManager.getStorageProvider(session,realm,user.getFederationLink());
      if (provider != null && provider instanceof CredentialInputValidator) {
        validate(realm,user,toValidate,((CredentialInputValidator)provider));
      }
    }
  }
  if (toValidate.isEmpty())   return true;
  List<CredentialInputValidator> credentialProviders=getCredentialProviders(realm,CredentialInputValidator.class);
  for (  CredentialInputValidator validator : credentialProviders) {
    validate(realm,user,toValidate,validator);
  }
  return toValidate.isEmpty();
}
