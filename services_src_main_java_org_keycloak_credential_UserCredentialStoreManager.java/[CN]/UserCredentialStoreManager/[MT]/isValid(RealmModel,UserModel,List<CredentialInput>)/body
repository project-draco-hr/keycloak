{
  List<CredentialInput> toValidate=new LinkedList<>();
  toValidate.addAll(inputs);
  if (!StorageId.isLocalStorage(user)) {
    String providerId=StorageId.resolveProviderId(user);
    UserStorageProvider provider=UserStorageManager.getStorageProvider(session,realm,providerId);
    if (provider instanceof CredentialInputValidator) {
      Iterator<CredentialInput> it=toValidate.iterator();
      while (it.hasNext()) {
        CredentialInput input=it.next();
        CredentialInputValidator validator=(CredentialInputValidator)provider;
        if (validator.supportsCredentialType(input.getType()) && validator.isValid(realm,user,input)) {
          it.remove();
        }
      }
    }
  }
  if (toValidate.isEmpty())   return true;
  List<ComponentModel> components=getCredentialProviderComponents(realm);
  for (  ComponentModel component : components) {
    CredentialProviderFactory factory=(CredentialProviderFactory)session.getKeycloakSessionFactory().getProviderFactory(CredentialProvider.class,component.getProviderId());
    if (!Types.supports(CredentialInputValidator.class,factory,CredentialProviderFactory.class))     continue;
    Iterator<CredentialInput> it=toValidate.iterator();
    while (it.hasNext()) {
      CredentialInput input=it.next();
      CredentialInputValidator validator=(CredentialInputValidator)session.getAttribute(component.getId());
      if (validator == null) {
        validator=(CredentialInputValidator)factory.create(session,component);
        session.setAttribute(component.getId(),validator);
      }
      if (validator.supportsCredentialType(input.getType()) && validator.isValid(realm,user,input)) {
        it.remove();
      }
    }
  }
  return toValidate.isEmpty();
}
