{
  UserRepresentation userRep=ModelToRepresentation.toRepresentation(session,realm,user);
  Set<FederatedIdentityModel> socialLinks=session.users().getFederatedIdentities(user,realm);
  List<FederatedIdentityRepresentation> socialLinkReps=new ArrayList<FederatedIdentityRepresentation>();
  for (  FederatedIdentityModel socialLink : socialLinks) {
    FederatedIdentityRepresentation socialLinkRep=exportSocialLink(socialLink);
    socialLinkReps.add(socialLinkRep);
  }
  if (socialLinkReps.size() > 0) {
    userRep.setFederatedIdentities(socialLinkReps);
  }
  Set<RoleModel> roles=user.getRoleMappings();
  List<String> realmRoleNames=new ArrayList<>();
  Map<String,List<String>> clientRoleNames=new HashMap<>();
  for (  RoleModel role : roles) {
    if (role.getContainer() instanceof RealmModel) {
      realmRoleNames.add(role.getName());
    }
 else {
      ClientModel client=(ClientModel)role.getContainer();
      String clientId=client.getClientId();
      List<String> currentClientRoles=clientRoleNames.get(clientId);
      if (currentClientRoles == null) {
        currentClientRoles=new ArrayList<>();
        clientRoleNames.put(clientId,currentClientRoles);
      }
      currentClientRoles.add(role.getName());
    }
  }
  if (realmRoleNames.size() > 0) {
    userRep.setRealmRoles(realmRoleNames);
  }
  if (clientRoleNames.size() > 0) {
    userRep.setClientRoles(clientRoleNames);
  }
  List<CredentialModel> creds=session.userCredentialManager().getStoredCredentials(realm,user);
  List<CredentialRepresentation> credReps=new ArrayList<CredentialRepresentation>();
  for (  CredentialModel cred : creds) {
    CredentialRepresentation credRep=exportCredential(cred);
    credReps.add(credRep);
  }
  userRep.setCredentials(credReps);
  userRep.setFederationLink(user.getFederationLink());
  List<UserConsentModel> consents=session.users().getConsents(realm,user);
  LinkedList<UserConsentRepresentation> consentReps=new LinkedList<UserConsentRepresentation>();
  for (  UserConsentModel consent : consents) {
    UserConsentRepresentation consentRep=ModelToRepresentation.toRepresentation(consent);
    consentReps.add(consentRep);
  }
  if (consentReps.size() > 0) {
    userRep.setClientConsents(consentReps);
  }
  if (user.getServiceAccountClientLink() != null) {
    String clientInternalId=user.getServiceAccountClientLink();
    ClientModel client=realm.getClientById(clientInternalId);
    if (client != null) {
      userRep.setServiceAccountClientId(client.getClientId());
    }
  }
  List<String> groups=new LinkedList<>();
  for (  GroupModel group : user.getGroups()) {
    groups.add(ModelToRepresentation.buildGroupPath(group));
  }
  userRep.setGroups(groups);
  return userRep;
}
