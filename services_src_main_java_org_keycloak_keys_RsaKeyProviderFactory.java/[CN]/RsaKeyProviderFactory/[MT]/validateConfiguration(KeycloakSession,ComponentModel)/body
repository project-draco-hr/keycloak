{
  super.validateConfiguration(session,model);
  ConfigurationValidationHelper.check(model).checkSingle(Attributes.PRIVATE_KEY_PROPERTY,true).checkSingle(Attributes.CERTIFICATE_PROPERTY,false);
  KeyPair keyPair;
  try {
    PrivateKey privateKey=PemUtils.decodePrivateKey(model.get(Attributes.PRIVATE_KEY_KEY));
    PublicKey publicKey=KeyUtils.extractPublicKey(privateKey);
    keyPair=new KeyPair(publicKey,privateKey);
  }
 catch (  Throwable t) {
    throw new ComponentValidationException("Failed to decode private key",t);
  }
  if (model.contains(Attributes.CERTIFICATE_KEY)) {
    Certificate certificate=null;
    try {
      certificate=PemUtils.decodeCertificate(model.get(Attributes.CERTIFICATE_KEY));
    }
 catch (    Throwable t) {
      throw new ComponentValidationException("Failed to decode certificate",t);
    }
    if (certificate == null) {
      throw new ComponentValidationException("Failed to decode certificate");
    }
    if (!certificate.getPublicKey().equals(keyPair.getPublic())) {
      throw new ComponentValidationException("Certificate does not match private key");
    }
  }
 else {
    try {
      RealmModel realm=session.realms().getRealm(model.getParentId());
      Certificate certificate=CertificateUtils.generateV1SelfSignedCertificate(keyPair,realm.getName());
      model.put(Attributes.CERTIFICATE_KEY,PemUtils.encodeCertificate(certificate));
    }
 catch (    Throwable t) {
      throw new ComponentValidationException("Failed to generate self-signed certificate");
    }
  }
}
