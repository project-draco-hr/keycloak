{
  PartialImportResults results=new PartialImportResults();
  Map<String,List<RoleRepresentation>> repList=getRepList(partialImportRep);
  if ((repList == null) || repList.isEmpty())   return results;
  final Map<String,Set<RoleRepresentation>> toOverwrite=new HashMap<>();
  final Map<String,Set<RoleRepresentation>> toSkip=new HashMap<>();
  prepare(partialImportRep,realm,session,toOverwrite,toSkip);
  for (  String clientId : toOverwrite.keySet()) {
    for (    RoleRepresentation roleRep : toOverwrite.get(clientId)) {
      System.out.println("overwriting " + getResourceType() + " "+ getCombinedName(clientId,roleRep));
      try {
        overwrite(realm,session,clientId,roleRep);
      }
 catch (      Exception e) {
        throw new ErrorResponseException(ErrorResponse.error(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR));
      }
      String modelId=getModelId(realm,clientId);
      results.addResult(overwritten(clientId,modelId,roleRep));
    }
  }
  for (  String clientId : toSkip.keySet()) {
    for (    RoleRepresentation roleRep : toSkip.get(clientId)) {
      System.out.println("skipping " + getResourceType() + " "+ getCombinedName(clientId,roleRep));
      String modelId=getModelId(realm,clientId);
      results.addResult(skipped(clientId,modelId,roleRep));
    }
  }
  for (  String clientId : repList.keySet()) {
    for (    RoleRepresentation roleRep : repList.get(clientId)) {
      if (toOverwrite.get(clientId).contains(roleRep))       continue;
      if (toSkip.get(clientId).contains(roleRep))       continue;
      try {
        System.out.println("adding " + getResourceType() + " "+ getCombinedName(clientId,roleRep));
        create(realm,session,clientId,roleRep);
        String modelId=getModelId(realm,clientId);
        results.addResult(added(clientId,modelId,roleRep));
      }
 catch (      Exception e) {
        throw new ErrorResponseException(ErrorResponse.error(e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR));
      }
    }
  }
  return results;
}
