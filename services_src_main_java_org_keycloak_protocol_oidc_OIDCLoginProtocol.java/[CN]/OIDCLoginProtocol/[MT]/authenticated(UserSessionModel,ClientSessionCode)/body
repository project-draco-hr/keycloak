{
  ClientSessionModel clientSession=accessCode.getClientSession();
  setupResponseTypeAndMode(clientSession);
  String redirect=clientSession.getRedirectUri();
  OIDCRedirectUriBuilder redirectUri=OIDCRedirectUriBuilder.fromUri(redirect,responseMode);
  String state=clientSession.getNote(OIDCLoginProtocol.STATE_PARAM);
  logger.debugv("redirectAccessCode: state: {0}",state);
  if (state != null)   redirectUri.addParam(OAuth2Constants.STATE,state);
  if (responseType.hasResponseType(OIDCResponseType.CODE)) {
    accessCode.setAction(ClientSessionModel.Action.CODE_TO_TOKEN.name());
    redirectUri.addParam(OAuth2Constants.CODE,accessCode.getCode());
  }
  if (responseType.isImplicitOrHybridFlow()) {
    TokenManager tokenManager=new TokenManager();
    TokenManager.AccessTokenResponseBuilder responseBuilder=tokenManager.responseBuilder(realm,clientSession.getClient(),event,session,userSession,clientSession).generateAccessToken();
    if (responseType.hasResponseType(OIDCResponseType.ID_TOKEN)) {
      responseBuilder.generateIDToken();
      if (responseType.hasResponseType(OIDCResponseType.TOKEN)) {
        responseBuilder.generateAccessTokenHash();
      }
      if (responseType.hasResponseType(OIDCResponseType.CODE)) {
        responseBuilder.generateCodeHash(accessCode.getCode());
      }
    }
    AccessTokenResponse res=responseBuilder.build();
    if (responseType.hasResponseType(OIDCResponseType.ID_TOKEN)) {
      redirectUri.addParam(OAuth2Constants.ID_TOKEN,res.getIdToken());
    }
    if (responseType.hasResponseType(OIDCResponseType.TOKEN)) {
      redirectUri.addParam(OAuth2Constants.ACCESS_TOKEN,res.getToken());
      redirectUri.addParam("token_type",res.getTokenType());
      redirectUri.addParam("session_state",res.getSessionState());
      redirectUri.addParam("expires_in",String.valueOf(res.getExpiresIn()));
    }
    redirectUri.addParam("not-before-policy",String.valueOf(res.getNotBeforePolicy()));
  }
  return redirectUri.build();
}
