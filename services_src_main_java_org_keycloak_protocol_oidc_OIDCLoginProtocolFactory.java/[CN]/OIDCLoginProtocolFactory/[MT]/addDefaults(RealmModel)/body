{
  int counter=0;
  OIDCUserModelMapper.addClaimMapper(realm,"username","username","preferred_username","String",true,"username",true,true,true);
  OIDCUserModelMapper.addClaimMapper(realm,"email","email","email","String",true,"email",true,true,true);
  OIDCUserModelMapper.addClaimMapper(realm,"given name","firstName","given_name","String",true,"given name",true,true,true);
  OIDCUserModelMapper.addClaimMapper(realm,"family name","lastName","family_name","String",true,"family name",true,true,true);
  OIDCUserModelMapper.addClaimMapper(realm,"email verified","emailVerified","email_verified","boolean",false,null,false,true,true);
  ProtocolMapperModel fullName=new ProtocolMapperModel();
  if (realm.getProtocolMapperByName(OIDCLoginProtocol.LOGIN_PROTOCOL,"full name") == null) {
    fullName.setName("full name");
    fullName.setProtocolMapper(OIDCFullNameMapper.PROVIDER_ID);
    fullName.setProtocol(OIDCLoginProtocol.LOGIN_PROTOCOL);
    fullName.setConsentRequired(true);
    fullName.setConsentText("full name");
    fullName.setAppliedByDefault(true);
    Map<String,String> config=new HashMap<String,String>();
    config.put(OIDCAttributeMapperHelper.INCLUDE_IN_ACCESS_TOKEN,"true");
    config.put(OIDCAttributeMapperHelper.INCLUDE_IN_ID_TOKEN,"true");
    fullName.setConfig(config);
    realm.addProtocolMapper(fullName);
  }
  ProtocolMapperModel address=new ProtocolMapperModel();
  if (realm.getProtocolMapperByName(OIDCLoginProtocol.LOGIN_PROTOCOL,"address") == null) {
    address.setName("address");
    address.setProtocolMapper(OIDCAddressMapper.PROVIDER_ID);
    address.setProtocol(OIDCLoginProtocol.LOGIN_PROTOCOL);
    address.setConsentRequired(true);
    address.setConsentText("address");
    address.setAppliedByDefault(false);
    Map<String,String> config=new HashMap<String,String>();
    config.put(OIDCAttributeMapperHelper.INCLUDE_IN_ACCESS_TOKEN,"true");
    config.put(OIDCAttributeMapperHelper.INCLUDE_IN_ID_TOKEN,"true");
    address.setConfig(config);
    realm.addProtocolMapper(address);
  }
}
