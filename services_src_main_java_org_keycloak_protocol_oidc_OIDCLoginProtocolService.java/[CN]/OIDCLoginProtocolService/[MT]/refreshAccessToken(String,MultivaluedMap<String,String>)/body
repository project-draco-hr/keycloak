{
  if (!checkSsl()) {
    return createError("https_required","HTTPS required",Response.Status.FORBIDDEN);
  }
  event.event(EventType.REFRESH_TOKEN);
  ClientModel client=authorizeClient(authorizationHeader,form,event);
  String refreshToken=form.getFirst(OAuth2Constants.REFRESH_TOKEN);
  if (refreshToken == null) {
    Map<String,String> error=new HashMap<String,String>();
    error.put(OAuth2Constants.ERROR,OAuthErrorException.INVALID_REQUEST);
    error.put(OAuth2Constants.ERROR_DESCRIPTION,"No refresh token");
    event.error(Errors.INVALID_TOKEN);
    return Response.status(Response.Status.BAD_REQUEST).entity(error).type("application/json").build();
  }
  AccessTokenResponse res;
  try {
    res=tokenManager.refreshAccessToken(session,uriInfo,clientConnection,realm,client,refreshToken,event);
  }
 catch (  OAuthErrorException e) {
    Map<String,String> error=new HashMap<String,String>();
    error.put(OAuth2Constants.ERROR,e.getError());
    if (e.getDescription() != null)     error.put(OAuth2Constants.ERROR_DESCRIPTION,e.getDescription());
    event.error(Errors.INVALID_TOKEN);
    return Response.status(Response.Status.BAD_REQUEST).entity(error).type("application/json").build();
  }
  event.success();
  return Cors.add(request,Response.ok(res,MediaType.APPLICATION_JSON_TYPE)).auth().allowedOrigins(client).allowedMethods("POST").exposedHeaders(Cors.ACCESS_CONTROL_ALLOW_METHODS).build();
}
