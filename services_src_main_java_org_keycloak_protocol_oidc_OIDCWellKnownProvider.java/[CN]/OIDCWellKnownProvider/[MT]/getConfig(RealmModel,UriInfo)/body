{
  UriBuilder uriBuilder=RealmsResource.protocolUrl(uriInfo);
  OIDCConfigurationRepresentation config=new OIDCConfigurationRepresentation();
  config.setIssuer(realm.getName());
  config.setAuthorizationEndpoint(uriBuilder.clone().path(OIDCLoginProtocolService.class,"auth").build(realm.getName(),OIDCLoginProtocol.LOGIN_PROTOCOL).toString());
  config.setTokenEndpoint(uriBuilder.clone().path(OIDCLoginProtocolService.class,"token").build(realm.getName(),OIDCLoginProtocol.LOGIN_PROTOCOL).toString());
  config.setUserinfoEndpoint(uriBuilder.clone().path(OIDCLoginProtocolService.class,"issueUserInfo").build(realm.getName(),OIDCLoginProtocol.LOGIN_PROTOCOL).toString());
  config.setJwksUri(uriBuilder.clone().path(OIDCLoginProtocolService.class,"certs").build(realm.getName(),OIDCLoginProtocol.LOGIN_PROTOCOL).toString());
  config.setIdTokenSigningAlgValuesSupported(DEFAULT_ID_TOKEN_SIGNING_ALG_VALUES_SUPPORTED);
  config.setResponseTypesSupported(DEFAULT_RESPONSE_TYPES_SUPPORTED);
  config.setSubjectTypesSupported(DEFAULT_SUBJECT_TYPES_SUPPORTED);
  config.setResponseModesSupported(DEFAULT_RESPONSE_MODES_SUPPORTED);
  if (!realm.isPasswordCredentialGrantAllowed()) {
    config.setGrantTypesSupported(DEFAULT_GRANT_TYPES_SUPPORTED);
  }
 else {
    List<String> grantTypes=new LinkedList<>(DEFAULT_GRANT_TYPES_SUPPORTED);
    grantTypes.add(OAuth2Constants.PASSWORD);
    config.setGrantTypesSupported(grantTypes);
  }
  return config;
}
