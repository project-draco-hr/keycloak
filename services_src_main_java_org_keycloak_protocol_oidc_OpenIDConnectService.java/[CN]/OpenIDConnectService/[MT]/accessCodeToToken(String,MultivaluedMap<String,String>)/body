{
  if (!checkSsl()) {
    throw new ForbiddenException("HTTPS required");
  }
  event.event(EventType.CODE_TO_TOKEN);
  if (!realm.isEnabled()) {
    event.error(Errors.REALM_DISABLED);
    throw new UnauthorizedException("Realm not enabled");
  }
  String code=formData.getFirst(OAuth2Constants.CODE);
  if (code == null) {
    Map<String,String> error=new HashMap<String,String>();
    error.put(OAuth2Constants.ERROR,"invalid_request");
    error.put(OAuth2Constants.ERROR_DESCRIPTION,"code not specified");
    event.error(Errors.INVALID_CODE);
    throw new BadRequestException("Code not specified",Response.status(Response.Status.BAD_REQUEST).entity(error).type("application/json").build());
  }
  ClientSessionCode accessCode=ClientSessionCode.parse(code,session,realm);
  if (accessCode == null) {
    String[] parts=code.split("\\.");
    if (parts.length == 2) {
      try {
        event.detail(Details.CODE_ID,new String(parts[1]));
      }
 catch (      Throwable t) {
      }
    }
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"Code not found");
    event.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  ClientSessionModel clientSession=accessCode.getClientSession();
  event.detail(Details.CODE_ID,clientSession.getId());
  if (!accessCode.isValid(ClientSessionModel.Action.CODE_TO_TOKEN)) {
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"Code is expired");
    event.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  accessCode.setAction(null);
  UserSessionModel userSession=clientSession.getUserSession();
  event.user(userSession.getUser());
  event.session(userSession.getId());
  ClientModel client=authorizeClient(authorizationHeader,formData,event);
  String redirectUri=clientSession.getRedirectUri();
  if (redirectUri != null && !redirectUri.equals(formData.getFirst(OAuth2Constants.REDIRECT_URI))) {
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"Incorrect redirect_uri");
    event.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  if (!client.getClientId().equals(clientSession.getClient().getClientId())) {
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"Auth error");
    event.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  UserModel user=session.users().getUserById(userSession.getUser().getId(),realm);
  if (user == null) {
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"User not found");
    event.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  if (!user.isEnabled()) {
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"User disabled");
    event.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  if (!AuthenticationManager.isSessionValid(realm,userSession)) {
    AuthenticationManager.logout(session,realm,userSession,uriInfo,clientConnection);
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"Session not active");
    event.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  String adapterSessionId=formData.getFirst(AdapterConstants.APPLICATION_SESSION_STATE);
  if (adapterSessionId != null) {
    String adapterSessionHost=formData.getFirst(AdapterConstants.APPLICATION_SESSION_HOST);
    logger.debugf("Adapter Session '%s' saved in ClientSession for client '%s'. Host is '%s'",adapterSessionId,client.getClientId(),adapterSessionHost);
    event.detail(AdapterConstants.APPLICATION_SESSION_STATE,adapterSessionId);
    clientSession.setNote(AdapterConstants.APPLICATION_SESSION_STATE,adapterSessionId);
    event.detail(AdapterConstants.APPLICATION_SESSION_HOST,adapterSessionHost);
    clientSession.setNote(AdapterConstants.APPLICATION_SESSION_HOST,adapterSessionHost);
  }
  AccessToken token=tokenManager.createClientAccessToken(accessCode.getRequestedRoles(),realm,client,user,userSession);
  try {
    tokenManager.verifyAccess(token,realm,client,user);
  }
 catch (  OAuthErrorException e) {
    Map<String,String> error=new HashMap<String,String>();
    error.put(OAuth2Constants.ERROR,e.getError());
    if (e.getDescription() != null)     error.put(OAuth2Constants.ERROR_DESCRIPTION,e.getDescription());
    event.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).entity(error).type("application/json").build();
  }
  AccessTokenResponse res=tokenManager.responseBuilder(realm,client,event).accessToken(token).generateIDToken().generateRefreshToken().build();
  event.success();
  return Cors.add(request,Response.ok(res)).auth().allowedOrigins(client).allowedMethods("POST").exposedHeaders(Cors.ACCESS_CONTROL_ALLOW_METHODS).build();
}
