{
  event.event(EventType.LOGIN);
  FrontPageInitializer pageInitializer=new FrontPageInitializer();
  pageInitializer.responseType=responseType;
  pageInitializer.redirect=redirect;
  pageInitializer.clientId=clientId;
  pageInitializer.scopeParam=scopeParam;
  pageInitializer.state=state;
  pageInitializer.prompt=prompt;
  pageInitializer.loginHint=loginHint;
  Response response=pageInitializer.processInput();
  if (response != null)   return response;
  ClientSessionModel clientSession=pageInitializer.clientSession;
  response=authManager.checkNonFormAuthentication(session,clientSession,realm,uriInfo,request,clientConnection,headers,event);
  if (response != null)   return response;
  if (prompt != null && prompt.equals("none")) {
    OpenIDConnect oauth=new OpenIDConnect(session,realm,uriInfo);
    return oauth.cancelLogin(clientSession);
  }
  String accessCode=new ClientSessionCode(realm,clientSession).getCode();
  List<RequiredCredentialModel> requiredCredentials=realm.getRequiredCredentials();
  if (requiredCredentials.isEmpty()) {
    List<IdentityProviderModel> identityProviders=realm.getIdentityProviders();
    if (!identityProviders.isEmpty()) {
      if (identityProviders.size() == 1) {
        return Response.temporaryRedirect(Urls.identityProviderAuthnRequest(this.uriInfo.getBaseUri(),identityProviders.get(0),this.realm,accessCode)).build();
      }
      return Flows.forms(session,realm,null,uriInfo).setError("Realm [" + this.realm.getName() + "] supports multiple identity providers. Could not determine which identity provider should be used to authenticate with.").createErrorPage();
    }
    return Flows.forms(session,realm,null,uriInfo).setError("Realm [" + this.realm.getName() + "] does not support any credential type.").createErrorPage();
  }
  LoginFormsProvider forms=Flows.forms(session,realm,clientSession.getClient(),uriInfo).setClientSessionCode(accessCode);
  String rememberMeUsername=AuthenticationManager.getRememberMeUsername(realm,headers);
  if (loginHint != null || rememberMeUsername != null) {
    MultivaluedMap<String,String> formData=new MultivaluedMapImpl<String,String>();
    if (loginHint != null) {
      formData.add(AuthenticationManager.FORM_USERNAME,loginHint);
    }
 else {
      formData.add(AuthenticationManager.FORM_USERNAME,rememberMeUsername);
      formData.add("rememberMe","on");
    }
    forms.setFormData(formData);
  }
  return forms.createLogin();
}
