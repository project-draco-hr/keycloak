{
  String accessCode=new ClientSessionCode(realm,clientSession).getCode();
  if (idpHint != null && !"".equals(idpHint)) {
    IdentityProviderModel identityProviderModel=realm.getIdentityProviderById(idpHint);
    if (identityProviderModel == null) {
      return Flows.forms(session,realm,null,uriInfo,headers).setError(Messages.IDENTITY_PROVIDER_NOT_FOUND,idpHint).createErrorPage();
    }
    return buildRedirectToIdentityProvider(idpHint,accessCode);
  }
  Response response=authManager.checkNonFormAuthentication(session,clientSession,realm,uriInfo,request,clientConnection,headers,event);
  if (response != null)   return response;
  HttpAuthenticationManager httpAuthManager=new HttpAuthenticationManager(session,clientSession,realm,uriInfo,request,clientConnection,event);
  HttpAuthenticationManager.HttpAuthOutput httpAuthOutput=httpAuthManager.spnegoAuthenticate(headers);
  if (httpAuthOutput.getResponse() != null)   return httpAuthOutput.getResponse();
  if (prompt != null && prompt.equals("none")) {
    OIDCLoginProtocol oauth=new OIDCLoginProtocol(session,realm,uriInfo,headers);
    return oauth.cancelLogin(clientSession);
  }
  List<IdentityProviderModel> identityProviders=realm.getIdentityProviders();
  for (  IdentityProviderModel identityProvider : identityProviders) {
    if (identityProvider.isAuthenticateByDefault()) {
      return buildRedirectToIdentityProvider(identityProvider.getId(),accessCode);
    }
  }
  List<RequiredCredentialModel> requiredCredentials=realm.getRequiredCredentials();
  if (requiredCredentials.isEmpty()) {
    if (!identityProviders.isEmpty()) {
      if (identityProviders.size() == 1) {
        return buildRedirectToIdentityProvider(identityProviders.get(0).getId(),accessCode);
      }
      return Flows.forms(session,realm,null,uriInfo,headers).setError(Messages.IDENTITY_PROVIDER_NOT_UNIQUE,realm.getName()).createErrorPage();
    }
    return Flows.forms(session,realm,null,uriInfo,headers).setError(Messages.REALM_SUPPORTS_NO_CREDENTIALS,realm.getName()).createErrorPage();
  }
  LoginFormsProvider forms=Flows.forms(session,realm,clientSession.getClient(),uriInfo,headers).setClientSessionCode(accessCode);
  if (httpAuthOutput.getChallenge() != null) {
    httpAuthOutput.getChallenge().sendChallenge(forms);
  }
  String rememberMeUsername=AuthenticationManager.getRememberMeUsername(realm,headers);
  if (loginHint != null || rememberMeUsername != null) {
    MultivaluedMap<String,String> formData=new MultivaluedMapImpl<String,String>();
    if (loginHint != null) {
      formData.add(AuthenticationManager.FORM_USERNAME,loginHint);
    }
 else {
      formData.add(AuthenticationManager.FORM_USERNAME,rememberMeUsername);
      formData.add("rememberMe","on");
    }
    forms.setFormData(formData);
  }
  return forms.createLogin();
}
