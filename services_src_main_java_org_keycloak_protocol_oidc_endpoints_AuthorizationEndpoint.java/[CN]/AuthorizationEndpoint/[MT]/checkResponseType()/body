{
  String responseType=request.getResponseType();
  if (responseType == null) {
    ServicesLogger.LOGGER.missingParameter(OAuth2Constants.RESPONSE_TYPE);
    event.error(Errors.INVALID_REQUEST);
    return redirectErrorToClient(OIDCResponseMode.QUERY,OAuthErrorException.INVALID_REQUEST,"Missing parameter: response_type");
  }
  event.detail(Details.RESPONSE_TYPE,responseType);
  try {
    parsedResponseType=OIDCResponseType.parse(responseType);
    if (action == null) {
      action=Action.CODE;
    }
  }
 catch (  IllegalArgumentException iae) {
    logger.error(iae.getMessage());
    event.error(Errors.INVALID_REQUEST);
    return redirectErrorToClient(OIDCResponseMode.QUERY,OAuthErrorException.UNSUPPORTED_RESPONSE_TYPE,null);
  }
  OIDCResponseMode parsedResponseMode=null;
  try {
    parsedResponseMode=OIDCResponseMode.parse(request.getResponseMode(),parsedResponseType);
  }
 catch (  IllegalArgumentException iae) {
    ServicesLogger.LOGGER.invalidParameter(OIDCLoginProtocol.RESPONSE_MODE_PARAM);
    event.error(Errors.INVALID_REQUEST);
    return redirectErrorToClient(OIDCResponseMode.QUERY,OAuthErrorException.INVALID_REQUEST,"Invalid parameter: response_mode");
  }
  event.detail(Details.RESPONSE_MODE,parsedResponseMode.toString().toLowerCase());
  if (parsedResponseType.isImplicitOrHybridFlow() && parsedResponseMode == OIDCResponseMode.QUERY) {
    ServicesLogger.LOGGER.responseModeQueryNotAllowed();
    event.error(Errors.INVALID_REQUEST);
    return redirectErrorToClient(OIDCResponseMode.QUERY,OAuthErrorException.INVALID_REQUEST,"Response_mode 'query' not allowed for implicit or hybrid flow");
  }
  if ((parsedResponseType.hasResponseType(OIDCResponseType.CODE) || parsedResponseType.hasResponseType(OIDCResponseType.NONE)) && !client.isStandardFlowEnabled()) {
    ServicesLogger.LOGGER.flowNotAllowed("Standard");
    event.error(Errors.NOT_ALLOWED);
    return redirectErrorToClient(parsedResponseMode,OAuthErrorException.UNSUPPORTED_RESPONSE_TYPE,"Client is not allowed to initiate browser login with given response_type. Standard flow is disabled for the client.");
  }
  if (parsedResponseType.isImplicitOrHybridFlow() && !client.isImplicitFlowEnabled()) {
    ServicesLogger.LOGGER.flowNotAllowed("Implicit");
    event.error(Errors.NOT_ALLOWED);
    return redirectErrorToClient(parsedResponseMode,OAuthErrorException.UNSUPPORTED_RESPONSE_TYPE,"Client is not allowed to initiate browser login with given response_type. Implicit flow is disabled for the client.");
  }
  this.parsedResponseMode=parsedResponseMode;
  return null;
}
