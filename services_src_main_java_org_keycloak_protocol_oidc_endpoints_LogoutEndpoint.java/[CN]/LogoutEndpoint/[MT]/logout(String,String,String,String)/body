{
  String redirect=postLogoutRedirectUri != null ? postLogoutRedirectUri : redirectUri;
  if (redirect != null) {
    String validatedUri=RedirectUtils.verifyRealmRedirectUri(uriInfo,redirect,realm);
    if (validatedUri == null) {
      event.event(EventType.LOGOUT);
      event.detail(Details.REDIRECT_URI,redirect);
      event.error(Errors.INVALID_REDIRECT_URI);
      return ErrorPage.error(session,Messages.INVALID_REDIRECT_URI);
    }
    redirect=validatedUri;
  }
  UserSessionModel userSession=null;
  boolean error=false;
  if (encodedIdToken != null) {
    try {
      IDToken idToken=tokenManager.verifyIDToken(realm,encodedIdToken);
      userSession=session.sessions().getUserSession(realm,idToken.getSessionState());
      if (userSession == null) {
        error=true;
      }
    }
 catch (    OAuthErrorException e) {
      error=true;
    }
    if (error) {
      event.event(EventType.LOGOUT);
      event.error(Errors.INVALID_TOKEN);
      return ErrorPage.error(session,Messages.SESSION_NOT_ACTIVE);
    }
  }
  AuthenticationManager.AuthResult authResult=authManager.authenticateIdentityCookie(session,realm,uriInfo,clientConnection,headers,false);
  if (authResult != null) {
    userSession=userSession != null ? userSession : authResult.getSession();
    if (redirect != null)     userSession.setNote(OIDCLoginProtocol.LOGOUT_REDIRECT_URI,redirect);
    if (state != null)     userSession.setNote(OIDCLoginProtocol.LOGOUT_STATE_PARAM,state);
    userSession.setNote(AuthenticationManager.KEYCLOAK_LOGOUT_PROTOCOL,OIDCLoginProtocol.LOGIN_PROTOCOL);
    logger.debug("Initiating OIDC browser logout");
    Response response=AuthenticationManager.browserLogout(session,realm,authResult.getSession(),uriInfo,clientConnection,headers);
    logger.debug("finishing OIDC browser logout");
    return response;
  }
 else   if (userSession != null) {
    event.event(EventType.LOGOUT);
    authManager.backchannelLogout(session,realm,userSession,uriInfo,clientConnection,headers,true);
    event.user(userSession.getUser()).session(userSession).success();
  }
  if (redirect != null) {
    UriBuilder uriBuilder=UriBuilder.fromUri(redirect);
    if (state != null)     uriBuilder.queryParam(OIDCLoginProtocol.STATE_PARAM,state);
    return Response.status(302).location(uriBuilder.build()).build();
  }
 else {
    return Response.ok().build();
  }
}
