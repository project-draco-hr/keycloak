{
  String code=formParams.getFirst(OAuth2Constants.CODE);
  if (code == null) {
    event.error(Errors.INVALID_CODE);
    throw new ErrorResponseException(OAuthErrorException.INVALID_REQUEST,"Missing parameter: " + OAuth2Constants.CODE,Response.Status.BAD_REQUEST);
  }
  ClientSessionCode accessCode=ClientSessionCode.parse(code,session,realm);
  if (accessCode == null) {
    String[] parts=code.split("\\.");
    if (parts.length == 2) {
      event.detail(Details.CODE_ID,parts[1]);
    }
    event.error(Errors.INVALID_CODE);
    throw new ErrorResponseException(OAuthErrorException.INVALID_GRANT,"Code not found",Response.Status.BAD_REQUEST);
  }
  ClientSessionModel clientSession=accessCode.getClientSession();
  event.detail(Details.CODE_ID,clientSession.getId());
  String codeExchanged=clientSession.getNote(CODE_EXCHANGED);
  if (codeExchanged != null && Boolean.parseBoolean(codeExchanged)) {
    session.sessions().removeClientSession(realm,clientSession);
    event.error(Errors.INVALID_CODE);
    throw new ErrorResponseException(OAuthErrorException.INVALID_GRANT,"Code used already",Response.Status.BAD_REQUEST);
  }
  if (!accessCode.isValid(ClientSessionModel.Action.CODE_TO_TOKEN.name(),ClientSessionCode.ActionType.CLIENT)) {
    event.error(Errors.INVALID_CODE);
    throw new ErrorResponseException(OAuthErrorException.INVALID_GRANT,"Code is expired",Response.Status.BAD_REQUEST);
  }
  accessCode.setAction(null);
  clientSession.setNote(CODE_EXCHANGED,"true");
  UserSessionModel userSession=clientSession.getUserSession();
  if (userSession == null) {
    event.error(Errors.USER_SESSION_NOT_FOUND);
    throw new ErrorResponseException(OAuthErrorException.INVALID_GRANT,"User session not found",Response.Status.BAD_REQUEST);
  }
  UserModel user=userSession.getUser();
  if (user == null) {
    event.error(Errors.USER_NOT_FOUND);
    throw new ErrorResponseException(OAuthErrorException.INVALID_GRANT,"User not found",Response.Status.BAD_REQUEST);
  }
  if (!user.isEnabled()) {
    event.error(Errors.USER_DISABLED);
    throw new ErrorResponseException(OAuthErrorException.INVALID_GRANT,"User disabled",Response.Status.BAD_REQUEST);
  }
  event.user(userSession.getUser());
  event.session(userSession.getId());
  String redirectUri=clientSession.getNote(OIDCLoginProtocol.REDIRECT_URI_PARAM);
  if (redirectUri != null && !redirectUri.equals(formParams.getFirst(OAuth2Constants.REDIRECT_URI))) {
    event.error(Errors.INVALID_CODE);
    throw new ErrorResponseException(OAuthErrorException.INVALID_GRANT,"Incorrect redirect_uri",Response.Status.BAD_REQUEST);
  }
  if (!client.getClientId().equals(clientSession.getClient().getClientId())) {
    event.error(Errors.INVALID_CODE);
    throw new ErrorResponseException(OAuthErrorException.INVALID_GRANT,"Auth error",Response.Status.BAD_REQUEST);
  }
  if (!client.isStandardFlowEnabled()) {
    event.error(Errors.NOT_ALLOWED);
    throw new ErrorResponseException(OAuthErrorException.INVALID_GRANT,"Client not allowed to exchange code",Response.Status.BAD_REQUEST);
  }
  if (!AuthenticationManager.isSessionValid(realm,userSession)) {
    event.error(Errors.USER_SESSION_NOT_FOUND);
    throw new ErrorResponseException(OAuthErrorException.INVALID_GRANT,"Session not active",Response.Status.BAD_REQUEST);
  }
  updateClientSession(clientSession);
  updateUserSessionFromClientAuth(userSession);
  AccessToken token=tokenManager.createClientAccessToken(session,accessCode.getRequestedRoles(),realm,client,user,userSession,clientSession);
  AccessTokenResponse res=tokenManager.responseBuilder(realm,client,event,session,userSession,clientSession).accessToken(token).generateIDToken().generateRefreshToken().build();
  event.success();
  return Cors.add(request,Response.ok(res).type(MediaType.APPLICATION_JSON_TYPE)).auth().allowedOrigins(client).allowedMethods("POST").exposedHeaders(Cors.ACCESS_CONTROL_ALLOW_METHODS).build();
}
