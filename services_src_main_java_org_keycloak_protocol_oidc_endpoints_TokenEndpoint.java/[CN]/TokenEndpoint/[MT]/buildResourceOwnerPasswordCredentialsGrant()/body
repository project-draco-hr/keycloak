{
  if (!realm.isPasswordCredentialGrantAllowed()) {
    throw new ErrorResponseException("not_enabled","Direct Grant REST API not enabled",Response.Status.FORBIDDEN);
  }
  event.detail(Details.AUTH_METHOD,"oauth_credentials").detail(Details.RESPONSE_TYPE,"token");
  String username=formParams.getFirst(AuthenticationManager.FORM_USERNAME);
  if (username == null) {
    event.error(Errors.USERNAME_MISSING);
    throw new ErrorResponseException("invalid_request","Missing parameter: username",Response.Status.UNAUTHORIZED);
  }
  event.detail(Details.USERNAME,username);
  UserModel user=KeycloakModelUtils.findUserByNameOrEmail(session,realm,username);
  if (user != null)   event.user(user);
  AuthenticationManager.AuthenticationStatus authenticationStatus=authManager.authenticateForm(session,clientConnection,realm,formParams);
  Map<String,String> err;
switch (authenticationStatus) {
case SUCCESS:
    break;
case ACCOUNT_TEMPORARILY_DISABLED:
case ACTIONS_REQUIRED:
  event.error(Errors.USER_TEMPORARILY_DISABLED);
throw new ErrorResponseException("invalid_grant","Account temporarily disabled",Response.Status.BAD_REQUEST);
case ACCOUNT_DISABLED:
event.error(Errors.USER_DISABLED);
throw new ErrorResponseException("invalid_grant","Account disabled",Response.Status.BAD_REQUEST);
default :
event.error(Errors.INVALID_USER_CREDENTIALS);
throw new ErrorResponseException("invalid_grant","Invalid user credentials",Response.Status.UNAUTHORIZED);
}
String scope=formParams.getFirst(OAuth2Constants.SCOPE);
UserSessionProvider sessions=session.sessions();
UserSessionModel userSession=sessions.createUserSession(realm,user,username,clientConnection.getRemoteAddr(),"oauth_credentials",false,null,null);
event.session(userSession);
ClientSessionModel clientSession=sessions.createClientSession(realm,client);
clientSession.setAuthMethod(OIDCLoginProtocol.LOGIN_PROTOCOL);
clientSession.setNote(OIDCLoginProtocol.ISSUER,Urls.realmIssuer(uriInfo.getBaseUri(),realm.getName()));
TokenManager.attachClientSession(userSession,clientSession);
AccessTokenResponse res=tokenManager.responseBuilder(realm,client,event,session,userSession,clientSession).generateAccessToken(session,scope,client,user,userSession,clientSession).generateRefreshToken().generateIDToken().build();
event.success();
return Response.ok(res,MediaType.APPLICATION_JSON_TYPE).build();
}
