{
  event.detail(Details.AUTH_METHOD,"oauth_credentials");
  if (!client.isDirectAccessGrantsEnabled()) {
    event.error(Errors.NOT_ALLOWED);
    throw new ErrorResponseException(OAuthErrorException.INVALID_GRANT,"Client not allowed for direct access grants",Response.Status.BAD_REQUEST);
  }
  if (client.isConsentRequired()) {
    event.error(Errors.CONSENT_DENIED);
    throw new ErrorResponseException(OAuthErrorException.INVALID_CLIENT,"Client requires user consent",Response.Status.BAD_REQUEST);
  }
  String scope=formParams.getFirst(OAuth2Constants.SCOPE);
  UserSessionProvider sessions=session.sessions();
  ClientSessionModel clientSession=sessions.createClientSession(realm,client);
  clientSession.setAuthMethod(OIDCLoginProtocol.LOGIN_PROTOCOL);
  clientSession.setAction(ClientSessionModel.Action.AUTHENTICATE.name());
  clientSession.setNote(OIDCLoginProtocol.ISSUER,Urls.realmIssuer(uriInfo.getBaseUri(),realm.getName()));
  clientSession.setNote(OIDCLoginProtocol.SCOPE_PARAM,scope);
  AuthenticationFlowModel flow=realm.getDirectGrantFlow();
  String flowId=flow.getId();
  AuthenticationProcessor processor=new AuthenticationProcessor();
  processor.setClientSession(clientSession).setFlowId(flowId).setConnection(clientConnection).setEventBuilder(event).setRealm(realm).setSession(session).setUriInfo(uriInfo).setRequest(request);
  Response challenge=processor.authenticateOnly();
  if (challenge != null)   return challenge;
  processor.evaluateRequiredActionTriggers();
  UserModel user=clientSession.getAuthenticatedUser();
  if (user.getRequiredActions() != null && user.getRequiredActions().size() > 0) {
    event.error(Errors.RESOLVE_REQUIRED_ACTIONS);
    throw new ErrorResponseException(OAuthErrorException.INVALID_GRANT,"Account is not fully set up",Response.Status.BAD_REQUEST);
  }
  processor.attachSession();
  UserSessionModel userSession=processor.getUserSession();
  updateUserSessionFromClientAuth(userSession);
  AccessTokenResponse res=tokenManager.responseBuilder(realm,client,event,session,userSession,clientSession).generateAccessToken().generateRefreshToken().generateIDToken().build();
  event.success();
  return Cors.add(request,Response.ok(res,MediaType.APPLICATION_JSON_TYPE)).auth().allowedOrigins(client).allowedMethods("POST").exposedHeaders(Cors.ACCESS_CONTROL_ALLOW_METHODS).build();
}
