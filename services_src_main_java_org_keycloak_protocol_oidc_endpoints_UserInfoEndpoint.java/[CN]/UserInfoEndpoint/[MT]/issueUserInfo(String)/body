{
  EventBuilder event=new EventBuilder(realm,session,clientConnection).event(EventType.USER_INFO_REQUEST).detail(Details.AUTH_METHOD,Details.VALIDATE_ACCESS_TOKEN);
  if (tokenString == null) {
    event.error(Errors.INVALID_TOKEN);
    throw new ErrorResponseException(OAuthErrorException.INVALID_REQUEST,"Token not provided",Response.Status.BAD_REQUEST);
  }
  AccessToken token=null;
  try {
    token=RSATokenVerifier.verifyToken(tokenString,realm.getPublicKey(),Urls.realmIssuer(uriInfo.getBaseUri(),realm.getName()),true,true);
  }
 catch (  VerificationException e) {
    event.error(Errors.INVALID_TOKEN);
    throw new ErrorResponseException(OAuthErrorException.INVALID_TOKEN,"Token invalid: " + e.getMessage(),Response.Status.UNAUTHORIZED);
  }
  UserSessionModel userSession=session.sessions().getUserSession(realm,token.getSessionState());
  ClientSessionModel clientSession=session.sessions().getClientSession(token.getClientSession());
  if (userSession == null) {
    event.error(Errors.USER_SESSION_NOT_FOUND);
    throw new ErrorResponseException(OAuthErrorException.INVALID_REQUEST,"User session not found",Response.Status.BAD_REQUEST);
  }
  event.session(userSession);
  UserModel userModel=userSession.getUser();
  if (userModel == null) {
    event.error(Errors.USER_NOT_FOUND);
    throw new ErrorResponseException(OAuthErrorException.INVALID_REQUEST,"User not found",Response.Status.BAD_REQUEST);
  }
  event.user(userModel).detail(Details.USERNAME,userModel.getUsername());
  if (clientSession == null || !AuthenticationManager.isSessionValid(realm,userSession)) {
    event.error(Errors.SESSION_EXPIRED);
    throw new ErrorResponseException(OAuthErrorException.INVALID_TOKEN,"Session expired",Response.Status.UNAUTHORIZED);
  }
  ClientModel clientModel=realm.getClientByClientId(token.getIssuedFor());
  if (clientModel == null) {
    event.error(Errors.CLIENT_NOT_FOUND);
    throw new ErrorResponseException(OAuthErrorException.INVALID_REQUEST,"Client not found",Response.Status.BAD_REQUEST);
  }
  event.client(clientModel);
  if (!clientModel.isEnabled()) {
    event.error(Errors.CLIENT_DISABLED);
    throw new ErrorResponseException(OAuthErrorException.INVALID_REQUEST,"Client disabled",Response.Status.BAD_REQUEST);
  }
  AccessToken userInfo=new AccessToken();
  tokenManager.transformUserInfoAccessToken(session,userInfo,realm,clientModel,userModel,userSession,clientSession);
  Map<String,Object> claims=new HashMap<String,Object>();
  claims.putAll(userInfo.getOtherClaims());
  claims.put("sub",userModel.getId());
  Response.ResponseBuilder responseBuilder;
  OIDCAdvancedConfigWrapper cfg=OIDCAdvancedConfigWrapper.fromClientModel(clientModel);
  if (cfg.isUserInfoSignatureRequired()) {
    String issuerUrl=Urls.realmIssuer(uriInfo.getBaseUri(),realm.getName());
    String audience=clientModel.getClientId();
    claims.put("iss",issuerUrl);
    claims.put("aud",audience);
    Algorithm signatureAlg=cfg.getUserInfoSignedResponseAlg();
    PrivateKey privateKey=realm.getPrivateKey();
    String signedUserInfo=new JWSBuilder().jsonContent(claims).sign(signatureAlg,privateKey);
    responseBuilder=Response.ok(signedUserInfo).header(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JWT);
    event.detail(Details.SIGNATURE_REQUIRED,"true");
    event.detail(Details.SIGNATURE_ALGORITHM,cfg.getUserInfoSignedResponseAlg().toString());
  }
 else {
    responseBuilder=Response.ok(claims).header(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON);
    event.detail(Details.SIGNATURE_REQUIRED,"false");
  }
  event.success();
  return Cors.add(request,responseBuilder).auth().allowedOrigins(token).build();
}
