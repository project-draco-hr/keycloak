{
  if (attributeValue == null)   return null;
  if (attributeValue instanceof List) {
    List<Object> valueAsList=(List<Object>)attributeValue;
    if (valueAsList.size() == 0)     return null;
    if (isMultivalued(mappingModel)) {
      List<Object> result=new ArrayList<>();
      for (      Object valueItem : valueAsList) {
        result.add(mapAttributeValue(mappingModel,valueItem));
      }
      return result;
    }
 else {
      if (valueAsList.size() > 1) {
        ServicesLogger.LOGGER.multipleValuesForMapper(attributeValue.toString(),mappingModel.getName());
      }
      attributeValue=valueAsList.get(0);
    }
  }
  String type=mappingModel.getConfig().get(JSON_TYPE);
  if (type == null)   return attributeValue;
  if (type.equals("boolean")) {
    if (attributeValue instanceof Boolean)     return attributeValue;
    if (attributeValue instanceof String)     return Boolean.valueOf((String)attributeValue);
    throw new RuntimeException("cannot map type for token claim");
  }
 else   if (type.equals("String")) {
    if (attributeValue instanceof String)     return attributeValue;
    return attributeValue.toString();
  }
 else   if (type.equals("long")) {
    if (attributeValue instanceof Long)     return attributeValue;
    if (attributeValue instanceof String)     return Long.valueOf((String)attributeValue);
    throw new RuntimeException("cannot map type for token claim");
  }
 else   if (type.equals("int")) {
    if (attributeValue instanceof Integer)     return attributeValue;
    if (attributeValue instanceof String)     return Integer.valueOf((String)attributeValue);
    throw new RuntimeException("cannot map type for token claim");
  }
  return attributeValue;
}
