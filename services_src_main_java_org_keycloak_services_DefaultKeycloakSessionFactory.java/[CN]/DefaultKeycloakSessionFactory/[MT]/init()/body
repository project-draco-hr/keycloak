{
  ProviderManager pm=new ProviderManager(getClass().getClassLoader(),Config.scope().getArray("providers"));
  for (  Spi spi : ServiceLoader.load(Spi.class,getClass().getClassLoader())) {
    Map<String,ProviderFactory> factories=new HashMap<String,ProviderFactory>();
    factoriesMap.put(spi.getProviderClass(),factories);
    String provider=Config.getProvider(spi.getName());
    if (provider != null) {
      this.provider.put(spi.getProviderClass(),provider);
      ProviderFactory factory=pm.load(spi,provider);
      if (factory == null) {
        throw new RuntimeException("Failed to find provider " + provider + " for "+ spi.getName());
      }
      Config.Scope scope=Config.scope(spi.getName(),provider);
      factory.init(scope);
      if (spi.isInternal() && !isInternal(factory)) {
        log.warnv("{0} ({1}) is implementing the internal SPI {2}. This SPI is internal and may change without notice",factory.getId(),factory.getClass().getName(),spi.getName());
      }
      factories.put(factory.getId(),factory);
      log.debugv("Loaded SPI {0} (provider = {1})",spi.getName(),provider);
    }
 else {
      for (      ProviderFactory factory : pm.load(spi)) {
        Config.Scope scope=Config.scope(spi.getName(),factory.getId());
        factory.init(scope);
        if (spi.isInternal() && !isInternal(factory)) {
          log.warnv("{0} ({1}) is implementing the internal SPI {2}. This SPI is internal and may change without notice",factory.getId(),factory.getClass().getName(),spi.getName());
        }
        factories.put(factory.getId(),factory);
      }
      if (factories.size() == 1) {
        provider=factories.values().iterator().next().getId();
        this.provider.put(spi.getProviderClass(),provider);
        log.debugv("Loaded SPI {0}  (provider = {1})",spi.getName(),provider);
      }
 else {
        log.debugv("Loaded SPI {0} (providers = {1})",spi.getName(),factories.keySet());
      }
    }
  }
  for (  Map<String,ProviderFactory> factories : factoriesMap.values()) {
    for (    ProviderFactory factory : factories.values()) {
      factory.postInit(this);
    }
  }
}
