{
  Map<Class<? extends Provider>,Map<String,ProviderFactory>> factoryMap=new HashMap<>();
  Set<Spi> spiList=spis;
  for (  Spi spi : spiList) {
    Map<String,ProviderFactory> factories=new HashMap<String,ProviderFactory>();
    factoryMap.put(spi.getProviderClass(),factories);
    String provider=Config.getProvider(spi.getName());
    if (provider != null) {
      ProviderFactory factory=pm.load(spi,provider);
      if (factory == null) {
        continue;
      }
      Config.Scope scope=Config.scope(spi.getName(),provider);
      if (isEnabled(factory,scope)) {
        factory.init(scope);
        if (spi.isInternal() && !isInternal(factory)) {
          ServicesLogger.LOGGER.spiMayChange(factory.getId(),factory.getClass().getName(),spi.getName());
        }
        factories.put(factory.getId(),factory);
        logger.debugv("Loaded SPI {0} (provider = {1})",spi.getName(),provider);
      }
    }
 else {
      for (      ProviderFactory factory : pm.load(spi)) {
        Config.Scope scope=Config.scope(spi.getName(),factory.getId());
        if (isEnabled(factory,scope)) {
          factory.init(scope);
          if (spi.isInternal() && !isInternal(factory)) {
            ServicesLogger.LOGGER.spiMayChange(factory.getId(),factory.getClass().getName(),spi.getName());
          }
          factories.put(factory.getId(),factory);
        }
 else {
          logger.debugv("SPI {0} provider {1} disabled",spi.getName(),factory.getId());
        }
      }
    }
  }
  return factoryMap;
}
