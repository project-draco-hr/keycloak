{
  for (  Spi spi : spiList) {
    spis.add(spi);
    Map<String,ProviderFactory> factories=new HashMap<String,ProviderFactory>();
    factoriesMap.put(spi.getProviderClass(),factories);
    String provider=Config.getProvider(spi.getName());
    if (provider != null) {
      this.provider.put(spi.getProviderClass(),provider);
      ProviderFactory factory=pm.load(spi,provider);
      if (factory == null) {
        throw new RuntimeException("Failed to find provider " + provider + " for "+ spi.getName());
      }
      Config.Scope scope=Config.scope(spi.getName(),provider);
      factory.init(scope);
      if (spi.isInternal() && !isInternal(factory)) {
        logger.spiMayChange(factory.getId(),factory.getClass().getName(),spi.getName());
      }
      factories.put(factory.getId(),factory);
      logger.debugv("Loaded SPI {0} (provider = {1})",spi.getName(),provider);
    }
 else {
      for (      ProviderFactory factory : pm.load(spi)) {
        Config.Scope scope=Config.scope(spi.getName(),factory.getId());
        if (scope.getBoolean("enabled",true)) {
          factory.init(scope);
          if (spi.isInternal() && !isInternal(factory)) {
            logger.spiMayChange(factory.getId(),factory.getClass().getName(),spi.getName());
          }
          factories.put(factory.getId(),factory);
        }
 else {
          logger.debugv("SPI {0} provider {1} disabled",spi.getName(),factory.getId());
        }
      }
      if (factories.size() == 1) {
        provider=factories.values().iterator().next().getId();
        this.provider.put(spi.getProviderClass(),provider);
        logger.debugv("Loaded SPI {0} (provider = {1})",spi.getName(),provider);
      }
 else {
        logger.debugv("Loaded SPI {0} (providers = {1})",spi.getName(),factories.keySet());
      }
    }
  }
}
