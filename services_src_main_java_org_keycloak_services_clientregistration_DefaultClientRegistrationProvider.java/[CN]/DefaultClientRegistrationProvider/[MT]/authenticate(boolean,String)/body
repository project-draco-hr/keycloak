{
  String authorizationHeader=session.getContext().getRequestHeaders().getRequestHeaders().getFirst(HttpHeaders.AUTHORIZATION);
  boolean bearer=authorizationHeader != null && authorizationHeader.split(" ")[0].equalsIgnoreCase("Bearer");
  if (bearer) {
    AuthenticationManager.AuthResult authResult=new AppAuthManager().authenticateBearerToken(session,realm);
    AccessToken.Access realmAccess=authResult.getToken().getResourceAccess(Constants.REALM_MANAGEMENT_CLIENT_ID);
    if (realmAccess != null) {
      if (realmAccess.isUserInRole(AdminRoles.MANAGE_CLIENTS)) {
        return create ? null : realm.getClientByClientId(clientId);
      }
      if (create && realmAccess.isUserInRole(AdminRoles.CREATE_CLIENT)) {
        return create ? null : realm.getClientByClientId(clientId);
      }
    }
  }
 else   if (!create) {
    ClientModel client;
    try {
      AuthorizeClientUtil.ClientAuthResult clientAuth=AuthorizeClientUtil.authorizeClient(session,event,realm);
      client=clientAuth.getClient();
      if (client != null && !client.isPublicClient() && client.getClientId().equals(clientId)) {
        return client;
      }
    }
 catch (    Throwable t) {
    }
  }
  event.error(Errors.NOT_ALLOWED);
  throw new ForbiddenException();
}
