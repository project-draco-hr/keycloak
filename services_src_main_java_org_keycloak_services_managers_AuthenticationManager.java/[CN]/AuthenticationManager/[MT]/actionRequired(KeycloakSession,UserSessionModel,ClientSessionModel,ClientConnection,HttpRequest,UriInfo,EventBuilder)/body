{
  final RealmModel realm=clientSession.getRealm();
  final UserModel user=userSession.getUser();
  final ClientModel client=clientSession.getClient();
  evaluateRequiredActionTriggers(session,userSession,clientSession,clientConnection,request,uriInfo,event,realm,user);
  logger.debugv("processAccessCode: go to oauth page?: {0}",client.isConsentRequired());
  event.detail(Details.CODE_ID,clientSession.getId());
  Set<String> requiredActions=user.getRequiredActions();
  Response action=executionActions(session,userSession,clientSession,request,event,realm,user,requiredActions);
  if (action != null)   return action;
  requiredActions=clientSession.getRequiredActions();
  action=executionActions(session,userSession,clientSession,request,event,realm,user,requiredActions);
  if (action != null)   return action;
  if (client.isConsentRequired()) {
    UserConsentModel grantedConsent=session.users().getConsentByClient(realm,user,client.getId());
    List<RoleModel> realmRoles=new LinkedList<>();
    MultivaluedMap<String,RoleModel> resourceRoles=new MultivaluedMapImpl<>();
    ClientSessionCode accessCode=new ClientSessionCode(realm,clientSession);
    for (    RoleModel r : accessCode.getRequestedRoles()) {
      if (grantedConsent != null && grantedConsent.isRoleGranted(r)) {
        continue;
      }
      if (r.getContainer() instanceof RealmModel) {
        realmRoles.add(r);
      }
 else {
        resourceRoles.add(((ClientModel)r.getContainer()).getClientId(),r);
      }
    }
    List<ProtocolMapperModel> protocolMappers=new LinkedList<>();
    for (    ProtocolMapperModel protocolMapper : accessCode.getRequestedProtocolMappers()) {
      if (protocolMapper.isConsentRequired() && protocolMapper.getConsentText() != null) {
        if (grantedConsent == null || !grantedConsent.isProtocolMapperGranted(protocolMapper)) {
          protocolMappers.add(protocolMapper);
        }
      }
    }
    if (realmRoles.size() > 0 || resourceRoles.size() > 0 || protocolMappers.size() > 0) {
      accessCode.setAction(ClientSessionModel.Action.REQUIRED_ACTIONS.name());
      clientSession.setNote(CURRENT_REQUIRED_ACTION,ClientSessionModel.Action.OAUTH_GRANT.name());
      return session.getProvider(LoginFormsProvider.class).setClientSessionCode(accessCode.getCode()).setAccessRequest(realmRoles,resourceRoles,protocolMappers).createOAuthGrant(clientSession);
    }
 else {
      String consentDetail=(grantedConsent != null) ? Details.CONSENT_VALUE_PERSISTED_CONSENT : Details.CONSENT_VALUE_NO_CONSENT_REQUIRED;
      event.detail(Details.CONSENT,consentDetail);
    }
  }
 else {
    event.detail(Details.CONSENT,Details.CONSENT_VALUE_NO_CONSENT_REQUIRED);
  }
  return null;
}
