{
  if (user == null) {
    logger.info("Not Authenticated! Incorrect user name");
    return AuthenticationStatus.INVALID_USER;
  }
  if (!user.isEnabled() && user.getStatus() == Status.DISABLED) {
    logger.info("Account is disabled, contact admin.");
    return AuthenticationStatus.ACCOUNT_DISABLED;
  }
  Set<String> types=new HashSet<String>();
  List<RequiredCredentialModel> requiredCredentials=null;
  if (realm.hasRole(user,RealmManager.RESOURCE_ROLE)) {
    requiredCredentials=realm.getRequiredApplicationCredentials();
  }
 else   if (realm.hasRole(user,RealmManager.IDENTITY_REQUESTER_ROLE)) {
    requiredCredentials=realm.getRequiredOAuthClientCredentials();
  }
 else {
    requiredCredentials=realm.getRequiredCredentials();
  }
  for (  RequiredCredentialModel credential : requiredCredentials) {
    types.add(credential.getType());
  }
  if (types.contains(CredentialRepresentation.TOTP) && !user.isTotp()) {
    user.addRequiredAction(RequiredAction.CONFIGURE_TOTP);
    user.setStatus(Status.ACTIONS_REQUIRED);
  }
  if (types.contains(CredentialRepresentation.PASSWORD)) {
    String password=formData.getFirst(CredentialRepresentation.PASSWORD);
    if (password == null) {
      logger.warn("Password not provided");
      return AuthenticationStatus.MISSING_PASSWORD;
    }
    if (user.isTotp()) {
      String token=formData.getFirst(CredentialRepresentation.TOTP);
      if (token == null) {
        logger.warn("TOTP token not provided");
        return AuthenticationStatus.MISSING_TOTP;
      }
      logger.info("validating TOTP");
      if (!realm.validateTOTP(user,password,token)) {
        return AuthenticationStatus.INVALID_CREDENTIALS;
      }
    }
 else {
      logger.info("validating password for user: " + user.getLoginName());
      if (!realm.validatePassword(user,password)) {
        return AuthenticationStatus.INVALID_CREDENTIALS;
      }
    }
    if (user.getStatus() == Status.ACTIONS_REQUIRED) {
      return AuthenticationStatus.ACTIONS_REQUIRED;
    }
 else {
      return AuthenticationStatus.SUCCESS;
    }
  }
 else {
    logger.warn("Do not know how to authenticate user");
    return AuthenticationStatus.FAILED;
  }
}
