{
  UserModel user=KeycloakModelUtils.findUserByNameOrEmail(realm,username);
  if (user == null) {
    AuthUser authUser=AuthenticationProviderManager.getManager(realm,providerSession).getUser(username);
    if (authUser != null) {
      user=realm.addUser(authUser.getUsername());
      user.setEnabled(true);
      user.setFirstName(authUser.getFirstName());
      user.setLastName(authUser.getLastName());
      user.setEmail(authUser.getEmail());
      user.setAuthenticationLink(new AuthenticationLinkModel(authUser.getProviderName(),authUser.getId()));
      logger.info("User " + authUser.getUsername() + " created and linked with provider "+ authUser.getProviderName());
    }
 else {
      logger.warn("User " + username + " not found");
      return AuthenticationStatus.INVALID_USER;
    }
  }
  if (!checkEnabled(user)) {
    return AuthenticationStatus.ACCOUNT_DISABLED;
  }
  Set<String> types=new HashSet<String>();
  for (  RequiredCredentialModel credential : realm.getRequiredCredentials()) {
    types.add(credential.getType());
  }
  if (types.contains(CredentialRepresentation.PASSWORD)) {
    String password=formData.getFirst(CredentialRepresentation.PASSWORD);
    if (password == null) {
      logger.warn("Password not provided");
      return AuthenticationStatus.MISSING_PASSWORD;
    }
    if (user.isTotp()) {
      String token=formData.getFirst(CredentialRepresentation.TOTP);
      if (token == null) {
        logger.warn("TOTP token not provided");
        return AuthenticationStatus.MISSING_TOTP;
      }
      logger.debug("validating TOTP");
      if (!realm.validateTOTP(user,password,token)) {
        return AuthenticationStatus.INVALID_CREDENTIALS;
      }
    }
 else {
      logger.debug("validating password for user: " + username);
      AuthProviderStatus authStatus=AuthenticationProviderManager.getManager(realm,providerSession).validatePassword(user,password);
      if (authStatus == AuthProviderStatus.INVALID_CREDENTIALS) {
        logger.debug("invalid password for user: " + username);
        return AuthenticationStatus.INVALID_CREDENTIALS;
      }
 else       if (authStatus == AuthProviderStatus.FAILED) {
        return AuthenticationStatus.FAILED;
      }
    }
    if (!user.getRequiredActions().isEmpty()) {
      return AuthenticationStatus.ACTIONS_REQUIRED;
    }
 else {
      return AuthenticationStatus.SUCCESS;
    }
  }
 else   if (types.contains(CredentialRepresentation.SECRET)) {
    String secret=formData.getFirst(CredentialRepresentation.SECRET);
    if (secret == null) {
      logger.warn("Secret not provided");
      return AuthenticationStatus.MISSING_PASSWORD;
    }
    if (!user.getRequiredActions().isEmpty()) {
      return AuthenticationStatus.ACTIONS_REQUIRED;
    }
 else {
      return AuthenticationStatus.SUCCESS;
    }
  }
 else {
    logger.warn("Do not know how to authenticate user");
    return AuthenticationStatus.FAILED;
  }
}
