{
  if (userSession == null)   return null;
  UserModel user=userSession.getUser();
  logger.debugv("Logging out: {0} ({1})",user.getUsername(),userSession.getId());
  if (userSession.getState() != UserSessionModel.State.LOGGING_OUT) {
    userSession.setState(UserSessionModel.State.LOGGING_OUT);
  }
  List<ClientSessionModel> redirectClients=new LinkedList<ClientSessionModel>();
  for (  ClientSessionModel clientSession : userSession.getClientSessions()) {
    ClientModel client=clientSession.getClient();
    if (ClientSessionModel.Action.LOGGED_OUT.name().equals(clientSession.getAction()))     continue;
    if (client.isFrontchannelLogout()) {
      String authMethod=clientSession.getAuthMethod();
      if (authMethod == null)       continue;
      redirectClients.add(clientSession);
    }
 else {
      String authMethod=clientSession.getAuthMethod();
      if (authMethod == null)       continue;
      LoginProtocol protocol=session.getProvider(LoginProtocol.class,authMethod);
      protocol.setRealm(realm).setHttpHeaders(headers).setUriInfo(uriInfo);
      try {
        logger.debugv("backchannel logout to: {0}",client.getClientId());
        protocol.backchannelLogout(userSession,clientSession);
        clientSession.setAction(ClientSessionModel.Action.LOGGED_OUT.name());
      }
 catch (      Exception e) {
        logger.failedToLogoutClient(e);
      }
    }
  }
  for (  ClientSessionModel nextRedirectClient : redirectClients) {
    String authMethod=nextRedirectClient.getAuthMethod();
    LoginProtocol protocol=session.getProvider(LoginProtocol.class,authMethod);
    protocol.setRealm(realm).setHttpHeaders(headers).setUriInfo(uriInfo);
    nextRedirectClient.setAction(ClientSessionModel.Action.LOGGED_OUT.name());
    try {
      logger.debugv("frontchannel logout to: {0}",nextRedirectClient.getClient().getClientId());
      Response response=protocol.frontchannelLogout(userSession,nextRedirectClient);
      if (response != null) {
        logger.debug("returning frontchannel logout request to client");
        return response;
      }
    }
 catch (    Exception e) {
      logger.failedToLogoutClient(e);
    }
  }
  String brokerId=userSession.getNote(Details.IDENTITY_PROVIDER);
  if (brokerId != null) {
    IdentityProvider identityProvider=IdentityBrokerService.getIdentityProvider(session,realm,brokerId);
    Response response=identityProvider.keycloakInitiatedBrowserLogout(userSession,uriInfo,realm);
    if (response != null)     return response;
  }
  return finishBrowserLogout(session,realm,userSession,uriInfo,connection,headers);
}
