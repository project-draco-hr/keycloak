{
  RealmModel realm=clientSession.getRealm();
  UserModel user=userSession.getUser();
  isForcePasswordUpdateRequired(realm,user);
  isTotpConfigurationRequired(realm,user);
  isEmailVerificationRequired(realm,user);
  ClientModel client=clientSession.getClient();
  ClientSessionCode accessCode=new ClientSessionCode(realm,clientSession);
  logger.debugv("processAccessCode: go to oauth page?: {0}",client.isConsentRequired());
  event.detail(Details.CODE_ID,clientSession.getId());
  Set<UserModel.RequiredAction> requiredActions=user.getRequiredActions();
  if (!requiredActions.isEmpty()) {
    Iterator<RequiredAction> i=user.getRequiredActions().iterator();
    UserModel.RequiredAction action=i.next();
    if (action.equals(UserModel.RequiredAction.VERIFY_EMAIL) && Validation.isEmpty(user.getEmail())) {
      if (i.hasNext())       action=i.next();
 else       action=null;
    }
    if (action != null) {
      accessCode.setRequiredAction(action);
      LoginFormsProvider loginFormsProvider=session.getProvider(LoginFormsProvider.class).setClientSessionCode(accessCode.getCode()).setUser(user);
      if (action.equals(UserModel.RequiredAction.VERIFY_EMAIL)) {
        event.clone().event(EventType.SEND_VERIFY_EMAIL).detail(Details.EMAIL,user.getEmail()).success();
        LoginActionsService.createActionCookie(realm,uriInfo,clientConnection,userSession.getId());
      }
      return loginFormsProvider.createResponse(action);
    }
  }
  if (client.isConsentRequired()) {
    accessCode.setAction(ClientSessionModel.Action.OAUTH_GRANT);
    GrantedConsentModel grantedConsent=user.getGrantedConsentByClient(client.getId());
    List<RoleModel> realmRoles=new LinkedList<RoleModel>();
    MultivaluedMap<String,RoleModel> resourceRoles=new MultivaluedMapImpl<String,RoleModel>();
    for (    RoleModel r : accessCode.getRequestedRoles()) {
      if (grantedConsent != null && grantedConsent.getGrantedRoles().contains(r.getId())) {
        continue;
      }
      if (r.getContainer() instanceof RealmModel) {
        realmRoles.add(r);
      }
 else {
        resourceRoles.add(((ClientModel)r.getContainer()).getClientId(),r);
      }
    }
    List<ProtocolMapperModel> protocolMappers=new LinkedList<ProtocolMapperModel>();
    for (    ProtocolMapperModel model : client.getProtocolMappers()) {
      if (model.isConsentRequired() && model.getProtocol().equals(clientSession.getAuthMethod()) && model.getConsentText() != null) {
        if (grantedConsent == null || !grantedConsent.getGrantedProtocolMappers().contains(model.getId())) {
          protocolMappers.add(model);
        }
      }
    }
    if (realmRoles.size() > 0 || resourceRoles.size() > 0 || protocolMappers.size() > 0) {
      return session.getProvider(LoginFormsProvider.class).setClientSessionCode(accessCode.getCode()).setAccessRequest(realmRoles,resourceRoles,protocolMappers).createOAuthGrant(clientSession);
    }
  }
  event.success();
  return redirectAfterSuccessfulFlow(session,realm,userSession,clientSession,request,uriInfo,clientConnection);
}
