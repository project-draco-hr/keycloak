{
  logger.debug("failure");
  RealmModel realm=getRealmModel(session,event);
  logFailure(event);
  String userId=event.userId;
  UserModel user=session.users().getUserById(userId,realm);
  UserLoginFailureModel userLoginFailure=getUserModel(session,event);
  if (user != null) {
    if (userLoginFailure == null) {
      userLoginFailure=session.sessions().addUserLoginFailure(realm,userId);
    }
    userLoginFailure.setLastIPFailure(event.ip);
    long currentTime=Time.currentTimeMillis();
    long last=userLoginFailure.getLastFailure();
    long deltaTime=0;
    if (last > 0) {
      deltaTime=currentTime - last;
    }
    userLoginFailure.setLastFailure(currentTime);
    if (deltaTime > 0) {
      if (deltaTime > (long)realm.getMaxDeltaTimeSeconds() * 1000L) {
        userLoginFailure.clearFailures();
      }
    }
    userLoginFailure.incrementFailures();
    logger.debugv("new num failures: {0}",userLoginFailure.getNumFailures());
    int waitSeconds=realm.getWaitIncrementSeconds() * (userLoginFailure.getNumFailures() / realm.getFailureFactor());
    logger.debugv("waitSeconds: {0}",waitSeconds);
    logger.debugv("deltaTime: {0}",deltaTime);
    if (waitSeconds == 0) {
      if (last > 0 && deltaTime < realm.getQuickLoginCheckMilliSeconds()) {
        logger.debugv("quick login, set min wait seconds");
        waitSeconds=realm.getMinimumQuickLoginWaitSeconds();
      }
    }
    if (waitSeconds > 0) {
      waitSeconds=Math.min(realm.getMaxFailureWaitSeconds(),waitSeconds);
      int notBefore=(int)(currentTime / 1000) + waitSeconds;
      logger.debugv("set notBefore: {0}",notBefore);
      userLoginFailure.setFailedLoginNotBefore(notBefore);
    }
  }
}
