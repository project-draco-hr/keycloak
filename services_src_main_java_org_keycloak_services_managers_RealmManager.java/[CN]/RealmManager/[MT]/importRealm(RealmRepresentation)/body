{
  String id=rep.getId();
  if (id == null) {
    id=KeycloakModelUtils.generateId();
  }
  RealmModel realm=model.createRealm(id,rep.getRealm());
  realm.setName(rep.getRealm());
  setupRealmDefaults(realm);
  boolean postponeMasterClientSetup=postponeMasterClientSetup(rep);
  if (!postponeMasterClientSetup) {
    setupMasterAdminManagement(realm);
  }
  if (!hasRealmAdminManagementClient(rep))   setupRealmAdminManagement(realm);
  if (!hasAccountManagementClient(rep))   setupAccountManagement(realm);
  boolean postponeImpersonationSetup=false;
  if (hasRealmAdminManagementClient(rep)) {
    postponeImpersonationSetup=true;
  }
 else {
    setupImpersonationService(realm);
  }
  if (!hasBrokerClient(rep))   setupBrokerService(realm);
  if (!hasAdminConsoleClient(rep))   setupAdminConsole(realm);
  boolean postponeAdminCliSetup=false;
  if (!hasAdminCliClient(rep)) {
    if (hasRealmAdminManagementClient(rep)) {
      postponeAdminCliSetup=true;
    }
 else {
      setupAdminCli(realm);
    }
  }
  if (!hasRealmRole(rep,Constants.OFFLINE_ACCESS_ROLE))   setupOfflineTokens(realm);
  RepresentationToModel.importRealm(session,rep,realm);
  setupAdminConsoleLocaleMapper(realm);
  if (postponeMasterClientSetup) {
    setupMasterAdminManagement(realm);
  }
  checkMasterAdminManagementRoles(realm);
  checkRealmAdminManagementRoles(realm);
  if (postponeImpersonationSetup) {
    setupImpersonationService(realm);
  }
  if (postponeAdminCliSetup) {
    setupAdminCli(realm);
  }
  setupAuthenticationFlows(realm);
  setupRequiredActions(realm);
  List<UserFederationProviderModel> federationProviders=realm.getUserFederationProviders();
  UsersSyncManager usersSyncManager=new UsersSyncManager();
  for (  final UserFederationProviderModel fedProvider : federationProviders) {
    usersSyncManager.notifyToRefreshPeriodicSync(session,realm,fedProvider,false);
  }
  List<UserStorageProviderModel> storageProviders=realm.getUserStorageProviders();
  UserStorageSyncManager storageSync=new UserStorageSyncManager();
  for (  UserStorageProviderModel provider : storageProviders) {
    storageSync.notifyToRefreshPeriodicSync(session,realm,provider,false);
  }
  setupAuthorizationServices(realm);
  setupClientRegistrations(realm);
  fireRealmPostCreate(realm);
  return realm;
}
