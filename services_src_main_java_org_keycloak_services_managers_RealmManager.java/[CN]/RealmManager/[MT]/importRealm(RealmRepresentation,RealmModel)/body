{
  newRealm.setName(rep.getRealm());
  if (rep.isEnabled() != null)   newRealm.setEnabled(rep.isEnabled());
  if (rep.isSocial() != null)   newRealm.setSocial(rep.isSocial());
  if (rep.getTokenLifespan() != null)   newRealm.setTokenLifespan(rep.getTokenLifespan());
 else   newRealm.setTokenLifespan(300);
  if (rep.getAccessCodeLifespan() != null)   newRealm.setAccessCodeLifespan(rep.getAccessCodeLifespan());
 else   newRealm.setAccessCodeLifespan(60);
  if (rep.getAccessCodeLifespanUserAction() != null)   newRealm.setAccessCodeLifespanUserAction(rep.getAccessCodeLifespanUserAction());
 else   newRealm.setAccessCodeLifespanUserAction(300);
  if (rep.isSslNotRequired() != null)   newRealm.setSslNotRequired(rep.isSslNotRequired());
  if (rep.isCookieLoginAllowed() != null)   newRealm.setCookieLoginAllowed(rep.isCookieLoginAllowed());
  if (rep.isRegistrationAllowed() != null)   newRealm.setRegistrationAllowed(rep.isRegistrationAllowed());
  if (rep.isVerifyEmail() != null)   newRealm.setVerifyEmail(rep.isVerifyEmail());
  if (rep.isResetPasswordAllowed() != null)   newRealm.setResetPasswordAllowed(rep.isResetPasswordAllowed());
  if (rep.isAutomaticRegistrationAfterSocialLogin() != null)   newRealm.setAutomaticRegistrationAfterSocialLogin(rep.isAutomaticRegistrationAfterSocialLogin());
  if (rep.getPrivateKey() == null || rep.getPublicKey() == null) {
    generateRealmKeys(newRealm);
  }
 else {
    newRealm.setPrivateKeyPem(rep.getPrivateKey());
    newRealm.setPublicKeyPem(rep.getPublicKey());
  }
  Map<String,UserModel> userMap=new HashMap<String,UserModel>();
  if (rep.getRequiredCredentials() != null) {
    for (    String requiredCred : rep.getRequiredCredentials()) {
      addRequiredCredential(newRealm,requiredCred);
    }
  }
 else {
    addRequiredCredential(newRealm,CredentialRepresentation.PASSWORD);
  }
  if (rep.getRequiredApplicationCredentials() != null) {
    for (    String requiredCred : rep.getRequiredApplicationCredentials()) {
      addResourceRequiredCredential(newRealm,requiredCred);
    }
  }
 else {
    addResourceRequiredCredential(newRealm,CredentialRepresentation.PASSWORD);
  }
  if (rep.getRequiredOAuthClientCredentials() != null) {
    for (    String requiredCred : rep.getRequiredOAuthClientCredentials()) {
      addOAuthClientRequiredCredential(newRealm,requiredCred);
    }
  }
 else {
    addOAuthClientRequiredCredential(newRealm,CredentialRepresentation.PASSWORD);
  }
  if (rep.getUsers() != null) {
    for (    UserRepresentation userRep : rep.getUsers()) {
      UserModel user=createUser(newRealm,userRep);
      userMap.put(user.getLoginName(),user);
    }
  }
  if (rep.getRoles() != null) {
    for (    RoleRepresentation roleRep : rep.getRoles()) {
      createRole(newRealm,roleRep);
    }
  }
  if (rep.getDefaultRoles() != null) {
    for (    String roleString : rep.getDefaultRoles()) {
      newRealm.addDefaultRole(roleString.trim());
    }
  }
  if (rep.getApplications() != null) {
    createApplications(rep,newRealm);
  }
  if (rep.getRoleMappings() != null) {
    for (    UserRoleMappingRepresentation mapping : rep.getRoleMappings()) {
      UserModel user=userMap.get(mapping.getUsername());
      for (      String roleString : mapping.getRoles()) {
        RoleModel role=newRealm.getRole(roleString.trim());
        if (role == null) {
          role=newRealm.addRole(roleString.trim());
        }
        newRealm.grantRole(user,role);
      }
    }
  }
  if (rep.getScopeMappings() != null) {
    for (    ScopeMappingRepresentation scope : rep.getScopeMappings()) {
      for (      String roleString : scope.getRoles()) {
        RoleModel role=newRealm.getRole(roleString.trim());
        if (role == null) {
          role=newRealm.addRole(roleString.trim());
        }
        UserModel user=userMap.get(scope.getUsername());
        newRealm.addScopeMapping(user,role.getName());
      }
    }
  }
  if (rep.getSocialMappings() != null) {
    for (    SocialMappingRepresentation socialMapping : rep.getSocialMappings()) {
      UserModel user=userMap.get(socialMapping.getUsername());
      for (      SocialLinkRepresentation link : socialMapping.getSocialLinks()) {
        SocialLinkModel mappingModel=new SocialLinkModel(link.getSocialProvider(),link.getSocialUsername());
        newRealm.addSocialLink(user,mappingModel);
      }
    }
  }
  if (rep.isAccountManagement() != null && rep.isAccountManagement()) {
    enableAccountManagement(newRealm);
  }
}
