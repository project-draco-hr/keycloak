{
  String managementUrl=getManagementUrl(requestUri,resource);
  if (managementUrl != null) {
    MultivaluedHashMap<String,String> adapterSessionIds=null;
    if (clientSessions != null && clientSessions.size() > 0) {
      adapterSessionIds=new MultivaluedHashMap<String,String>();
      for (      ClientSessionModel clientSession : clientSessions) {
        String adapterSessionId=clientSession.getNote(AdapterConstants.HTTP_SESSION_ID);
        if (adapterSessionId != null) {
          String host=clientSession.getNote(AdapterConstants.HTTP_SESSION_HOST);
          adapterSessionIds.add(host,adapterSessionId);
        }
      }
    }
    if (managementUrl.contains(KC_SESSION_HOST) && adapterSessionIds != null) {
      boolean allPassed=true;
      for (      Map.Entry<String,List<String>> entry : adapterSessionIds.entrySet()) {
        String host=entry.getKey();
        List<String> sessionIds=entry.getValue();
        String currentHostMgmtUrl=managementUrl.replace(KC_SESSION_HOST,host);
        allPassed=logoutApplicationOnHost(realm,resource,sessionIds,client,notBefore,currentHostMgmtUrl) && allPassed;
      }
      return allPassed;
    }
 else {
      List<String> allSessionIds=null;
      if (adapterSessionIds != null) {
        allSessionIds=new ArrayList<String>();
        for (        List<String> currentIds : adapterSessionIds.values()) {
          allSessionIds.addAll(currentIds);
        }
      }
      return logoutApplicationOnHost(realm,resource,allSessionIds,client,notBefore,managementUrl);
    }
  }
 else {
    logger.debugv("Can't logout {0}: no management url",resource.getName());
    return false;
  }
}
