{
  AccessCodeEntry code=new AccessCodeEntry();
  SkeletonKeyScope scopeMap=null;
  if (scopeParam != null)   scopeMap=decodeScope(scopeParam);
  List<Role> realmRolesRequested=code.getRealmRolesRequested();
  MultivaluedMap<String,Role> resourceRolesRequested=code.getResourceRolesRequested();
  Set<String> realmMapping=realm.getRoleMappings(user);
  if (realmMapping != null && realmMapping.size() > 0 && (scopeMap == null || scopeMap.containsKey("realm"))) {
    Set<String> scope=realm.getScope(client);
    if (scope.size() > 0) {
      Set<String> scopeRequest=null;
      if (scopeMap != null) {
        scopeRequest.addAll(scopeMap.get("realm"));
        if (scopeRequest.contains(RealmManager.WILDCARD_ROLE))         scopeRequest=null;
      }
      for (      String role : realmMapping) {
        if ((scopeRequest == null || scopeRequest.contains(role)) && (scope.contains("*") || scope.contains(role)))         realmRolesRequested.add(realm.getIdm().getRole(role));
      }
    }
  }
  for (  ResourceModel resource : realm.getResources()) {
    Set<String> mapping=resource.getRoleMappings(user);
    if (mapping != null && mapping.size() > 0 && (scopeMap == null || scopeMap.containsKey(resource.getName()))) {
      Set<String> scope=resource.getScope(client);
      if (scope.size() > 0) {
        Set<String> scopeRequest=null;
        if (scopeMap != null) {
          scopeRequest.addAll(scopeMap.get(resource.getName()));
          if (scopeRequest.contains(RealmManager.WILDCARD_ROLE))           scopeRequest=null;
        }
        for (        String role : mapping) {
          if ((scopeRequest == null || scopeRequest.contains(role)) && (scope.contains("*") || scope.contains(role)))           resourceRolesRequested.add(resource.getName(),resource.getIdm().getRole(role));
        }
      }
    }
  }
  createToken(code,realm,client,user);
  code.setExpiration((System.currentTimeMillis() / 1000) + realm.getAccessCodeLifespan());
  code.setClient(client);
  code.setUser(user);
  accessCodeMap.put(code.getId(),code);
  String accessCode=null;
  try {
    accessCode=new JWSBuilder().content(code.getId().getBytes("UTF-8")).rsa256(realm.getPrivateKey());
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
  code.setCode(accessCode);
  return code;
}
