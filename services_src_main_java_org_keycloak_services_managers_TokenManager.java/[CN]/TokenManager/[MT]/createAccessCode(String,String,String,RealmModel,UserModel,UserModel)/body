{
  boolean applicationResource=realm.hasRole(client,realm.getRole(Constants.APPLICATION_ROLE));
  AccessCodeEntry code=new AccessCodeEntry();
  SkeletonKeyScope scopeMap=null;
  if (scopeParam != null)   scopeMap=decodeScope(scopeParam);
  List<RoleModel> realmRolesRequested=code.getRealmRolesRequested();
  MultivaluedMap<String,RoleModel> resourceRolesRequested=code.getResourceRolesRequested();
  Set<String> realmMapping=realm.getRoleMappingValues(user);
  if (realmMapping != null && realmMapping.size() > 0 && (scopeMap == null || scopeMap.containsKey("realm"))) {
    Set<String> scope=realm.getScopeMappingValues(client);
    if (scope.size() > 0) {
      Set<String> scopeRequest=scopeMap != null ? new HashSet<String>(scopeMap.get("realm")) : null;
      for (      String role : realmMapping) {
        if ((scopeRequest == null || scopeRequest.contains(role)) && scope.contains(role))         realmRolesRequested.add(realm.getRole(role));
      }
    }
  }
  for (  ApplicationModel resource : realm.getApplications()) {
    if (applicationResource && resource.getApplicationUser().getLoginName().equals(client.getLoginName())) {
      resourceRolesRequested.addAll(resource.getName(),resource.getRoles());
    }
 else {
      Set<String> mapping=resource.getRoleMappingValues(user);
      if (mapping != null && mapping.size() > 0 && (scopeMap == null || scopeMap.containsKey(resource.getName()))) {
        Set<String> scope=resource.getScopeMappingValues(client);
        if (scope.size() > 0) {
          Set<String> scopeRequest=scopeMap != null ? new HashSet<String>(scopeMap.get(resource.getName())) : null;
          for (          String role : mapping) {
            if ((scopeRequest == null || scopeRequest.contains(role)) && scope.contains(role))             resourceRolesRequested.add(resource.getName(),resource.getRole(role));
          }
        }
      }
    }
  }
  createToken(code,realm,client,user);
  code.setRealm(realm);
  code.setExpiration((System.currentTimeMillis() / 1000) + realm.getAccessCodeLifespan());
  code.setClient(client);
  code.setUser(user);
  code.setState(state);
  code.setRedirectUri(redirect);
  accessCodeMap.put(code.getId(),code);
  String accessCode=null;
  try {
    accessCode=new JWSBuilder().content(code.getId().getBytes("UTF-8")).rsa256(realm.getPrivateKey());
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
  code.setCode(accessCode);
  return code;
}
