{
  AccessCodeEntry code=new AccessCodeEntry();
  SkeletonKeyScope scopeMap=null;
  if (scopeParam != null)   scopeMap=decodeScope(scopeParam);
  List<RoleModel> realmRolesRequested=code.getRealmRolesRequested();
  MultivaluedMap<String,RoleModel> resourceRolesRequested=code.getResourceRolesRequested();
  Set<RoleModel> realmScopeMappings=realm.getRealmScopeMappings(client);
  for (  RoleModel desiredRole : realmScopeMappings) {
    if (!realm.hasRole(user,desiredRole))     continue;
    if (desiresScope(scopeMap,"realm",desiredRole.getName())) {
      realmRolesRequested.add(desiredRole);
    }
  }
  for (  ApplicationModel application : realm.getApplications()) {
    if (!desiresScopeGroup(scopeMap,application.getName()))     continue;
    Set<RoleModel> desiredRoles=application.getApplicationScopeMappings(client);
    if (desiredRoles.isEmpty()) {
      if (application.getApplicationUser().getLoginName().equals(client.getLoginName())) {
        Set<RoleModel> appRoleMappings=application.getApplicationRoleMappings(user);
        for (        RoleModel desiredAppRole : appRoleMappings) {
          if (desiresScope(scopeMap,application.getName(),desiredAppRole.getName())) {
            resourceRolesRequested.add(application.getName(),desiredAppRole);
          }
        }
      }
    }
 else {
      for (      RoleModel desiredAppRole : desiredRoles) {
        if (realm.hasRole(user,desiredAppRole) && desiresScope(scopeMap,application.getName(),desiredAppRole.getName())) {
          resourceRolesRequested.add(application.getName(),desiredAppRole);
        }
      }
    }
  }
  createToken(code,realm,client,user);
  code.setRealm(realm);
  code.setExpiration((System.currentTimeMillis() / 1000) + realm.getAccessCodeLifespan());
  code.setClient(client);
  code.setUser(user);
  code.setState(state);
  code.setRedirectUri(redirect);
  accessCodeMap.put(code.getId(),code);
  String accessCode=null;
  try {
    accessCode=new JWSBuilder().content(code.getId().getBytes("UTF-8")).rsa256(realm.getPrivateKey());
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
  code.setCode(accessCode);
  return code;
}
