{
  AccessScope scopeMap=null;
  if (scopeParam != null)   scopeMap=decodeScope(scopeParam);
  Set<RoleModel> roleMappings=realm.getRoleMappings(user);
  Set<RoleModel> scopeMappings=realm.getScopeMappings(client);
  ApplicationModel clientApp=realm.getApplicationByName(client.getLoginName());
  Set<RoleModel> clientAppRoles=clientApp == null ? null : clientApp.getRoles();
  if (clientAppRoles != null)   scopeMappings.addAll(clientAppRoles);
  Set<RoleModel> requestedRoles=new HashSet<RoleModel>();
  for (  RoleModel role : roleMappings) {
    if (clientApp != null && role.getContainer().equals(clientApp))     requestedRoles.add(role);
    for (    RoleModel desiredRole : scopeMappings) {
      Set<RoleModel> visited=new HashSet<RoleModel>();
      applyScope(role,desiredRole,visited,requestedRoles);
    }
  }
  for (  RoleModel role : requestedRoles) {
    if (role.getContainer() instanceof RealmModel && desiresScope(scopeMap,"realm",role.getName())) {
      realmRolesRequested.add(role);
    }
 else     if (role.getContainer() instanceof ApplicationModel) {
      ApplicationModel app=(ApplicationModel)role.getContainer();
      if (desiresScope(scopeMap,app.getName(),role.getName())) {
        resourceRolesRequested.add(app.getName(),role);
      }
    }
  }
  AccessToken token=initToken(realm,client,user);
  if (realmRolesRequested.size() > 0) {
    for (    RoleModel role : realmRolesRequested) {
      addComposites(token,role);
    }
  }
  if (resourceRolesRequested.size() > 0) {
    for (    List<RoleModel> roles : resourceRolesRequested.values()) {
      for (      RoleModel role : roles) {
        addComposites(token,role);
      }
    }
  }
  return token;
}
