{
  JWSInput jws=new JWSInput(encodedRefreshToken);
  RefreshToken refreshToken=null;
  try {
    if (!RSAProvider.verify(jws,realm.getPublicKey())) {
      throw new RuntimeException("Invalid refresh token");
    }
    refreshToken=jws.readJsonContent(RefreshToken.class);
  }
 catch (  IOException e) {
    throw new OAuthErrorException(OAuthErrorException.INVALID_GRANT,"Invalid refresh token",e);
  }
  if (refreshToken.isExpired()) {
    throw new OAuthErrorException(OAuthErrorException.INVALID_GRANT,"Refresh token expired");
  }
  if (refreshToken.getIssuedAt() < realm.getNotBefore()) {
    throw new OAuthErrorException(OAuthErrorException.INVALID_GRANT,"Stale refresh token");
  }
  UserModel user=realm.getUserById(refreshToken.getSubject());
  if (user == null) {
    throw new OAuthErrorException(OAuthErrorException.INVALID_GRANT,"Invalid refresh token","Unknown user");
  }
  if (!user.isEnabled()) {
    throw new OAuthErrorException(OAuthErrorException.INVALID_GRANT,"User disabled","User disabled");
  }
  if (!client.getClientId().equals(refreshToken.getIssuedFor())) {
    throw new OAuthErrorException(OAuthErrorException.INVALID_GRANT,"Unmatching clients","Unmatching clients");
  }
  if (refreshToken.getIssuedAt() < client.getNotBefore() || refreshToken.getIssuedAt() < user.getNotBefore()) {
    throw new OAuthErrorException(OAuthErrorException.INVALID_GRANT,"Stale refresh token");
  }
  ApplicationModel clientApp=(client instanceof ApplicationModel) ? (ApplicationModel)client : null;
  if (refreshToken.getRealmAccess() != null) {
    for (    String roleName : refreshToken.getRealmAccess().getRoles()) {
      RoleModel role=realm.getRole(roleName);
      if (role == null) {
        throw new OAuthErrorException(OAuthErrorException.INVALID_GRANT,"Invalid realm role " + roleName);
      }
      if (!realm.hasRole(user,role)) {
        throw new OAuthErrorException(OAuthErrorException.INVALID_SCOPE,"User no long has permission for realm role: " + roleName);
      }
      if (!realm.hasScope(client,role)) {
        throw new OAuthErrorException(OAuthErrorException.INVALID_SCOPE,"Client no longer has realm scope: " + roleName);
      }
    }
  }
  if (refreshToken.getResourceAccess() != null) {
    for (    Map.Entry<String,AccessToken.Access> entry : refreshToken.getResourceAccess().entrySet()) {
      ApplicationModel app=realm.getApplicationByName(entry.getKey());
      if (app == null) {
        throw new OAuthErrorException(OAuthErrorException.INVALID_SCOPE,"Application no longer exists","Application no longer exists: " + app.getName());
      }
      for (      String roleName : entry.getValue().getRoles()) {
        RoleModel role=app.getRole(roleName);
        if (role == null) {
          throw new OAuthErrorException(OAuthErrorException.INVALID_GRANT,"Invalid refresh token","Unknown application role: " + roleName);
        }
        if (!realm.hasRole(user,role)) {
          throw new OAuthErrorException(OAuthErrorException.INVALID_SCOPE,"User no long has permission for application role " + roleName);
        }
        if (clientApp != null && !clientApp.equals(app) && !realm.hasScope(client,role)) {
          throw new OAuthErrorException(OAuthErrorException.INVALID_SCOPE,"Client no longer has application scope" + roleName);
        }
      }
    }
  }
  AccessToken accessToken=initToken(realm,client,user);
  accessToken.setRealmAccess(refreshToken.getRealmAccess());
  accessToken.setResourceAccess(refreshToken.getResourceAccess());
  return accessToken;
}
