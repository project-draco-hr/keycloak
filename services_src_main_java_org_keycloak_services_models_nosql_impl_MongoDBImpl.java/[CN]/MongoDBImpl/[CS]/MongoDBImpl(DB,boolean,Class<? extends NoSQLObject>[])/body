{
  this.database=database;
  typeConverter=new TypeConverter();
  for (  Class<?> simpleConverterClass : SIMPLE_TYPES) {
    SimpleConverter converter=new SimpleConverter(simpleConverterClass);
    typeConverter.addAppObjectConverter(converter);
    typeConverter.addDBObjectConverter(converter);
  }
  typeConverter.addAppObjectConverter(new ListConverter(typeConverter,ArrayList.class));
  typeConverter.addAppObjectConverter(new ListConverter(typeConverter,List.class));
  typeConverter.addDBObjectConverter(new BasicDBListConverter(typeConverter));
  typeConverter.addAppObjectConverter(new EnumToStringConverter());
  typeConverter.addDBObjectConverter(new StringToEnumConverter());
  for (  Class<? extends NoSQLObject> type : managedDataTypes) {
    getObjectInfo(type);
    typeConverter.addAppObjectConverter(new NoSQLObjectConverter(this,typeConverter,type));
    typeConverter.addDBObjectConverter(new BasicDBObjectConverter(this,typeConverter,type));
  }
  if (dropDatabaseOnStartup) {
    this.database.dropDatabase();
    logger.info("Database " + this.database.getName() + " dropped in MongoDB");
  }
}
