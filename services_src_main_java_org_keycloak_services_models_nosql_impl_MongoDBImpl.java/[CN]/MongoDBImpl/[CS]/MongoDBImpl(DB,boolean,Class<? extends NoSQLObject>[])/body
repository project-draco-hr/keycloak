{
  this.database=database;
  typeConverter=new TypeConverter();
  for (  Class<?> simpleConverterClass : SIMPLE_TYPES) {
    SimpleConverter converter=new SimpleConverter(simpleConverterClass);
    typeConverter.addAppObjectConverter(converter);
    typeConverter.addDBObjectConverter(converter);
  }
  typeConverter.addAppObjectConverter(new ListConverter(typeConverter,ArrayList.class));
  typeConverter.addAppObjectConverter(new ListConverter(typeConverter,List.class));
  typeConverter.addDBObjectConverter(new BasicDBListConverter(typeConverter));
  for (  Class<? extends NoSQLObject> type : managedDataTypes) {
    getObjectInfo(type);
    typeConverter.addAppObjectConverter(new NoSQLObjectConverter(this,typeConverter,type));
    typeConverter.addDBObjectConverter(new BasicDBObjectConverter(this,typeConverter,type));
  }
  if (removeAllObjectsAtStartup) {
    for (    Class<? extends NoSQLObject> type : managedDataTypes) {
      ObjectInfo objectInfo=getObjectInfo(type);
      String collectionName=objectInfo.getDbCollectionName();
      if (collectionName != null) {
        logger.debug("Dropping collection " + collectionName);
        DBCollection dbCollection=this.database.getCollection(collectionName);
        dbCollection.drop();
      }
 else {
        logger.debug("Skip removing objects of type " + type + " as it doesn't have it's own collection");
      }
    }
    logger.info("All objects successfully removed from MongoDB");
  }
}
