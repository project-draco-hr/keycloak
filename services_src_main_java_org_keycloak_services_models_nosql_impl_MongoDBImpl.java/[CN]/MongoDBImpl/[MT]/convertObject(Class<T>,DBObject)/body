{
  ObjectInfo<T> objectInfo=getObjectInfo(type);
  T object;
  try {
    object=type.newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  for (  String key : dbObject.keySet()) {
    Object value=dbObject.get(key);
    Property<Object> property;
    if ("_id".equals(key)) {
      Property<String> idProperty=objectInfo.getOidProperty();
      idProperty.setValue(object,value.toString());
    }
 else     if ((property=objectInfo.getPropertyByName(key)) != null) {
      Class<?> expectedType=property.getJavaClass();
      Class actualType=value != null ? value.getClass() : expectedType;
      expectedType=Types.boxedClass(expectedType);
      actualType=Types.boxedClass(actualType);
      if (actualType.isAssignableFrom(expectedType)) {
        property.setValue(object,value);
      }
 else {
        Object convertedValue=typeConverter.convertDBObjectToApplicationObject(value,expectedType,actualType);
        property.setValue(object,convertedValue);
      }
    }
 else     if (object instanceof AttributedNoSQLObject) {
      ((AttributedNoSQLObject)object).setAttribute(key,value.toString());
    }
 else {
      System.err.println("Property with key " + key + " not known for type "+ type);
    }
  }
  return object;
}
