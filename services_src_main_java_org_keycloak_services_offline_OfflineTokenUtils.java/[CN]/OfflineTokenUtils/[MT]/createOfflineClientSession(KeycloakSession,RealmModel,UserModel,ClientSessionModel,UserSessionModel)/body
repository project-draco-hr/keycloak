{
  if (logger.isTraceEnabled()) {
    logger.tracef("Creating new offline token client session. ClientSessionId: '%s', UserSessionID: '%s' , Username: '%s', Client: '%s'",clientSession.getId(),userSession.getId(),user.getUsername(),clientSession.getClient().getClientId());
  }
  OfflineClientSessionAdapter.OfflineClientSessionData rep=new OfflineClientSessionAdapter.OfflineClientSessionData();
  rep.setAuthMethod(clientSession.getAuthMethod());
  rep.setRedirectUri(clientSession.getRedirectUri());
  rep.setProtocolMappers(clientSession.getProtocolMappers());
  rep.setRoles(clientSession.getRoles());
  rep.setNotes(clientSession.getNotes());
  rep.setAuthenticatorStatus(clientSession.getExecutionStatus());
  rep.setTimestamp(Time.currentTime());
  try {
    String stringRep=JsonSerialization.writeValueAsString(rep);
    OfflineClientSessionModel clsModel=new OfflineClientSessionModel();
    clsModel.setClientSessionId(clientSession.getId());
    clsModel.setClientId(clientSession.getClient().getId());
    clsModel.setUserId(user.getId());
    clsModel.setUserSessionId(userSession.getId());
    clsModel.setData(stringRep);
    kcSession.users().addOfflineClientSession(realm,clsModel);
  }
 catch (  IOException ioe) {
    throw new ModelException(ioe);
  }
}
