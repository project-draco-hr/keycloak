{
  if (auth == null) {
    return login("password");
  }
  require(AccountRoles.MANAGE_ACCOUNT);
  csrfCheck(formData);
  UserModel user=auth.getUser();
  boolean requireCurrent=isPasswordSet(session,realm,user);
  account.setPasswordSet(requireCurrent);
  String password=formData.getFirst("password");
  String passwordNew=formData.getFirst("password-new");
  String passwordConfirm=formData.getFirst("password-confirm");
  EventBuilder errorEvent=event.clone().event(EventType.UPDATE_PASSWORD_ERROR).client(auth.getClient()).user(auth.getClientSession().getUserSession().getUser());
  if (requireCurrent) {
    if (Validation.isBlank(password)) {
      setReferrerOnPage();
      errorEvent.error(Errors.PASSWORD_MISSING);
      return account.setError(Messages.MISSING_PASSWORD).createResponse(AccountPages.PASSWORD);
    }
    UserCredentialModel cred=UserCredentialModel.password(password);
    if (!session.users().validCredentials(session,realm,user,cred)) {
      setReferrerOnPage();
      errorEvent.error(Errors.INVALID_USER_CREDENTIALS);
      return account.setError(Messages.INVALID_PASSWORD_EXISTING).createResponse(AccountPages.PASSWORD);
    }
  }
  if (Validation.isBlank(passwordNew)) {
    setReferrerOnPage();
    errorEvent.error(Errors.PASSWORD_MISSING);
    return account.setError(Messages.MISSING_PASSWORD).createResponse(AccountPages.PASSWORD);
  }
  if (!passwordNew.equals(passwordConfirm)) {
    setReferrerOnPage();
    errorEvent.error(Errors.PASSWORD_CONFIRM_ERROR);
    return account.setError(Messages.INVALID_PASSWORD_CONFIRM).createResponse(AccountPages.PASSWORD);
  }
  try {
    session.users().updateCredential(realm,user,UserCredentialModel.password(passwordNew));
  }
 catch (  ModelReadOnlyException mre) {
    setReferrerOnPage();
    errorEvent.error(Errors.NOT_ALLOWED);
    return account.setError(Messages.READ_ONLY_PASSWORD).createResponse(AccountPages.PASSWORD);
  }
catch (  ModelException me) {
    logger.failedToUpdatePassword(me);
    setReferrerOnPage();
    errorEvent.detail(Details.REASON,me.getMessage()).error(Errors.PASSWORD_REJECTED);
    return account.setError(me.getMessage(),me.getParameters()).createResponse(AccountPages.PASSWORD);
  }
catch (  Exception ape) {
    logger.failedToUpdatePassword(ape);
    setReferrerOnPage();
    errorEvent.detail(Details.REASON,ape.getMessage()).error(Errors.PASSWORD_REJECTED);
    return account.setError(ape.getMessage()).createResponse(AccountPages.PASSWORD);
  }
  List<UserSessionModel> sessions=session.sessions().getUserSessions(realm,user);
  for (  UserSessionModel s : sessions) {
    if (!s.getId().equals(auth.getSession().getId())) {
      AuthenticationManager.backchannelLogout(session,realm,s,uriInfo,clientConnection,headers,true);
    }
  }
  event.event(EventType.UPDATE_PASSWORD).client(auth.getClient()).user(auth.getUser()).success();
  setReferrerOnPage();
  return account.setPasswordSet(true).setSuccess(Messages.ACCOUNT_PASSWORD_UPDATED).createResponse(AccountPages.PASSWORD);
}
