{
  UserModel user=getUser(RequiredAction.RESET_PASSWORD);
  if (user != null) {
    FormFlows forms=Flows.forms(realm,request,uriInfo).setUser(user);
    String password=formData.getFirst("password");
    String passwordNew=formData.getFirst("password-new");
    String passwordConfirm=formData.getFirst("password-confirm");
    String error=null;
    if (Validation.isEmpty(password)) {
      error=Messages.MISSING_PASSWORD;
    }
 else     if (Validation.isEmpty(passwordNew)) {
      error=Messages.MISSING_PASSWORD;
    }
 else     if (!passwordNew.equals(passwordConfirm)) {
      error=Messages.INVALID_PASSWORD_CONFIRM;
    }
 else     if (!realm.validatePassword(user,password)) {
      error=Messages.INVALID_PASSWORD_EXISTING;
    }
    if (error != null) {
      return forms.setError(error).forwardToPassword();
    }
    UserCredentialModel credentials=new UserCredentialModel();
    credentials.setType(CredentialRepresentation.PASSWORD);
    credentials.setValue(passwordNew);
    realm.updateCredential(user,credentials);
    Response response=redirectOauth();
    if (response != null) {
      return response;
    }
 else {
      return Flows.forms(realm,request,uriInfo).setUser(user).forwardToPassword();
    }
  }
 else {
    return Response.status(Status.FORBIDDEN).build();
  }
}
