{
  AccessCodeEntry accessCodeEntry=getAccessCodeEntry(RequiredAction.RESET_PASSWORD);
  UserModel user=accessCodeEntry != null ? getUserFromAccessCode(accessCodeEntry) : getUserFromAuthManager();
  if (user == null) {
    return Response.status(Status.FORBIDDEN).build();
  }
  FormFlows forms=Flows.forms(realm,request,uriInfo).setUser(user);
  String password=formData.getFirst("password");
  String passwordNew=formData.getFirst("password-new");
  String passwordConfirm=formData.getFirst("password-confirm");
  String error=null;
  if (Validation.isEmpty(passwordNew)) {
    error=Messages.MISSING_PASSWORD;
  }
 else   if (!passwordNew.equals(passwordConfirm)) {
    error=Messages.INVALID_PASSWORD_CONFIRM;
  }
  if (accessCodeEntry == null) {
    if (Validation.isEmpty(password)) {
      error=Messages.MISSING_PASSWORD;
    }
 else     if (!realm.validatePassword(user,password)) {
      error=Messages.INVALID_PASSWORD_EXISTING;
    }
  }
  if (error != null) {
    return forms.setError(error).forwardToPassword();
  }
  UserCredentialModel credentials=new UserCredentialModel();
  credentials.setType(CredentialRepresentation.PASSWORD);
  credentials.setValue(passwordNew);
  realm.updateCredential(user,credentials);
  user.removeRequiredAction(RequiredAction.RESET_PASSWORD);
  if (accessCodeEntry != null) {
    accessCodeEntry.getRequiredActions().remove(UserModel.RequiredAction.RESET_PASSWORD);
  }
  authManager.expireIdentityCookie(realm,uriInfo);
  new ResourceAdminManager().singleLogOut(realm,user.getLoginName());
  return Flows.forms(realm,request,uriInfo).forwardToLogin();
}
