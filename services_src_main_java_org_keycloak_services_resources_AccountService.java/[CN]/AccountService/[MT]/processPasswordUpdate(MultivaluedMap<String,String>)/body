{
  AccessCodeEntry accessCode=getAccessCodeEntry(RequiredAction.UPDATE_PASSWORD);
  UserModel user=accessCode != null ? getUserFromAccessCode(accessCode) : getUserFromAuthManager();
  if (user == null) {
    return Response.status(Status.FORBIDDEN).build();
  }
  boolean loginAction=accessCode != null;
  FormFlows forms=Flows.forms(realm,request,uriInfo).setUser(user);
  String password=formData.getFirst("password");
  String passwordNew=formData.getFirst("password-new");
  String passwordConfirm=formData.getFirst("password-confirm");
  String error=null;
  if (Validation.isEmpty(passwordNew)) {
    error=Messages.MISSING_PASSWORD;
  }
 else   if (!passwordNew.equals(passwordConfirm)) {
    error=Messages.INVALID_PASSWORD_CONFIRM;
  }
  if (!loginAction) {
    if (Validation.isEmpty(password)) {
      error=Messages.MISSING_PASSWORD;
    }
 else     if (!realm.validatePassword(user,password)) {
      error=Messages.INVALID_PASSWORD_EXISTING;
    }
  }
  if (error != null) {
    return forms.setError(error).forwardToPassword();
  }
  UserCredentialModel credentials=new UserCredentialModel();
  credentials.setType(CredentialRepresentation.PASSWORD);
  credentials.setValue(passwordNew);
  realm.updateCredential(user,credentials);
  user.removeRequiredAction(RequiredAction.UPDATE_PASSWORD);
  if (accessCode != null) {
    accessCode.getRequiredActions().remove(UserModel.RequiredAction.UPDATE_PASSWORD);
  }
  if (accessCode != null) {
    return redirectOauth(user,accessCode);
  }
 else {
    return Flows.forms(realm,request,uriInfo).setUser(user).forwardToPassword();
  }
}
