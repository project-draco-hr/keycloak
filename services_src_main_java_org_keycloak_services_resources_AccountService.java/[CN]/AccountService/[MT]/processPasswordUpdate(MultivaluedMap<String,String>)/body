{
  if (auth == null) {
    return login("password");
  }
  require(AccountRoles.MANAGE_ACCOUNT);
  UserModel user=auth.getUser();
  String password=formData.getFirst("password");
  String passwordNew=formData.getFirst("password-new");
  String passwordConfirm=formData.getFirst("password-confirm");
  if (Validation.isEmpty(passwordNew)) {
    return account.setError(Messages.MISSING_PASSWORD).createResponse(AccountPages.PASSWORD);
  }
 else   if (!passwordNew.equals(passwordConfirm)) {
    return account.setError(Messages.INVALID_PASSWORD_CONFIRM).createResponse(AccountPages.PASSWORD);
  }
  AuthenticationProviderManager authProviderManager=AuthenticationProviderManager.getManager(realm,session);
  if (Validation.isEmpty(password)) {
    return account.setError(Messages.MISSING_PASSWORD).createResponse(AccountPages.PASSWORD);
  }
 else   if (authProviderManager.validatePassword(user,password) != AuthProviderStatus.SUCCESS) {
    return account.setError(Messages.INVALID_PASSWORD_EXISTING).createResponse(AccountPages.PASSWORD);
  }
  try {
    boolean passwordUpdateSuccess=authProviderManager.updatePassword(user,passwordNew);
    if (!passwordUpdateSuccess) {
      return account.setError("Password update failed").createResponse(AccountPages.PASSWORD);
    }
  }
 catch (  AuthenticationProviderException ape) {
    return account.setError(ape.getMessage()).createResponse(AccountPages.PASSWORD);
  }
  audit.event(EventType.UPDATE_PASSWORD).client(auth.getClient()).user(auth.getUser()).success();
  return account.setSuccess("accountPasswordUpdated").createResponse(AccountPages.PASSWORD);
}
