{
  OAuthFlows oauth=Flows.oauth(realm,request,uriInfo,authManager,tokenManager);
  if (!realm.isEnabled()) {
    return oauth.forwardToSecurityFailure("Realm not enabled.");
  }
  if (!realm.isResetPasswordAllowed()) {
    return oauth.forwardToSecurityFailure("Password reset not permitted, contact admin.");
  }
  UserModel client=realm.getUser(clientId);
  if (client == null) {
    return oauth.forwardToSecurityFailure("Unknown login requester.");
  }
  if (!client.isEnabled()) {
    return oauth.forwardToSecurityFailure("Login requester not enabled.");
  }
  UserModel user=realm.getUser(username);
  Set<RequiredAction> requiredActions=new HashSet<RequiredAction>(user.getRequiredActions());
  requiredActions.add(RequiredAction.RESET_PASSWORD);
  AccessCodeEntry accessCode=tokenManager.createAccessCode(scopeParam,state,redirect,realm,client,user);
  accessCode.setRequiredActions(requiredActions);
  accessCode.setExpiration(System.currentTimeMillis() / 1000 + realm.getAccessCodeLifespanUserAction());
  if (user.getEmail() == null) {
    return oauth.forwardToSecurityFailure("Email address not set, contact admin");
  }
  new EmailSender().sendPasswordReset(user,realm,accessCode.getCode(),uriInfo);
  return Flows.forms(realm,request,uriInfo).forwardToLogin();
}
