{
  String providerId=context.getIdpConfig().getAlias();
  UserModel federatedUser=clientSession.getAuthenticatedUser();
  if (wasFirstBrokerLogin) {
    String isDifferentBrowser=clientSession.getNote(AbstractIdpAuthenticator.IS_DIFFERENT_BROWSER);
    if (Boolean.parseBoolean(isDifferentBrowser)) {
      session.sessions().removeClientSession(realmModel,clientSession);
      return session.getProvider(LoginFormsProvider.class).setSuccess(Messages.IDENTITY_PROVIDER_LINK_SUCCESS,context.getIdpConfig().getAlias(),context.getUsername()).createInfoPage();
    }
 else {
      return finishBrokerAuthentication(context,federatedUser,clientSession,providerId);
    }
  }
 else {
    boolean firstBrokerLoginInProgress=(clientSession.getNote(AbstractIdpAuthenticator.BROKERED_CONTEXT_NOTE) != null);
    if (firstBrokerLoginInProgress) {
      LOGGER.debugf("Reauthenticated with broker '%s' when linking user '%s' with other broker",context.getIdpConfig().getAlias(),federatedUser.getUsername());
      UserModel linkingUser=AbstractIdpAuthenticator.getExistingUser(session,realmModel,clientSession);
      if (!linkingUser.getId().equals(federatedUser.getId())) {
        return redirectToErrorPage(Messages.IDENTITY_PROVIDER_DIFFERENT_USER_MESSAGE,federatedUser.getUsername(),linkingUser.getUsername());
      }
      return afterFirstBrokerLogin(context.getCode());
    }
 else {
      return finishBrokerAuthentication(context,federatedUser,clientSession,providerId);
    }
  }
}
