{
  ClientSessionCode clientCode=null;
  IdentityProviderModel identityProviderConfig=context.getIdpConfig();
  try {
    clientCode=parseClientSessionCode(context.getCode());
  }
 catch (  Exception e) {
    return redirectToErrorPage(Messages.IDENTITY_PROVIDER_AUTHENTICATION_FAILED,e,identityProviderConfig.getProviderId());
  }
  String providerId=identityProviderConfig.getAlias();
  if (!identityProviderConfig.isStoreToken()) {
    if (isDebugEnabled()) {
      LOGGER.debugf("Token will not be stored for identity provider [%s].",providerId);
    }
    context.setToken(null);
  }
  ClientSessionModel clientSession=clientCode.getClientSession();
  FederatedIdentityModel federatedIdentityModel=new FederatedIdentityModel(providerId,context.getId(),context.getUsername(),context.getToken());
  this.event.event(EventType.IDENTITY_PROVIDER_LOGIN).detail(Details.REDIRECT_URI,clientSession.getRedirectUri()).detail(Details.IDENTITY_PROVIDER_USERNAME,context.getUsername());
  UserModel federatedUser=this.session.users().getUserByFederatedIdentity(federatedIdentityModel,this.realmModel);
  if (clientSession.getUserSession() != null) {
    return performAccountLinking(clientSession,context,federatedIdentityModel,federatedUser);
  }
  if (federatedUser == null) {
    try {
      federatedUser=createUser(context);
      if (identityProviderConfig.isUpdateProfileFirstLogin()) {
        if (isDebugEnabled()) {
          LOGGER.debugf("Identity provider requires update profile action.",federatedUser);
        }
        federatedUser.addRequiredAction(UPDATE_PROFILE);
      }
    }
 catch (    Exception e) {
      return redirectToLoginPage(e,clientCode);
    }
  }
 else {
    updateFederatedIdentity(context,federatedUser);
  }
  UserSessionModel userSession=this.session.sessions().createUserSession(this.realmModel,federatedUser,federatedUser.getUsername(),this.clientConnection.getRemoteAddr(),"broker",false,context.getBrokerSessionId(),context.getBrokerUserId());
  this.event.user(federatedUser);
  this.event.session(userSession);
  TokenManager.attachClientSession(userSession,clientSession);
  context.getIdp().attachUserSession(userSession,clientSession,context);
  userSession.setNote(BROKER_PROVIDER_ID,providerId);
  if (isDebugEnabled()) {
    LOGGER.debugf("Performing local authentication for user [%s].",federatedUser);
  }
  return AuthenticationManager.nextActionAfterAuthentication(this.session,userSession,clientSession,this.clientConnection,this.request,this.uriInfo,event);
}
