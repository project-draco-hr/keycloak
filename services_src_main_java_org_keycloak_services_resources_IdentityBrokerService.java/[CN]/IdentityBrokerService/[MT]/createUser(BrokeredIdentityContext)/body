{
  FederatedIdentityModel federatedIdentityModel=new FederatedIdentityModel(context.getIdpConfig().getAlias(),context.getId(),context.getUsername(),context.getToken());
  UserModel existingUser=null;
  if (context.getEmail() != null) {
    existingUser=this.session.users().getUserByEmail(context.getEmail(),this.realmModel);
  }
  if (existingUser != null) {
    fireErrorEvent(Errors.FEDERATED_IDENTITY_EMAIL_EXISTS);
    throw new IdentityBrokerException(Messages.FEDERATED_IDENTITY_EMAIL_EXISTS);
  }
  String username=context.getUsername();
  if (this.realmModel.isRegistrationEmailAsUsername() && !Validation.isEmpty(context.getEmail())) {
    username=context.getEmail();
  }
 else   if (username == null) {
    username=context.getIdpConfig().getAlias() + "." + context.getId();
  }
 else {
    username=context.getIdpConfig().getAlias() + "." + context.getUsername();
  }
  if (username != null) {
    username=username.trim();
  }
  existingUser=this.session.users().getUserByUsername(username,this.realmModel);
  if (existingUser != null) {
    fireErrorEvent(Errors.FEDERATED_IDENTITY_USERNAME_EXISTS);
    throw new IdentityBrokerException(Messages.FEDERATED_IDENTITY_USERNAME_EXISTS);
  }
  if (isDebugEnabled()) {
    LOGGER.debugf("Creating account from identity [%s].",federatedIdentityModel);
  }
  UserModel federatedUser=this.session.users().addUser(this.realmModel,username);
  if (isDebugEnabled()) {
    LOGGER.debugf("Account [%s] created.",federatedUser);
  }
  federatedUser.setEnabled(true);
  federatedUser.setEmail(context.getEmail());
  federatedUser.setFirstName(context.getFirstName());
  federatedUser.setLastName(context.getLastName());
  if (context.getIdpConfig().isAddReadTokenRoleOnCreate()) {
    RoleModel readTokenRole=realmModel.getClientByClientId(Constants.BROKER_SERVICE_CLIENT_ID).getRole(Constants.READ_TOKEN_ROLE);
    federatedUser.grantRole(readTokenRole);
  }
  if (context.getIdpConfig().isStoreToken()) {
    federatedIdentityModel.setToken(context.getToken());
  }
  this.session.users().addFederatedIdentity(this.realmModel,federatedUser,federatedIdentityModel);
  context.getIdp().importNewUser(session,realmModel,federatedUser,context);
  Set<IdentityProviderMapperModel> mappers=realmModel.getIdentityProviderMappersByAlias(context.getIdpConfig().getAlias());
  if (mappers != null) {
    KeycloakSessionFactory sessionFactory=session.getKeycloakSessionFactory();
    for (    IdentityProviderMapperModel mapper : mappers) {
      IdentityProviderMapper target=(IdentityProviderMapper)sessionFactory.getProviderFactory(IdentityProviderMapper.class,mapper.getIdentityProviderMapper());
      target.importNewUser(session,realmModel,federatedUser,mapper,context);
    }
  }
  this.event.clone().user(federatedUser).event(EventType.REGISTER).detail(Details.IDENTITY_PROVIDER,federatedIdentityModel.getIdentityProvider()).detail(Details.IDENTITY_PROVIDER_USERNAME,context.getUsername()).removeDetail("auth_method").success();
  return federatedUser;
}
