{
  this.event.event(EventType.IDENTITY_PROVIDER_RETRIEVE_TOKEN);
  try {
    AppAuthManager authManager=new AppAuthManager();
    AuthResult authResult=authManager.authenticateBearerToken(this.session,this.realmModel,this.uriInfo,this.clientConnection,this.request.getHttpHeaders());
    if (authResult != null) {
      String audience=authResult.getToken().getAudience();
      ClientModel clientModel=this.realmModel.getClientByClientId(audience);
      if (clientModel == null) {
        return badRequest("Invalid client.");
      }
      session.getContext().setClient(clientModel);
      if (!clientModel.isAllowedRetrieveTokenFromIdentityProvider(providerId)) {
        return corsResponse(badRequest("Client [" + audience + "] not authorized to retrieve tokens from identity provider ["+ providerId+ "]."),clientModel);
      }
      if (clientModel.isConsentRequired()) {
        return corsResponse(session.getProvider(LoginFormsProvider.class).setClientSessionCode(authManager.extractAuthorizationHeaderToken(this.request.getHttpHeaders())).setAccessRequest("Your information from " + providerId + " identity provider.").setActionUri(this.uriInfo.getRequestUri()).createOAuthGrant(null),clientModel);
      }
      IdentityProvider identityProvider=getIdentityProvider(session,realmModel,providerId);
      IdentityProviderModel identityProviderConfig=getIdentityProviderConfig(providerId);
      if (identityProviderConfig.isStoreToken()) {
        FederatedIdentityModel identity=this.session.users().getFederatedIdentity(authResult.getUser(),providerId,this.realmModel);
        if (identity == null) {
          return corsResponse(badRequest("User [" + authResult.getUser().getId() + "] is not associated with identity provider ["+ providerId+ "]."),clientModel);
        }
        this.event.success();
        return corsResponse(identityProvider.retrieveToken(identity),clientModel);
      }
      return corsResponse(badRequest("Identity Provider [" + providerId + "] does not support this operation."),clientModel);
    }
    return badRequest("Invalid token.");
  }
 catch (  IdentityBrokerException e) {
    return redirectToErrorPage(Messages.COULD_NOT_OBTAIN_TOKEN,e,providerId);
  }
catch (  Exception e) {
    return redirectToErrorPage(Messages.UNEXPECTED_ERROR_RETRIEVING_TOKEN,e,providerId);
  }
}
