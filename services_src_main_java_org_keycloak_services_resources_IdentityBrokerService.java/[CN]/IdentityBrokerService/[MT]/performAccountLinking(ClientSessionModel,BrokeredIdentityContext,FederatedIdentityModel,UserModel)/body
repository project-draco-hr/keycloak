{
  this.event.event(EventType.FEDERATED_IDENTITY_LINK);
  if (federatedUser != null) {
    return redirectToErrorPage(Messages.IDENTITY_PROVIDER_ALREADY_LINKED,context.getIdpConfig().getAlias());
  }
  UserModel authenticatedUser=clientSession.getUserSession().getUser();
  if (isDebugEnabled()) {
    LOGGER.debugf("Linking account [%s] from identity provider [%s] to user [%s].",federatedIdentityModel,context.getIdpConfig().getAlias(),authenticatedUser);
  }
  if (!authenticatedUser.isEnabled()) {
    fireErrorEvent(Errors.USER_DISABLED);
    return redirectToErrorPage(Messages.ACCOUNT_DISABLED);
  }
  if (!authenticatedUser.hasRole(this.realmModel.getClientByClientId(ACCOUNT_MANAGEMENT_CLIENT_ID).getRole(MANAGE_ACCOUNT))) {
    fireErrorEvent(Errors.NOT_ALLOWED);
    return redirectToErrorPage(Messages.INSUFFICIENT_PERMISSION);
  }
  this.session.users().addFederatedIdentity(this.realmModel,authenticatedUser,federatedIdentityModel);
  context.getIdp().attachUserSession(clientSession.getUserSession(),clientSession,context);
  this.event.user(authenticatedUser).detail(Details.USERNAME,authenticatedUser.getUsername()).detail(Details.IDENTITY_PROVIDER,federatedIdentityModel.getIdentityProvider()).detail(Details.IDENTITY_PROVIDER_USERNAME,federatedIdentityModel.getUserName()).success();
  return Response.status(302).location(UriBuilder.fromUri(clientSession.getRedirectUri()).build()).build();
}
