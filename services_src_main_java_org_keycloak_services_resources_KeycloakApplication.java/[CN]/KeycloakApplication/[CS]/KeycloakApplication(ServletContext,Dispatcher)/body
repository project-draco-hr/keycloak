{
  loadConfig();
  this.contextPath=context.getContextPath();
  this.sessionFactory=createSessionFactory();
  dispatcher.getDefaultContextObjects().put(KeycloakApplication.class,this);
  ResteasyProviderFactory.pushContext(KeycloakApplication.class,this);
  context.setAttribute(KeycloakSessionFactory.class.getName(),this.sessionFactory);
  singletons.add(new ServerVersionResource());
  singletons.add(new RealmsResource());
  singletons.add(new AdminRoot());
  singletons.add(new ModelExceptionMapper());
  classes.add(QRCodeResource.class);
  classes.add(ThemeResource.class);
  classes.add(JsResource.class);
  classes.add(KeycloakTransactionCommitter.class);
  singletons.add(new ObjectMapperResolver(Boolean.parseBoolean(System.getProperty("keycloak.jsonPrettyPrint","false"))));
  ExportImportManager exportImportManager;
  DBLockManager dbLockManager=new DBLockManager();
  dbLockManager.checkForcedUnlock(sessionFactory);
  dbLockManager.waitForLock(sessionFactory);
  try {
    migrateModel();
    KeycloakSession session=sessionFactory.create();
    try {
      session.getTransaction().begin();
      ApplianceBootstrap applianceBootstrap=new ApplianceBootstrap(session);
      exportImportManager=new ExportImportManager(session);
      boolean createMasterRealm=applianceBootstrap.isNewInstall();
      if (exportImportManager.isRunImport() && exportImportManager.isImportMasterIncluded()) {
        createMasterRealm=false;
      }
      if (createMasterRealm) {
        applianceBootstrap.createMasterRealm(contextPath);
      }
      session.getTransaction().commit();
    }
 catch (    RuntimeException re) {
      if (session.getTransaction().isActive()) {
        session.getTransaction().rollback();
      }
      throw re;
    }
 finally {
      session.close();
    }
    if (exportImportManager.isRunImport()) {
      exportImportManager.runImport();
    }
 else {
      importRealms();
    }
    importAddUser();
  }
  finally {
    dbLockManager.releaseLock(sessionFactory);
  }
  if (exportImportManager.isRunExport()) {
    exportImportManager.runExport();
  }
  boolean bootstrapAdminUser=false;
  KeycloakSession session=sessionFactory.create();
  try {
    session.getTransaction().begin();
    bootstrapAdminUser=new ApplianceBootstrap(session).isNoMasterUser();
    session.getTransaction().commit();
  }
  finally {
    session.close();
  }
  sessionFactory.publish(new PostMigrationEvent());
  singletons.add(new WelcomeResource(bootstrapAdminUser));
  setupScheduledTasks(sessionFactory);
}
