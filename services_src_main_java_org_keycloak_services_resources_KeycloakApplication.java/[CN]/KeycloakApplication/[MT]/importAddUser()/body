{
  String configDir=System.getProperty("jboss.server.config.dir");
  if (configDir != null) {
    File addUserFile=new File(configDir + File.separator + "keycloak-add-user.json");
    if (addUserFile.isFile()) {
      logger.imprtingUsersFrom(addUserFile);
      List<RealmRepresentation> realms;
      try {
        realms=JsonSerialization.readValue(new FileInputStream(addUserFile),new TypeReference<List<RealmRepresentation>>(){
        }
);
      }
 catch (      IOException e) {
        logger.failedToLoadUsers(e);
        return;
      }
      for (      RealmRepresentation realmRep : realms) {
        for (        UserRepresentation userRep : realmRep.getUsers()) {
          KeycloakSession session=sessionFactory.create();
          try {
            session.getTransaction().begin();
            RealmModel realm=session.realms().getRealmByName(realmRep.getRealm());
            if (realm == null) {
              logger.addUserFailedRealmNotFound(userRep.getUsername(),realmRep.getRealm());
            }
 else {
              UserModel user=session.users().addUser(realm,userRep.getUsername());
              user.setEnabled(userRep.isEnabled());
              RepresentationToModel.createCredentials(userRep,user);
              RepresentationToModel.createRoleMappings(userRep,user,realm);
            }
            session.getTransaction().commit();
            logger.addUserSuccess(userRep.getUsername(),realmRep.getRealm());
          }
 catch (          ModelDuplicateException e) {
            logger.addUserFailedUserExists(userRep.getUsername(),realmRep.getRealm());
          }
catch (          Throwable t) {
            session.getTransaction().rollback();
            logger.addUserFailed(t,userRep.getUsername(),realmRep.getRealm());
          }
 finally {
            session.close();
          }
        }
      }
      if (!addUserFile.delete()) {
        logger.failedToDeleteFile(addUserFile.getAbsolutePath());
      }
    }
  }
}
