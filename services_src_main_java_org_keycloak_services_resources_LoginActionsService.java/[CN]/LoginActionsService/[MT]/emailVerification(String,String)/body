{
  event.event(EventType.VERIFY_EMAIL);
  if (key != null) {
    ClientSessionModel clientSession=null;
    String keyFromSession=null;
    if (code != null) {
      clientSession=ClientSessionCode.getClientSession(code,session,realm);
      keyFromSession=clientSession.getNote(Constants.VERIFY_EMAIL_KEY);
    }
    if (clientSession == null || !key.equals(keyFromSession)) {
      ServicesLogger.LOGGER.invalidKeyForEmailVerification();
      event.error(Errors.INVALID_CODE);
      throw new WebApplicationException(ErrorPage.error(session,Messages.STALE_VERIFY_EMAIL_LINK));
    }
    clientSession.removeNote(Constants.VERIFY_EMAIL_KEY);
    Checks checks=new Checks();
    if (!checks.verifyCode(code,ClientSessionModel.Action.REQUIRED_ACTIONS.name(),ClientSessionCode.ActionType.USER)) {
      if (checks.clientCode == null && checks.result.isClientSessionNotFound() || checks.result.isIllegalHash()) {
        return ErrorPage.error(session,Messages.STALE_VERIFY_EMAIL_LINK);
      }
      return checks.response;
    }
    ClientSessionCode accessCode=checks.clientCode;
    clientSession=accessCode.getClientSession();
    if (!ClientSessionModel.Action.VERIFY_EMAIL.name().equals(clientSession.getNote(AuthenticationManager.CURRENT_REQUIRED_ACTION))) {
      ServicesLogger.LOGGER.reqdActionDoesNotMatch();
      event.error(Errors.INVALID_CODE);
      throw new WebApplicationException(ErrorPage.error(session,Messages.STALE_VERIFY_EMAIL_LINK));
    }
    UserSessionModel userSession=clientSession.getUserSession();
    UserModel user=userSession.getUser();
    initEvent(clientSession);
    event.event(EventType.VERIFY_EMAIL).detail(Details.EMAIL,user.getEmail());
    user.setEmailVerified(true);
    user.removeRequiredAction(RequiredAction.VERIFY_EMAIL);
    event.success();
    String actionCookieValue=getActionCookie();
    if (actionCookieValue == null || !actionCookieValue.equals(userSession.getId())) {
      session.sessions().removeClientSession(realm,clientSession);
      return session.getProvider(LoginFormsProvider.class).setSuccess(Messages.EMAIL_VERIFIED).createInfoPage();
    }
    event=event.clone().removeDetail(Details.EMAIL).event(EventType.LOGIN);
    return AuthenticationProcessor.redirectToRequiredActions(session,realm,clientSession,uriInfo);
  }
 else {
    Checks checks=new Checks();
    if (!checks.verifyCode(code,ClientSessionModel.Action.REQUIRED_ACTIONS.name(),ClientSessionCode.ActionType.USER)) {
      return checks.response;
    }
    ClientSessionCode accessCode=checks.clientCode;
    ClientSessionModel clientSession=accessCode.getClientSession();
    UserSessionModel userSession=clientSession.getUserSession();
    initEvent(clientSession);
    createActionCookie(realm,uriInfo,clientConnection,userSession.getId());
    VerifyEmail.setupKey(clientSession);
    return session.getProvider(LoginFormsProvider.class).setClientSessionCode(accessCode.getCode()).setClientSession(clientSession).setUser(userSession.getUser()).createResponse(RequiredAction.VERIFY_EMAIL);
  }
}
