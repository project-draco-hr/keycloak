{
  event.event(EventType.LOGIN);
  if (!checkSsl()) {
    return ErrorPage.error(session,Messages.HTTPS_REQUIRED);
  }
  String code=formData.getFirst("code");
  ClientSessionCode accessCode=ClientSessionCode.parse(code,session,realm);
  if (accessCode == null || !accessCode.isValid(ClientSessionModel.Action.OAUTH_GRANT.name(),ClientSessionCode.ActionType.LOGIN)) {
    event.error(Errors.INVALID_CODE);
    return ErrorPage.error(session,Messages.INVALID_ACCESS_CODE);
  }
  ClientSessionModel clientSession=accessCode.getClientSession();
  initEvent(clientSession);
  UserSessionModel userSession=clientSession.getUserSession();
  UserModel user=userSession.getUser();
  ClientModel client=clientSession.getClient();
  if (!AuthenticationManager.isSessionValid(realm,userSession)) {
    AuthenticationManager.backchannelLogout(session,realm,userSession,uriInfo,clientConnection,headers,true);
    event.error(Errors.INVALID_CODE);
    return ErrorPage.error(session,Messages.SESSION_NOT_ACTIVE);
  }
  if (formData.containsKey("cancel")) {
    LoginProtocol protocol=session.getProvider(LoginProtocol.class,clientSession.getAuthMethod());
    protocol.setRealm(realm).setHttpHeaders(headers).setUriInfo(uriInfo).setEventBuilder(event);
    Response response=protocol.sendError(clientSession,Error.CONSENT_DENIED);
    event.error(Errors.REJECTED_BY_USER);
    return response;
  }
  UserConsentModel grantedConsent=user.getConsentByClient(client.getId());
  if (grantedConsent == null) {
    grantedConsent=new UserConsentModel(client);
    user.addConsent(grantedConsent);
  }
  for (  RoleModel role : accessCode.getRequestedRoles()) {
    grantedConsent.addGrantedRole(role);
  }
  for (  ProtocolMapperModel protocolMapper : accessCode.getRequestedProtocolMappers()) {
    if (protocolMapper.isConsentRequired() && protocolMapper.getConsentText() != null) {
      grantedConsent.addGrantedProtocolMapper(protocolMapper);
    }
  }
  user.updateConsent(grantedConsent);
  event.detail(Details.CONSENT,Details.CONSENT_VALUE_CONSENT_GRANTED);
  event.success();
  return authManager.redirectAfterSuccessfulFlow(session,realm,userSession,clientSession,request,uriInfo,clientConnection,event);
}
