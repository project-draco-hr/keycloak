{
  event.event(EventType.LOGIN).detail(Details.RESPONSE_TYPE,"code");
  if (!checkSsl()) {
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"HTTPS required");
  }
  String code=formData.getFirst("code");
  ClientSessionCode accessCode=ClientSessionCode.parse(code,session,realm);
  if (accessCode == null || !accessCode.isValid(ClientSessionModel.Action.OAUTH_GRANT)) {
    event.error(Errors.INVALID_CODE);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Invalid access code.");
  }
  ClientSessionModel clientSession=accessCode.getClientSession();
  event.detail(Details.CODE_ID,clientSession.getId());
  String redirect=clientSession.getRedirectUri();
  event.client(clientSession.getClient()).user(clientSession.getUserSession().getUser()).detail(Details.RESPONSE_TYPE,"code").detail(Details.REDIRECT_URI,redirect);
  UserSessionModel userSession=clientSession.getUserSession();
  if (userSession != null) {
    event.detail(Details.AUTH_METHOD,userSession.getAuthMethod());
    event.detail(Details.USERNAME,userSession.getLoginUsername());
    if (userSession.isRememberMe()) {
      event.detail(Details.REMEMBER_ME,"true");
    }
  }
  if (!AuthenticationManager.isSessionValid(realm,userSession)) {
    AuthenticationManager.logout(session,realm,userSession,uriInfo,clientConnection);
    event.error(Errors.INVALID_CODE);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Session not active");
  }
  event.session(userSession);
  LoginProtocol protocol=session.getProvider(LoginProtocol.class,clientSession.getAuthMethod());
  protocol.setRealm(realm).setRequest(request).setUriInfo(uriInfo).setClientConnection(clientConnection);
  if (formData.containsKey("cancel")) {
    event.error(Errors.REJECTED_BY_USER);
    return protocol.consentDenied(clientSession);
  }
  event.success();
  return authManager.redirectAfterSuccessfulFlow(session,realm,userSession,clientSession,request,uriInfo,clientConnection);
}
