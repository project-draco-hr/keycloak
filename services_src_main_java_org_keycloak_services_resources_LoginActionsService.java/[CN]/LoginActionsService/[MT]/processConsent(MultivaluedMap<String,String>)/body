{
  event.event(EventType.LOGIN).detail(Details.RESPONSE_TYPE,"code");
  if (!checkSsl()) {
    return ErrorPage.error(session,Messages.HTTPS_REQUIRED);
  }
  String code=formData.getFirst("code");
  ClientSessionCode accessCode=ClientSessionCode.parse(code,session,realm);
  if (accessCode == null || !accessCode.isValid(ClientSessionModel.Action.OAUTH_GRANT)) {
    event.error(Errors.INVALID_CODE);
    return ErrorPage.error(session,Messages.INVALID_ACCESS_CODE);
  }
  ClientSessionModel clientSession=accessCode.getClientSession();
  event.detail(Details.CODE_ID,clientSession.getId());
  String redirect=clientSession.getRedirectUri();
  UserSessionModel userSession=clientSession.getUserSession();
  UserModel user=userSession.getUser();
  ClientModel client=clientSession.getClient();
  event.client(client).user(user).detail(Details.RESPONSE_TYPE,"code").detail(Details.REDIRECT_URI,redirect);
  event.detail(Details.AUTH_METHOD,userSession.getAuthMethod());
  event.detail(Details.USERNAME,userSession.getLoginUsername());
  if (userSession.isRememberMe()) {
    event.detail(Details.REMEMBER_ME,"true");
  }
  if (!AuthenticationManager.isSessionValid(realm,userSession)) {
    AuthenticationManager.backchannelLogout(session,realm,userSession,uriInfo,clientConnection,headers);
    event.error(Errors.INVALID_CODE);
    return ErrorPage.error(session,Messages.SESSION_NOT_ACTIVE);
  }
  event.session(userSession);
  LoginProtocol protocol=session.getProvider(LoginProtocol.class,clientSession.getAuthMethod());
  protocol.setRealm(realm).setHttpHeaders(headers).setUriInfo(uriInfo);
  if (formData.containsKey("cancel")) {
    event.error(Errors.REJECTED_BY_USER);
    return protocol.consentDenied(clientSession);
  }
  UserConsentModel grantedConsent=user.getGrantedConsentByClient(client.getId());
  if (grantedConsent == null) {
    grantedConsent=new UserConsentModel(realm,client.getId());
    user.addGrantedConsent(grantedConsent);
  }
  for (  String roleId : clientSession.getRoles()) {
    grantedConsent.addGrantedRole(roleId);
  }
  for (  ProtocolMapperModel protocolMapper : client.getProtocolMappers()) {
    if (protocolMapper.isConsentRequired() && protocolMapper.getProtocol().equals(clientSession.getAuthMethod()) && protocolMapper.getConsentText() != null) {
      grantedConsent.addGrantedProtocolMapper(protocolMapper.getId());
    }
  }
  user.updateGrantedConsent(grantedConsent);
  event.success();
  return authManager.redirectAfterSuccessfulFlow(session,realm,userSession,clientSession,request,uriInfo,clientConnection);
}
