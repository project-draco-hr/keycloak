{
  MultivaluedMap<String,String> formData=request.getDecodedFormParameters();
  event.event(EventType.REGISTER);
  if (!checkSsl()) {
    event.error(Errors.SSL_REQUIRED);
    return ErrorPage.error(session,Messages.HTTPS_REQUIRED);
  }
  if (!realm.isEnabled()) {
    event.error(Errors.REALM_DISABLED);
    return ErrorPage.error(session,Messages.REALM_NOT_ENABLED);
  }
  if (!realm.isRegistrationAllowed()) {
    event.error(Errors.REGISTRATION_DISABLED);
    return ErrorPage.error(session,Messages.REGISTRATION_NOT_ALLOWED);
  }
  ClientSessionCode clientCode=ClientSessionCode.parse(code,session,realm);
  if (clientCode == null) {
    event.error(Errors.INVALID_CODE);
    return ErrorPage.error(session,Messages.INVALID_CODE);
  }
  if (!clientCode.isValid(ClientSessionModel.Action.AUTHENTICATE.name())) {
    event.error(Errors.INVALID_CODE);
    return ErrorPage.error(session,Messages.INVALID_CODE);
  }
  String username=formData.getFirst(Validation.FIELD_USERNAME);
  String email=formData.getFirst(Validation.FIELD_EMAIL);
  if (realm.isRegistrationEmailAsUsername()) {
    username=email;
    formData.putSingle(AuthenticationManager.FORM_USERNAME,username);
  }
  ClientSessionModel clientSession=clientCode.getClientSession();
  event.client(clientSession.getClient()).detail(Details.REDIRECT_URI,clientSession.getRedirectUri()).detail(Details.RESPONSE_TYPE,"code").detail(Details.USERNAME,username).detail(Details.EMAIL,email).detail(Details.REGISTER_METHOD,"form");
  if (!realm.isEnabled()) {
    event.error(Errors.REALM_DISABLED);
    return ErrorPage.error(session,Messages.REALM_NOT_ENABLED);
  }
  ClientModel client=clientSession.getClient();
  if (client == null) {
    event.error(Errors.CLIENT_NOT_FOUND);
    return ErrorPage.error(session,Messages.UNKNOWN_LOGIN_REQUESTER);
  }
  if (!client.isEnabled()) {
    event.error(Errors.CLIENT_DISABLED);
    return ErrorPage.error(session,Messages.LOGIN_REQUESTER_NOT_ENABLED);
  }
  session.getContext().setClient(client);
  List<String> requiredCredentialTypes=new LinkedList<>();
  boolean passwordRequired=isPasswordRequired();
  if (passwordRequired) {
    requiredCredentialTypes.add(CredentialRepresentation.PASSWORD);
  }
  List<FormMessage> errors=Validation.validateRegistrationForm(realm,formData,requiredCredentialTypes,realm.getPasswordPolicy());
  if (errors != null && !errors.isEmpty()) {
    event.error(Errors.INVALID_REGISTRATION);
    return session.getProvider(LoginFormsProvider.class).setErrors(errors).setFormData(formData).setClientSessionCode(clientCode.getCode()).setAttribute("passwordRequired",isPasswordRequired()).createRegistration();
  }
  if (session.users().getUserByUsername(username,realm) != null) {
    event.error(Errors.USERNAME_IN_USE);
    return session.getProvider(LoginFormsProvider.class).setError(Messages.USERNAME_EXISTS).setFormData(formData).setClientSessionCode(clientCode.getCode()).setAttribute("passwordRequired",isPasswordRequired()).createRegistration();
  }
  if (email != null && session.users().getUserByEmail(email,realm) != null) {
    event.error(Errors.EMAIL_IN_USE);
    return session.getProvider(LoginFormsProvider.class).setError(Messages.EMAIL_EXISTS).setFormData(formData).setClientSessionCode(clientCode.getCode()).setAttribute("passwordRequired",isPasswordRequired()).createRegistration();
  }
  UserModel user=session.users().addUser(realm,username);
  user.setEnabled(true);
  user.setFirstName(formData.getFirst("firstName"));
  user.setLastName(formData.getFirst("lastName"));
  user.setEmail(email);
  if (passwordRequired) {
    UserCredentialModel credentials=new UserCredentialModel();
    credentials.setType(CredentialRepresentation.PASSWORD);
    credentials.setValue(formData.getFirst("password"));
    boolean passwordUpdateSuccessful;
    String passwordUpdateError=null;
    Object[] passwordUpdateErrorParameters=null;
    try {
      session.users().updateCredential(realm,user,UserCredentialModel.password(formData.getFirst("password")));
      passwordUpdateSuccessful=true;
    }
 catch (    ModelException me) {
      passwordUpdateSuccessful=false;
      passwordUpdateError=me.getMessage();
      passwordUpdateErrorParameters=me.getParameters();
    }
catch (    Exception ape) {
      passwordUpdateSuccessful=false;
      passwordUpdateError=ape.getMessage();
    }
    if (!passwordUpdateSuccessful) {
      user.addRequiredAction(UserModel.RequiredAction.UPDATE_PASSWORD);
      return session.getProvider(LoginFormsProvider.class).setError(passwordUpdateError,passwordUpdateErrorParameters).setClientSessionCode(clientCode.getCode()).createResponse(UserModel.RequiredAction.UPDATE_PASSWORD);
    }
  }
  clientSession.setNote(OIDCLoginProtocol.LOGIN_HINT_PARAM,username);
  AttributeFormDataProcessor.process(formData,realm,user);
  event.user(user).success();
  event=new EventBuilder(realm,session,clientConnection);
  clientSession.setAuthenticatedUser(user);
  AuthenticationFlowModel flow=realm.getFlowByAlias(DefaultAuthenticationFlows.BROWSER_FLOW);
  AuthenticationProcessor processor=new AuthenticationProcessor();
  processor.setClientSession(clientSession).setFlowId(flow.getId()).setConnection(clientConnection).setEventBuilder(event).setProtector(authManager.getProtector()).setRealm(realm).setAction(AbstractFormAuthenticator.REGISTRATION_FORM_ACTION).setSession(session).setUriInfo(uriInfo).setRequest(request);
  try {
    return processor.authenticate();
  }
 catch (  Exception e) {
    return processor.handleBrowserException(e);
  }
}
