{
  event.event(EventType.CUSTOM_REQUIRED_ACTION);
  event.detail(Details.CUSTOM_REQUIRED_ACTION,action);
  Checks checks=new Checks();
  if (!checks.verifyCode(code,ClientSessionModel.Action.REQUIRED_ACTIONS.name(),ClientSessionCode.ActionType.USER)) {
    return checks.response;
  }
  final ClientSessionCode clientCode=checks.clientCode;
  final ClientSessionModel clientSession=clientCode.getClientSession();
  final UserSessionModel userSession=clientSession.getUserSession();
  if (userSession == null) {
    logger.userSessionNull();
    event.error(Errors.USER_SESSION_NOT_FOUND);
    throw new WebApplicationException(ErrorPage.error(session,Messages.SESSION_NOT_ACTIVE));
  }
  if (action == null && userSession != null) {
    initEvent(clientSession);
    event.event(EventType.LOGIN);
    return AuthenticationManager.nextActionAfterAuthentication(session,userSession,clientSession,clientConnection,request,uriInfo,event);
  }
  if (!action.equals(clientSession.getNote(AuthenticationManager.CURRENT_REQUIRED_ACTION))) {
    logger.debug("required action doesn't match current required action");
    clientSession.removeNote(AuthenticationManager.CURRENT_REQUIRED_ACTION);
    redirectToRequiredActions(code);
  }
  RequiredActionFactory factory=(RequiredActionFactory)session.getKeycloakSessionFactory().getProviderFactory(RequiredActionProvider.class,action);
  if (factory == null) {
    logger.actionProviderNull();
    event.error(Errors.INVALID_CODE);
    throw new WebApplicationException(ErrorPage.error(session,Messages.INVALID_CODE));
  }
  RequiredActionProvider provider=factory.create(session);
  initEvent(clientSession);
  event.event(EventType.CUSTOM_REQUIRED_ACTION);
  RequiredActionContextResult context=new RequiredActionContextResult(userSession,clientSession,realm,event,session,request,userSession.getUser(),factory){
    @Override public void ignore(){
      throw new RuntimeException("Cannot call ignore within processAction()");
    }
  }
;
  provider.processAction(context);
  if (context.getStatus() == RequiredActionContext.Status.SUCCESS) {
    event.clone().success();
    initEvent(clientSession);
    event.event(EventType.LOGIN);
    clientSession.removeRequiredAction(factory.getId());
    userSession.getUser().removeRequiredAction(factory.getId());
    clientSession.removeNote(AuthenticationManager.CURRENT_REQUIRED_ACTION);
    if (AuthenticationManager.isActionRequired(session,userSession,clientSession,clientConnection,request,uriInfo,event)) {
      return redirectToRequiredActions(code);
    }
 else {
      return AuthenticationManager.finishedRequiredActions(session,userSession,clientSession,clientConnection,request,uriInfo,event);
    }
  }
  if (context.getStatus() == RequiredActionContext.Status.CHALLENGE) {
    return context.getChallenge();
  }
  if (context.getStatus() == RequiredActionContext.Status.FAILURE) {
    LoginProtocol protocol=context.getSession().getProvider(LoginProtocol.class,context.getClientSession().getAuthMethod());
    protocol.setRealm(context.getRealm()).setHttpHeaders(context.getHttpRequest().getHttpHeaders()).setUriInfo(context.getUriInfo()).setEventBuilder(event);
    event.detail(Details.CUSTOM_REQUIRED_ACTION,action);
    Response response=protocol.sendError(context.getClientSession(),Error.CONSENT_DENIED);
    event.error(Errors.REJECTED_BY_USER);
    return response;
  }
  throw new RuntimeException("Unreachable");
}
