{
  event.event(EventType.SEND_RESET_PASSWORD);
  Checks checks=new Checks();
  if (!checks.verifyCode(DefaultAuthenticationFlows.BROWSER_FLOW,code)) {
    return checks.response;
  }
  final ClientSessionCode accessCode=checks.clientCode;
  final ClientSessionModel clientSession=accessCode.getClientSession();
  ClientModel client=clientSession.getClient();
  String username=formData.getFirst("username");
  if (username == null || username.isEmpty()) {
    event.error(Errors.USERNAME_MISSING);
    return session.getProvider(LoginFormsProvider.class).setError(Messages.MISSING_USERNAME).setClientSessionCode(accessCode.getCode()).createPasswordReset();
  }
  event.client(client.getClientId()).detail(Details.REDIRECT_URI,clientSession.getRedirectUri()).detail(Details.RESPONSE_TYPE,"code").detail(Details.AUTH_METHOD,"form").detail(Details.USERNAME,username);
  UserModel user=session.users().getUserByUsername(username,realm);
  if (user == null && username.contains("@")) {
    user=session.users().getUserByEmail(username,realm);
  }
  if (user == null) {
    event.error(Errors.USER_NOT_FOUND);
  }
 else   if (!user.isEnabled()) {
    event.user(user).error(Errors.USER_DISABLED);
  }
 else   if (user.getEmail() == null || user.getEmail().trim().length() == 0) {
    event.user(user).error(Errors.INVALID_EMAIL);
  }
 else {
    event.user(user);
    UserSessionModel userSession=session.sessions().createUserSession(realm,user,username,clientConnection.getRemoteAddr(),"form",false,null,null);
    event.session(userSession);
    TokenManager.attachClientSession(userSession,clientSession);
    accessCode.setAction(ClientSessionModel.Action.RECOVER_PASSWORD.name());
    try {
      UriBuilder builder=Urls.loginPasswordResetBuilder(uriInfo.getBaseUri());
      builder.queryParam("key",accessCode.getCode());
      String link=builder.build(realm.getName()).toString();
      long expiration=TimeUnit.SECONDS.toMinutes(realm.getAccessCodeLifespanUserAction());
      this.session.getProvider(EmailProvider.class).setRealm(realm).setUser(user).sendPasswordReset(link,expiration);
      event.detail(Details.EMAIL,user.getEmail()).detail(Details.CODE_ID,clientSession.getId()).success();
    }
 catch (    EmailException e) {
      event.error(Errors.EMAIL_SEND_FAILED);
      logger.error("Failed to send password reset email",e);
      return session.getProvider(LoginFormsProvider.class).setError(Messages.EMAIL_SENT_ERROR).setClientSessionCode(accessCode.getCode()).createErrorPage();
    }
    createActionCookie(realm,uriInfo,clientConnection,userSession.getId());
  }
  return session.getProvider(LoginFormsProvider.class).setSuccess(Messages.EMAIL_SENT).setClientSessionCode(accessCode.getCode()).createPasswordReset();
}
