{
  User realmCreator=authenticationManager.authenticateToken(defaultRealm,headers);
  Role creatorRole=defaultRealm.getIdm().getRole(RegistrationService.REALM_CREATOR_ROLE);
  if (!defaultRealm.getIdm().hasRole(realmCreator,creatorRole)) {
    logger.warn("not a realm creator");
    throw new NotAuthorizedException("Bearer");
  }
  verifyRealmRepresentation(rep);
  RealmModel realm=adapter.create(rep.getRealm());
  realm.addRealmAdmin(realmCreator);
  KeyPair keyPair=null;
  try {
    keyPair=KeyPairGenerator.getInstance("RSA").generateKeyPair();
  }
 catch (  NoSuchAlgorithmException e) {
    throw new RuntimeException(e);
  }
  realm.setPrivateKey(keyPair.getPrivate());
  realm.setPublicKey(keyPair.getPublic());
  realm.setName(rep.getRealm());
  realm.setEnabled(rep.isEnabled());
  realm.setTokenLifespan(rep.getTokenLifespan());
  realm.setAccessCodeLifespan(rep.getAccessCodeLifespan());
  realm.setSslNotRequired(rep.isSslNotRequired());
  realm.setCookieLoginAllowed(rep.isCookieLoginAllowed());
  realm.updateRealm();
  Map<String,User> userMap=new HashMap<String,User>();
  for (  RequiredCredentialRepresentation requiredCred : rep.getRequiredCredentials()) {
    RequiredCredentialModel credential=new RequiredCredentialModel();
    credential.setType(requiredCred.getType());
    credential.setInput(requiredCred.isInput());
    credential.setSecret(requiredCred.isSecret());
    realm.addRequiredCredential(credential);
  }
  for (  UserRepresentation userRep : rep.getUsers()) {
    User user=new SimpleUser(userRep.getUsername());
    user.setEnabled(userRep.isEnabled());
    if (userRep.getAttributes() != null) {
      for (      Map.Entry<String,String> entry : userRep.getAttributes().entrySet()) {
        user.setAttribute(new Attribute<String>(entry.getKey(),entry.getValue()));
      }
    }
    realm.getIdm().add(user);
    if (userRep.getCredentials() != null) {
      for (      UserRepresentation.Credential cred : userRep.getCredentials()) {
        UserCredentialModel credential=new UserCredentialModel();
        credential.setType(cred.getType());
        credential.setValue(cred.getValue());
        realm.updateCredential(user,credential);
      }
    }
    userMap.put(user.getLoginName(),user);
  }
  Map<String,Role> roles=new HashMap<String,Role>();
  if (rep.getRoles() != null) {
    for (    String roleString : rep.getRoles()) {
      SimpleRole role=new SimpleRole(roleString.trim());
      realm.getIdm().add(role);
      roles.put(role.getName(),role);
    }
  }
  if (rep.getRoleMappings() != null) {
    for (    RoleMappingRepresentation mapping : rep.getRoleMappings()) {
      User user=userMap.get(mapping.getUsername());
      for (      String roleString : mapping.getRoles()) {
        Role role=roles.get(roleString.trim());
        if (role == null) {
          role=new SimpleRole(roleString.trim());
          realm.getIdm().add(role);
          roles.put(role.getName(),role);
        }
        realm.getIdm().grantRole(user,role);
      }
    }
  }
  if (rep.getScopeMappings() != null) {
    for (    ScopeMappingRepresentation scope : rep.getScopeMappings()) {
      for (      String roleString : scope.getRoles()) {
        Role role=roles.get(roleString.trim());
        if (role == null) {
          role=new SimpleRole(roleString.trim());
          realm.getIdm().add(role);
          roles.put(role.getName(),role);
        }
        User user=userMap.get(scope.getUsername());
        realm.addScope(user,role.getName());
      }
    }
  }
  if (!roles.containsKey("*")) {
    SimpleRole wildcard=new SimpleRole("*");
    realm.getIdm().add(wildcard);
    roles.put("*",wildcard);
  }
  if (rep.getResources() != null) {
    createResources(rep,realm,userMap);
  }
  return realm;
}
