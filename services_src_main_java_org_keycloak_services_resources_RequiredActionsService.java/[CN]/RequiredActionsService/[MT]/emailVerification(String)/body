{
  event.event(EventType.VERIFY_EMAIL);
  if (uriInfo.getQueryParameters().containsKey("key")) {
    Checks checks=new Checks();
    if (!checks.check(code,ClientSessionModel.Action.VERIFY_EMAIL)) {
      return checks.response;
    }
    ClientSessionCode accessCode=checks.clientCode;
    ClientSessionModel clientSession=accessCode.getClientSession();
    UserSessionModel userSession=clientSession.getUserSession();
    UserModel user=userSession.getUser();
    String key=uriInfo.getQueryParameters().getFirst("key");
    String keyNote=clientSession.getNote("key");
    if (key == null || !key.equals(keyNote)) {
      return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Somebody is trying to illegally change your email.");
    }
    initEvent(clientSession);
    user.setEmailVerified(true);
    user.removeRequiredAction(RequiredAction.VERIFY_EMAIL);
    event.clone().event(EventType.VERIFY_EMAIL).detail(Details.EMAIL,user.getEmail()).success();
    return redirectOauth(user,accessCode,clientSession,userSession);
  }
 else {
    Checks checks=new Checks();
    if (!checks.check(code,ClientSessionModel.Action.VERIFY_EMAIL)) {
      return checks.response;
    }
    ClientSessionCode accessCode=checks.clientCode;
    ClientSessionModel clientSession=accessCode.getClientSession();
    String verifyCode=UUID.randomUUID().toString();
    clientSession.setNote("key",verifyCode);
    UserSessionModel userSession=clientSession.getUserSession();
    UserModel user=userSession.getUser();
    initEvent(clientSession);
    return Flows.forms(session,realm,null,uriInfo).setAccessCode(accessCode.getCode()).setVerifyCode(verifyCode).setUser(userSession.getUser()).createResponse(RequiredAction.VERIFY_EMAIL);
  }
}
