{
  String username=formData.getFirst("username");
  String scopeParam=uriInfo.getQueryParameters().getFirst(OAuth2Constants.SCOPE);
  String state=uriInfo.getQueryParameters().getFirst(OAuth2Constants.STATE);
  String redirect=uriInfo.getQueryParameters().getFirst(OAuth2Constants.REDIRECT_URI);
  String clientId=uriInfo.getQueryParameters().getFirst(OAuth2Constants.CLIENT_ID);
  AuthenticationManager authManager=new AuthenticationManager();
  ClientModel client=realm.findClient(clientId);
  if (client == null) {
    return Flows.oauth(session,realm,request,uriInfo,authManager,tokenManager).forwardToSecurityFailure("Unknown login requester.");
  }
  if (!client.isEnabled()) {
    return Flows.oauth(session,realm,request,uriInfo,authManager,tokenManager).forwardToSecurityFailure("Login requester not enabled.");
  }
  audit.event(EventType.SEND_RESET_PASSWORD).client(clientId).detail(Details.REDIRECT_URI,redirect).detail(Details.RESPONSE_TYPE,"code").detail(Details.AUTH_METHOD,"form").detail(Details.USERNAME,username);
  UserModel user=session.users().getUserByUsername(username,realm);
  if (user == null && username.contains("@")) {
    user=session.users().getUserByEmail(username,realm);
  }
  if (user == null) {
    logger.warn("Failed to send password reset email: user not found");
    audit.error(Errors.USER_NOT_FOUND);
  }
 else {
    UserSessionModel userSession=session.sessions().createUserSession(realm,user,username,clientConnection.getRemoteAddr(),"form",false);
    audit.session(userSession);
    AccessCodeEntry accessCode=tokenManager.createAccessCode(scopeParam,state,redirect,session,realm,client,user,userSession);
    accessCode.setRequiredAction(RequiredAction.UPDATE_PASSWORD);
    try {
      UriBuilder builder=Urls.loginPasswordResetBuilder(uriInfo.getBaseUri());
      builder.queryParam("key",accessCode.getCode());
      String link=builder.build(realm.getName()).toString();
      long expiration=TimeUnit.SECONDS.toMinutes(realm.getAccessCodeLifespanUserAction());
      this.session.getProvider(EmailProvider.class).setRealm(realm).setUser(user).sendPasswordReset(link,expiration);
      audit.user(user).detail(Details.EMAIL,user.getEmail()).detail(Details.CODE_ID,accessCode.getCodeId()).success();
    }
 catch (    EmailException e) {
      logger.error("Failed to send password reset email",e);
      return Flows.forms(this.session,realm,uriInfo).setError("emailSendError").createErrorPage();
    }
  }
  return Flows.forms(session,realm,uriInfo).setSuccess("emailSent").createPasswordReset();
}
