{
  String username=formData.getFirst("username");
  String email=formData.getFirst("email");
  String scopeParam=uriInfo.getQueryParameters().getFirst("scope");
  String state=uriInfo.getQueryParameters().getFirst("state");
  String redirect=uriInfo.getQueryParameters().getFirst("redirect_uri");
  String clientId=uriInfo.getQueryParameters().getFirst("client_id");
  UserModel client=realm.getUser(clientId);
  if (client == null) {
    return Flows.oauth(realm,request,uriInfo,authManager,tokenManager).forwardToSecurityFailure("Unknown login requester.");
  }
  if (!client.isEnabled()) {
    return Flows.oauth(realm,request,uriInfo,authManager,tokenManager).forwardToSecurityFailure("Login requester not enabled.");
  }
  UserModel user=realm.getUser(username);
  if (user == null || !email.equals(user.getEmail())) {
    return Flows.forms(realm,request,uriInfo).setError("emailError").forwardToPasswordReset();
  }
  Set<RequiredAction> requiredActions=new HashSet<RequiredAction>(user.getRequiredActions());
  requiredActions.add(RequiredAction.UPDATE_PASSWORD);
  AccessCodeEntry accessCode=tokenManager.createAccessCode(scopeParam,state,redirect,realm,client,user);
  accessCode.setRequiredActions(requiredActions);
  accessCode.setExpiration(System.currentTimeMillis() / 1000 + realm.getAccessCodeLifespanUserAction());
  try {
    new EmailSender(realm.getSmtpConfig()).sendPasswordReset(user,realm,accessCode,uriInfo);
  }
 catch (  EmailException e) {
    logger.error("Failed to send password reset email",e);
    return Flows.forms(realm,request,uriInfo).setError("emailSendError").forwardToErrorPage();
  }
  return Flows.forms(realm,request,uriInfo).setSuccess("emailSent").forwardToPasswordReset();
}
