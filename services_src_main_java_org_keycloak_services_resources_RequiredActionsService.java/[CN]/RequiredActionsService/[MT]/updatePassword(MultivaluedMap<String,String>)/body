{
  logger.debug("updatePassword");
  AccessCodeEntry accessCode=getAccessCodeEntry(RequiredAction.UPDATE_PASSWORD);
  if (accessCode == null) {
    logger.debug("updatePassword access code is null");
    return unauthorized();
  }
  logger.debug("updatePassword has access code");
  UserModel user=getUser(accessCode);
  initAudit(accessCode);
  String passwordNew=formData.getFirst("password-new");
  String passwordConfirm=formData.getFirst("password-confirm");
  LoginForms loginForms=Flows.forms(realm,uriInfo).setUser(user);
  if (Validation.isEmpty(passwordNew)) {
    return loginForms.setError(Messages.MISSING_PASSWORD).createResponse(RequiredAction.UPDATE_PASSWORD);
  }
 else   if (!passwordNew.equals(passwordConfirm)) {
    return loginForms.setError(Messages.NOTMATCH_PASSWORD).createResponse(RequiredAction.UPDATE_PASSWORD);
  }
  try {
    boolean updateSuccessful=AuthenticationProviderManager.getManager(realm,providerSession).updatePassword(user,passwordNew);
    if (!updateSuccessful) {
      return loginForms.setError("Password update failed").createResponse(RequiredAction.UPDATE_PASSWORD);
    }
  }
 catch (  AuthenticationProviderException ape) {
    return loginForms.setError(ape.getMessage()).createResponse(RequiredAction.UPDATE_PASSWORD);
  }
  logger.debug("updatePassword updated credential");
  user.removeRequiredAction(RequiredAction.UPDATE_PASSWORD);
  if (accessCode != null) {
    accessCode.getRequiredActions().remove(RequiredAction.UPDATE_PASSWORD);
  }
  audit.clone().event(Events.UPDATE_PASSWORD).success();
  return redirectOauth(user,accessCode);
}
