{
  RealmManager realmManager=new RealmManager(session);
  RealmModel defaultRealm=realmManager.defaultRealm();
  List<String> requiredCredentialTypes=new LinkedList<String>();
  for (  RequiredCredentialModel m : defaultRealm.getRequiredCredentials()) {
    requiredCredentialTypes.add(m.getType());
  }
  String error=Validation.validateRegistrationForm(formData,requiredCredentialTypes);
  if (error != null) {
    return Flows.forms(defaultRealm,request,uriInfo).setError(error).setFormData(formData).forwardToRegistration();
  }
  UserRepresentation newUser=new UserRepresentation();
  newUser.setUsername(formData.getFirst("username"));
  newUser.setEmail(formData.getFirst("email"));
  newUser.setFirstName(formData.getFirst("firstName"));
  newUser.setLastName(formData.getFirst("lastName"));
  if (requiredCredentialTypes.contains(CredentialRepresentation.PASSWORD)) {
    newUser.credential(CredentialRepresentation.PASSWORD,formData.getFirst("password"));
  }
  if (requiredCredentialTypes.contains(CredentialRepresentation.TOTP)) {
    newUser.credential(CredentialRepresentation.TOTP,formData.getFirst("password"));
  }
  UserModel user=registerMe(defaultRealm,newUser);
  if (user == null) {
    return Flows.forms(defaultRealm,request,uriInfo).setError(Messages.USERNAME_EXISTS).setFormData(formData).forwardToRegistration();
  }
  NewCookie cookie=authManager.createSaasIdentityCookie(defaultRealm,user,uriInfo);
  return Response.status(302).location(contextRoot(uriInfo).path(adminPath).build()).cookie(cookie).build();
}
