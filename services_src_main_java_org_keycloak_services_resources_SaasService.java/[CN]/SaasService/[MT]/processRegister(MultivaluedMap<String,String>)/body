{
  return new Transaction<Response>(){
    @Override protected Response callImpl(){
      RealmManager realmManager=new RealmManager(session);
      RealmModel defaultRealm=realmManager.defaultRealm();
      List<String> requiredCredentialTypes=new LinkedList<String>();
      for (      RequiredCredentialModel m : defaultRealm.getRequiredCredentials()) {
        requiredCredentialTypes.add(m.getType());
      }
      String error=Validation.validateRegistrationForm(formData,requiredCredentialTypes);
      if (error != null) {
        return Flows.forms(defaultRealm,request).setError(error).setFormData(formData).forwardToRegistration();
      }
      UserRepresentation newUser=new UserRepresentation();
      newUser.setUsername(formData.getFirst("username"));
      newUser.setEmail(formData.getFirst("email"));
      String fullname=formData.getFirst("name");
      if (fullname != null) {
        StringTokenizer tokenizer=new StringTokenizer(fullname," ");
        StringBuffer first=null;
        String last="";
        while (tokenizer.hasMoreTokens()) {
          String token=tokenizer.nextToken();
          if (tokenizer.hasMoreTokens()) {
            if (first == null) {
              first=new StringBuffer();
            }
 else {
              first.append(" ");
            }
            first.append(token);
          }
 else {
            last=token;
          }
        }
        if (first == null)         first=new StringBuffer();
        newUser.setFirstName(first.toString());
        newUser.setLastName(last);
      }
      if (requiredCredentialTypes.contains(CredentialRepresentation.PASSWORD)) {
        newUser.credential(CredentialRepresentation.PASSWORD,formData.getFirst("password"));
      }
      if (requiredCredentialTypes.contains(CredentialRepresentation.TOTP)) {
        newUser.credential(CredentialRepresentation.TOTP,formData.getFirst("password"));
      }
      UserModel user=registerMe(defaultRealm,newUser);
      if (user == null) {
        return Flows.forms(defaultRealm,request).setError(Messages.USERNAME_EXISTS).setFormData(formData).forwardToRegistration();
      }
      NewCookie cookie=authManager.createSaasIdentityCookie(defaultRealm,user,uriInfo);
      return Response.status(302).location(contextRoot(uriInfo).path(adminPath).build()).cookie(cookie).build();
    }
  }
.call();
}
