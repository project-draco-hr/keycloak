{
  Map<String,String[]> queryParams=getQueryParams();
  RequestDetails requestData=getRequestDetails(queryParams);
  SocialProvider provider=SocialLoader.load(requestData.getProviderId());
  String realmName=requestData.getClientAttribute("realm");
  RealmManager realmManager=new RealmManager(session);
  RealmModel realm=realmManager.getRealmByName(realmName);
  OAuthFlows oauth=Flows.oauth(realm,request,uriInfo,authManager,tokenManager);
  if (!realm.isEnabled()) {
    return oauth.forwardToSecurityFailure("Realm not enabled.");
  }
  String clientId=requestData.getClientAttributes().get("clientId");
  UserModel client=realm.getUser(clientId);
  if (client == null) {
    return oauth.forwardToSecurityFailure("Unknown login requester.");
  }
  if (!client.isEnabled()) {
    return oauth.forwardToSecurityFailure("Login requester not enabled.");
  }
  String key=realm.getSocialConfig().get(requestData.getProviderId() + ".key");
  String secret=realm.getSocialConfig().get(requestData.getProviderId() + ".secret");
  String callbackUri=Urls.socialCallback(uriInfo.getBaseUri()).toString();
  SocialProviderConfig config=new SocialProviderConfig(key,secret,callbackUri);
  AuthCallback callback=new AuthCallback(requestData.getSocialAttributes(),queryParams);
  SocialUser socialUser;
  try {
    socialUser=provider.processCallback(config,callback);
  }
 catch (  SocialProviderException e) {
    logger.warn("Failed to process social callback",e);
    return oauth.forwardToSecurityFailure("Failed to process social callback");
  }
  SocialLinkModel socialLink=new SocialLinkModel(provider.getId(),socialUser.getId());
  UserModel user=realm.getUserBySocialLink(socialLink);
  if (user == null) {
    if (!realm.isRegistrationAllowed()) {
      return oauth.forwardToSecurityFailure("Registration not allowed");
    }
    user=realm.addUser(KeycloakModelUtils.generateId());
    user.setEnabled(true);
    user.setFirstName(socialUser.getFirstName());
    user.setLastName(socialUser.getLastName());
    user.setEmail(socialUser.getEmail());
    if (realm.isUpdateProfileOnInitialSocialLogin()) {
      user.addRequiredAction(UserModel.RequiredAction.UPDATE_PROFILE);
    }
    realm.addSocialLink(user,socialLink);
  }
  if (!user.isEnabled()) {
    return oauth.forwardToSecurityFailure("Your account is not enabled.");
  }
  String scope=requestData.getClientAttributes().get("scope");
  String state=requestData.getClientAttributes().get("state");
  String redirectUri=requestData.getClientAttributes().get("redirectUri");
  return oauth.processAccessCode(scope,state,redirectUri,client,user);
}
