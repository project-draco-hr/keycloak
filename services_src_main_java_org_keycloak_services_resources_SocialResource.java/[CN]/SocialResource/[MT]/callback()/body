{
  Map<String,String[]> queryParams=getQueryParams();
  RequestDetails requestData=getRequestDetails(queryParams);
  SocialProvider provider=SocialLoader.load(requestData.getProviderId());
  String realmName=requestData.getClientAttribute("realm");
  RealmManager realmManager=new RealmManager(session);
  RealmModel realm=realmManager.getRealmByName(realmName);
  OAuthFlows oauth=Flows.oauth(realm,request,uriInfo,authManager,tokenManager);
  if (!realm.isEnabled()) {
    return oauth.forwardToSecurityFailure("Realm not enabled.");
  }
  String clientId=requestData.getClientAttributes().get("clientId");
  ClientModel client=realm.findClient(clientId);
  if (client == null) {
    return oauth.forwardToSecurityFailure("Unknown login requester.");
  }
  if (!client.isEnabled()) {
    return oauth.forwardToSecurityFailure("Login requester not enabled.");
  }
  String key=realm.getSocialConfig().get(requestData.getProviderId() + ".key");
  String secret=realm.getSocialConfig().get(requestData.getProviderId() + ".secret");
  String callbackUri=Urls.socialCallback(uriInfo.getBaseUri()).toString();
  SocialProviderConfig config=new SocialProviderConfig(key,secret,callbackUri);
  AuthCallback callback=new AuthCallback(requestData.getSocialAttributes(),queryParams);
  SocialUser socialUser;
  try {
    socialUser=provider.processCallback(config,callback);
  }
 catch (  SocialAccessDeniedException e) {
    MultivaluedHashMap<String,String> queryParms=new MultivaluedHashMap<String,String>();
    queryParms.putSingle("client_id",requestData.getClientAttribute("clientId"));
    queryParms.putSingle("state",requestData.getClientAttribute("state"));
    queryParms.putSingle("scope",requestData.getClientAttribute("scope"));
    queryParms.putSingle("redirect_uri",requestData.getClientAttribute("redirectUri"));
    queryParms.putSingle("response_type",requestData.getClientAttribute("responseType"));
    return Flows.forms(realm,request,uriInfo).setQueryParams(queryParms).setWarning("Access denied").createLogin();
  }
catch (  SocialProviderException e) {
    logger.warn("Failed to process social callback",e);
    return oauth.forwardToSecurityFailure("Failed to process social callback");
  }
  SocialLinkModel socialLink=new SocialLinkModel(provider.getId(),socialUser.getId(),socialUser.getUsername());
  UserModel user=realm.getUserBySocialLink(socialLink);
  String userId=requestData.getClientAttribute("userId");
  if (userId != null) {
    UserModel authenticatedUser=realm.getUserById(userId);
    if (user != null) {
      return oauth.forwardToSecurityFailure("This social account is already linked to other user");
    }
    if (!authenticatedUser.isEnabled()) {
      return oauth.forwardToSecurityFailure("User is disabled");
    }
    if (!realm.hasRole(authenticatedUser,realm.getApplicationByName(Constants.ACCOUNT_MANAGEMENT_APP).getRole(AccountRoles.MANAGE_ACCOUNT))) {
      return oauth.forwardToSecurityFailure("Insufficient permissions to link social account");
    }
    realm.addSocialLink(authenticatedUser,socialLink);
    logger.debug("Social provider " + provider.getId() + " linked with user "+ authenticatedUser.getLoginName());
    String redirectUri=requestData.getClientAttributes().get("redirectUri");
    if (redirectUri == null) {
      return oauth.forwardToSecurityFailure("Unknown redirectUri");
    }
    return Response.status(Status.FOUND).location(UriBuilder.fromUri(redirectUri).build()).build();
  }
  if (user == null) {
    if (!realm.isRegistrationAllowed()) {
      return oauth.forwardToSecurityFailure("Registration not allowed");
    }
    user=realm.addUser(KeycloakModelUtils.generateId());
    user.setEnabled(true);
    user.setFirstName(socialUser.getFirstName());
    user.setLastName(socialUser.getLastName());
    user.setEmail(socialUser.getEmail());
    if (realm.isUpdateProfileOnInitialSocialLogin()) {
      user.addRequiredAction(UserModel.RequiredAction.UPDATE_PROFILE);
    }
    realm.addSocialLink(user,socialLink);
  }
  if (!user.isEnabled()) {
    return oauth.forwardToSecurityFailure("Your account is not enabled.");
  }
  String scope=requestData.getClientAttributes().get("scope");
  String state=requestData.getClientAttributes().get("state");
  String redirectUri=requestData.getClientAttributes().get("redirectUri");
  return oauth.processAccessCode(scope,state,redirectUri,client,user);
}
