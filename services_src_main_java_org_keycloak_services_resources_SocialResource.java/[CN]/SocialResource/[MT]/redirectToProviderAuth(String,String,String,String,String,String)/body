{
  RealmManager realmManager=new RealmManager(session);
  RealmModel realm=realmManager.getRealmByName(realmName);
  SocialProvider provider=SocialLoader.load(providerId);
  if (provider == null) {
    return Flows.forms(realm,request,uriInfo).setError("Social provider not found").createErrorPage();
  }
  String key=realm.getSocialConfig().get(providerId + ".key");
  String secret=realm.getSocialConfig().get(providerId + ".secret");
  String callbackUri=Urls.socialCallback(uriInfo.getBaseUri()).toString();
  SocialProviderConfig config=new SocialProviderConfig(key,secret,callbackUri);
  UserModel client=realm.getUser(clientId);
  if (client == null) {
    logger.warn("Unknown login requester: " + clientId);
    return Flows.forms(realm,request,uriInfo).setError("Unknown login requester.").createErrorPage();
  }
  if (!client.isEnabled()) {
    logger.warn("Login requester not enabled.");
    return Flows.forms(realm,request,uriInfo).setError("Login requester not enabled.").createErrorPage();
  }
  redirectUri=TokenService.verifyRedirectUri(redirectUri,client);
  if (redirectUri == null) {
    return Flows.forms(realm,request,uriInfo).setError("Invalid redirect_uri.").createErrorPage();
  }
  try {
    AuthRequest authRequest=provider.getAuthUrl(config);
    RequestDetails socialRequest=RequestDetails.create(providerId).putSocialAttributes(authRequest.getAttributes()).putClientAttribute("realm",realmName).putClientAttribute("clientId",clientId).putClientAttribute("scope",scope).putClientAttribute("state",state).putClientAttribute("redirectUri",redirectUri).build();
    socialRequestManager.addRequest(authRequest.getId(),socialRequest);
    return Response.status(Status.FOUND).location(authRequest.getAuthUri()).build();
  }
 catch (  Throwable t) {
    return Flows.forms(realm,request,uriInfo).setError("Failed to redirect to social auth").createErrorPage();
  }
}
