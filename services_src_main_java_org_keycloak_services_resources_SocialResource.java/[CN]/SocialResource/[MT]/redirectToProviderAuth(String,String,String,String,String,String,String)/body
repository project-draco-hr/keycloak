{
  RealmManager realmManager=new RealmManager(session);
  RealmModel realm=realmManager.getRealmByName(realmName);
  Audit audit=createAudit(realm).event(Events.LOGIN).client(clientId).detail(Details.REDIRECT_URI,redirectUri).detail(Details.RESPONSE_TYPE,"code").detail(Details.AUTH_METHOD,"social");
  SocialProvider provider=SocialLoader.load(providerId);
  if (provider == null) {
    audit.error(Errors.SOCIAL_PROVIDER_NOT_FOUND);
    return Flows.forms(realm,request,uriInfo).setError("Social provider not found").createErrorPage();
  }
  ClientModel client=realm.findClient(clientId);
  if (client == null) {
    audit.error(Errors.CLIENT_NOT_FOUND);
    logger.warn("Unknown login requester: " + clientId);
    return Flows.forms(realm,request,uriInfo).setError("Unknown login requester.").createErrorPage();
  }
  if (!client.isEnabled()) {
    audit.error(Errors.CLIENT_DISABLED);
    logger.warn("Login requester not enabled.");
    return Flows.forms(realm,request,uriInfo).setError("Login requester not enabled.").createErrorPage();
  }
  redirectUri=TokenService.verifyRedirectUri(redirectUri,client);
  if (redirectUri == null) {
    audit.error(Errors.INVALID_REDIRECT_URI);
    return Flows.forms(realm,request,uriInfo).setError("Invalid redirect_uri.").createErrorPage();
  }
  try {
    return Flows.social(socialRequestManager,realm,uriInfo,provider).putClientAttribute("realm",realmName).putClientAttribute("clientId",clientId).putClientAttribute(OAuth2Constants.SCOPE,scope).putClientAttribute(OAuth2Constants.STATE,state).putClientAttribute("redirectUri",redirectUri).putClientAttribute("responseType",responseType).redirectToSocialProvider();
  }
 catch (  Throwable t) {
    logger.error("Failed to redirect to social auth",t);
    return Flows.forms(realm,request,uriInfo).setError("Failed to redirect to social auth").createErrorPage();
  }
}
