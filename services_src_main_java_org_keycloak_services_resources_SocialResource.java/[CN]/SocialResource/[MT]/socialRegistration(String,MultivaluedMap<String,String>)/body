{
  RealmManager realmManager=new RealmManager(session);
  RealmModel realm=realmManager.getRealm(realmId);
  Cookie cookie=headers.getCookies().get(SocialConstants.SOCIAL_REGISTRATION_COOKIE);
  if (cookie == null) {
    return Flows.forms(realm,request,uriInfo).setError("Social registration cookie not found").forwardToErrorPage();
  }
  String requestId=cookie.getValue();
  if (!socialRequestManager.isRequestId(requestId)) {
    logger.error("Unknown requestId found in cookie. Maybe it's expired. requestId=" + requestId);
    return Flows.forms(realm,request,uriInfo).setError("Unknown requestId found in cookie. Maybe it's expired.").forwardToErrorPage();
  }
  RequestDetails requestData=socialRequestManager.getData(requestId);
  if (realm == null || !realm.isEnabled()) {
    return Flows.forms(realm,request,uriInfo).setError("Realm doesn't exists or is not enabled.").forwardToErrorPage();
  }
  TokenService tokenService=new TokenService(realm,tokenManager);
  resourceContext.initResource(tokenService);
  String clientId=requestData.getClientAttribute("clientId");
  String scope=requestData.getClientAttribute("scope");
  String state=requestData.getClientAttribute("state");
  String redirectUri=requestData.getClientAttribute("redirectUri");
  Response response1=tokenService.processRegisterImpl(clientId,scope,state,redirectUri,formData,true);
  if (response1 != null || request.wasForwarded()) {
    logger.warn("Registration attempt wasn't successful. Request already forwarded or redirected.");
    return response1;
  }
  String username=formData.getFirst("username");
  UserModel user=realm.getUser(username);
  if (user == null) {
    throw new IllegalStateException("User " + username + " not found in the realm");
  }
  realm.addSocialLink(user,new SocialLinkModel(requestData.getProviderId(),username));
  String cookiePath=Urls.socialBase(uriInfo.getBaseUri()).build().getPath();
  NewCookie newCookie=new NewCookie(SocialConstants.SOCIAL_REGISTRATION_COOKIE,"",cookiePath,null,"Expire social cookie",0,false);
  logger.debug("Expiring social registration cookie: {0}, path: {1}",SocialConstants.SOCIAL_REGISTRATION_COOKIE,cookiePath);
  response.addNewCookie(newCookie);
  socialRequestManager.retrieveData(requestId);
  return tokenService.processLogin(clientId,scope,state,redirectUri,formData);
}
