{
  if (code != null) {
    event.detail(Details.CODE_ID,code);
  }
 else {
    event.client(clientId).detail(Details.REDIRECT_URI,redirect).detail(Details.RESPONSE_TYPE,"code");
  }
  if (!checkSsl()) {
    event.error(Errors.SSL_REQUIRED);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"HTTPS required");
  }
  if (!realm.isEnabled()) {
    event.error(Errors.REALM_DISABLED);
    return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Realm not enabled");
  }
  clientSession=null;
  if (code != null) {
    ClientSessionCode clientCode=ClientSessionCode.parse(code,session,realm);
    if (clientCode == null) {
      event.error(Errors.INVALID_CODE);
      return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Unknown code, please login again through your application.");
    }
    if (!clientCode.isValid(ClientSessionModel.Action.AUTHENTICATE)) {
      event.error(Errors.INVALID_CODE);
      return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Invalid code, please login again through your application.");
    }
    clientSession=clientCode.getClientSession();
    if (!clientSession.getAuthMethod().equals(OAuthFlows.LOGIN_PAGE_PROTOCOL)) {
      event.error(Errors.INVALID_CODE);
      return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Invalid protocol, please login again through your application.");
    }
    state=clientSession.getNote(OAuthFlows.STATE_PARAM);
    scopeParam=clientSession.getNote(OAuthFlows.SCOPE_PARAM);
    responseType=clientSession.getNote(OAuthFlows.RESPONSE_TYPE_PARAM);
    loginHint=clientSession.getNote(OAuthFlows.LOGIN_HINT_PARAM);
    prompt=clientSession.getNote(OAuthFlows.PROMPT_PARAM);
  }
 else {
    if (state == null) {
      event.error(Errors.STATE_PARAM_NOT_FOUND);
      return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Invalid state param.");
    }
    ClientModel client=realm.findClient(clientId);
    if (client == null) {
      event.error(Errors.CLIENT_NOT_FOUND);
      return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Unknown login requester.");
    }
    if (!client.isEnabled()) {
      event.error(Errors.CLIENT_DISABLED);
      return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Login requester not enabled.");
    }
    if ((client instanceof ApplicationModel) && ((ApplicationModel)client).isBearerOnly()) {
      event.error(Errors.NOT_ALLOWED);
      return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Bearer-only applications are not allowed to initiate browser login");
    }
    if (client.isDirectGrantsOnly()) {
      event.error(Errors.NOT_ALLOWED);
      return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"direct-grants-only clients are not allowed to initiate browser login");
    }
    redirect=verifyRedirectUri(uriInfo,redirect,realm,client);
    if (redirect == null) {
      event.error(Errors.INVALID_REDIRECT_URI);
      return Flows.forwardToSecurityFailurePage(session,realm,uriInfo,"Invalid redirect_uri.");
    }
    clientSession=session.sessions().createClientSession(realm,client);
    clientSession.setAuthMethod(OAuthFlows.LOGIN_PAGE_PROTOCOL);
    clientSession.setRedirectUri(redirect);
    clientSession.setAction(ClientSessionModel.Action.AUTHENTICATE);
    clientSession.setNote(OAuthFlows.STATE_PARAM,state);
    if (scopeParam != null)     clientSession.setNote(OAuthFlows.SCOPE_PARAM,scopeParam);
    if (responseType != null)     clientSession.setNote(OAuthFlows.RESPONSE_TYPE_PARAM,responseType);
    if (loginHint != null)     clientSession.setNote(OAuthFlows.LOGIN_HINT_PARAM,loginHint);
    if (prompt != null)     clientSession.setNote(OAuthFlows.PROMPT_PARAM,prompt);
  }
  return null;
}
