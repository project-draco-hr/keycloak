{
  logger.debug("accessRequest <---");
  if (!checkSsl()) {
    throw new NotAcceptableException("HTTPS required");
  }
  audit.event(EventType.CODE_TO_TOKEN);
  if (!realm.isEnabled()) {
    audit.error(Errors.REALM_DISABLED);
    throw new UnauthorizedException("Realm not enabled");
  }
  String code=formData.getFirst(OAuth2Constants.CODE);
  if (code == null) {
    Map<String,String> error=new HashMap<String,String>();
    error.put(OAuth2Constants.ERROR,"invalid_request");
    error.put(OAuth2Constants.ERROR_DESCRIPTION,"code not specified");
    audit.error(Errors.INVALID_CODE);
    throw new BadRequestException("Code not specified",Response.status(Response.Status.BAD_REQUEST).entity(error).type("application/json").build());
  }
  JWSInput input=new JWSInput(code);
  boolean verifiedCode=false;
  try {
    verifiedCode=RSAProvider.verify(input,realm.getPublicKey());
  }
 catch (  Exception ignored) {
    logger.debug("Failed to verify signature",ignored);
  }
  if (!verifiedCode) {
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"Unable to verify code signature");
    audit.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  String key=input.readContentAsString();
  audit.detail(Details.CODE_ID,key);
  AccessCodeEntry accessCode=tokenManager.pullAccessCode(key);
  if (accessCode == null) {
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"Code not found");
    audit.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  audit.user(accessCode.getUser());
  audit.session(accessCode.getSessionState());
  ClientModel client=authorizeClient(authorizationHeader,formData,audit);
  if (accessCode.isExpired()) {
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"Code is expired");
    audit.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  if (!accessCode.getToken().isActive()) {
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"Token expired");
    audit.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  if (!client.getClientId().equals(accessCode.getClient().getClientId())) {
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"Auth error");
    audit.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  UserModel user=realm.getUserById(accessCode.getUser().getId());
  if (user == null) {
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"User not found");
    audit.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  if (!user.isEnabled()) {
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"User disabled");
    audit.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  UserSessionModel session=realm.getUserSession(accessCode.getSessionState());
  if (!AuthenticationManager.isSessionValid(realm,session)) {
    AuthenticationManager.logout(realm,session,uriInfo);
    Map<String,String> res=new HashMap<String,String>();
    res.put(OAuth2Constants.ERROR,"invalid_grant");
    res.put(OAuth2Constants.ERROR_DESCRIPTION,"Session not active");
    audit.error(Errors.INVALID_CODE);
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  logger.debug("accessRequest SUCCESS");
  session.associateClient(client);
  AccessTokenResponse res=tokenManager.responseBuilder(realm,client,audit).accessToken(accessCode.getToken()).generateIDToken().generateRefreshToken().build();
  audit.success();
  return Cors.add(request,Response.ok(res)).auth().allowedOrigins(client).allowedMethods("POST").exposedHeaders(Cors.ACCESS_CONTROL_ALLOW_METHODS).build();
}
