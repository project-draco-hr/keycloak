{
  logger.debug("accessRequest <---");
  if (!checkSsl()) {
    throw new NotAcceptableException("HTTPS required");
  }
  if (!realm.isEnabled()) {
    throw new NotAuthorizedException("Realm not enabled");
  }
  if (authorizationHeader == null) {
    throw new NotAuthorizedException("No Authorization header to authenticate client","Basic realm=\"" + realm.getName() + "\"");
  }
  String[] usernameSecret=BasicAuthHelper.parseHeader(authorizationHeader);
  if (usernameSecret == null) {
    throw new NotAuthorizedException("No Authorization header to authenticate client","Basic realm=\"" + realm.getName() + "\"");
  }
  String client_id=usernameSecret[0];
  String clientSecret=usernameSecret[1];
  UserModel client=realm.getUser(client_id);
  if (client == null) {
    logger.debug("Could not find user");
    Map<String,String> error=new HashMap<String,String>();
    error.put("error","invalid_client");
    error.put("error_description","Could not find user");
    return Response.status(Response.Status.BAD_REQUEST).entity(error).type("application/json").build();
  }
  if (!client.isEnabled()) {
    logger.debug("user is not enabled");
    Map<String,String> error=new HashMap<String,String>();
    error.put("error","invalid_client");
    error.put("error_description","User is not enabled");
    return Response.status(Response.Status.BAD_REQUEST).entity(error).type("application/json").build();
  }
  if (!realm.validateSecret(client,clientSecret)) {
    Map<String,String> error=new HashMap<String,String>();
    error.put("error","unauthorized_client");
    return Response.status(Response.Status.BAD_REQUEST).entity(error).type("application/json").build();
  }
  String code=formData.getFirst("code");
  if (code == null) {
    logger.debug("code not specified");
    Map<String,String> error=new HashMap<String,String>();
    error.put("error","invalid_request");
    error.put("error_description","code not specified");
    return Response.status(Response.Status.BAD_REQUEST).entity(error).type("application/json").build();
  }
  JWSInput input=new JWSInput(code);
  boolean verifiedCode=false;
  try {
    verifiedCode=RSAProvider.verify(input,realm.getPublicKey());
  }
 catch (  Exception ignored) {
    logger.debug("Failed to verify signature",ignored);
  }
  if (!verifiedCode) {
    Map<String,String> res=new HashMap<String,String>();
    res.put("error","invalid_grant");
    res.put("error_description","Unable to verify code signature");
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  String key=input.readContentAsString();
  AccessCodeEntry accessCode=tokenManager.pullAccessCode(key);
  if (accessCode == null) {
    Map<String,String> res=new HashMap<String,String>();
    res.put("error","invalid_grant");
    res.put("error_description","Code not found");
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  if (accessCode.isExpired()) {
    Map<String,String> res=new HashMap<String,String>();
    res.put("error","invalid_grant");
    res.put("error_description","Code is expired");
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  if (!accessCode.getToken().isActive()) {
    Map<String,String> res=new HashMap<String,String>();
    res.put("error","invalid_grant");
    res.put("error_description","Token expired");
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  if (!client.getLoginName().equals(accessCode.getClient().getLoginName())) {
    Map<String,String> res=new HashMap<String,String>();
    res.put("error","invalid_grant");
    res.put("error_description","Auth error");
    return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(res).build();
  }
  logger.debug("accessRequest SUCCESS");
  AccessTokenResponse res=accessTokenResponse(realm.getPrivateKey(),accessCode.getToken());
  return Cors.add(request,Response.ok(res)).allowedOrigins(client).allowedMethods("POST").build();
}
