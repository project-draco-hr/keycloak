{
  if (!checkSsl()) {
    return createError("https_required","HTTPS required",Response.Status.FORBIDDEN);
  }
  if (!realm.isPasswordCredentialGrantAllowed()) {
    return createError("not_enabled","Resource Owner Password Credentials Grant not enabled",Response.Status.FORBIDDEN);
  }
  audit.event(Events.LOGIN).detail(Details.AUTH_METHOD,"oauth_credentials").detail(Details.RESPONSE_TYPE,"token");
  String username=form.getFirst(AuthenticationManager.FORM_USERNAME);
  if (username == null) {
    audit.error(Errors.USERNAME_MISSING);
    throw new UnauthorizedException("No username");
  }
  audit.detail(Details.USERNAME,username);
  UserModel user=realm.getUser(username);
  audit.user(user);
  ClientModel client=authorizeClient(authorizationHeader,form,audit);
  if ((client instanceof ApplicationModel) && ((ApplicationModel)client).isBearerOnly()) {
    audit.error(Errors.NOT_ALLOWED);
    return createError("not_allowed","Bearer-only applications are not allowed to invoke grants/access",Response.Status.FORBIDDEN);
  }
  if (!realm.isEnabled()) {
    audit.error(Errors.REALM_DISABLED);
    return createError("realm_disabled","Realm is disabled",Response.Status.UNAUTHORIZED);
  }
  AuthenticationStatus authenticationStatus=authManager.authenticateForm(clientConnection,realm,form);
  Map<String,String> err;
switch (authenticationStatus) {
case SUCCESS:
    break;
case ACCOUNT_TEMPORARILY_DISABLED:
case ACTIONS_REQUIRED:
  err=new HashMap<String,String>();
err.put(OAuth2Constants.ERROR,"invalid_grant");
err.put(OAuth2Constants.ERROR_DESCRIPTION,"AccountProvider temporarily disabled");
audit.error(Errors.USER_TEMPORARILY_DISABLED);
return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(err).build();
case ACCOUNT_DISABLED:
err=new HashMap<String,String>();
err.put(OAuth2Constants.ERROR,"invalid_grant");
err.put(OAuth2Constants.ERROR_DESCRIPTION,"AccountProvider disabled");
audit.error(Errors.USER_DISABLED);
return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(err).build();
default :
err=new HashMap<String,String>();
err.put(OAuth2Constants.ERROR,"invalid_grant");
err.put(OAuth2Constants.ERROR_DESCRIPTION,"Invalid user credentials");
audit.error(Errors.INVALID_USER_CREDENTIALS);
return Response.status(Response.Status.BAD_REQUEST).type(MediaType.APPLICATION_JSON_TYPE).entity(err).build();
}
String scope=form.getFirst(OAuth2Constants.SCOPE);
UserSessionModel session=realm.createUserSession(user,clientConnection.getRemoteAddr());
session.associateClient(client);
audit.session(session);
AccessTokenResponse res=tokenManager.responseBuilder(realm,client,audit).generateAccessToken(scope,client,user,session).generateRefreshToken().generateIDToken().build();
audit.success();
return Response.ok(res,MediaType.APPLICATION_JSON_TYPE).build();
}
