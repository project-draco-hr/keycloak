{
  String clientId=formData.getFirst("client_id");
  String scopeParam=formData.getFirst("scope");
  String state=formData.getFirst("state");
  String redirect=formData.getFirst("redirect_uri");
  RealmModel realm=adapter.getRealm(realmId);
  if (realm == null) {
    throw new NotFoundException("Realm not found");
  }
  if (!realm.isEnabled()) {
    return Response.ok("Realm not enabled").type("text/html").build();
  }
  User client=realm.getIdm().getUser(clientId);
  if (client == null) {
    throw new NotAuthorizedException("No client");
  }
  if (!client.isEnabled()) {
    return Response.ok("Requester not enabled").type("text/html").build();
  }
  String username=formData.getFirst("username");
  User user=realm.getIdm().getUser(username);
  if (user == null) {
    logger.debug("user not found");
    return loginForm("Not valid user",redirect,clientId,scopeParam,state,realm,client);
  }
  if (!user.isEnabled()) {
    return Response.ok("Your account is not enabled").type("text/html").build();
  }
  boolean authenticated=authManager.authenticateForm(realm,user,formData);
  if (!authenticated)   return loginForm("Unable to authenticate, try again",redirect,clientId,scopeParam,state,realm,client);
  SkeletonKeyToken token=null;
  if (scopeParam != null)   token=tokenManager.createScopedToken(scopeParam,realm,client,user);
 else   token=tokenManager.createLoginToken(realm,client,user);
  AccessCode code=new AccessCode();
  code.setExpiration((System.currentTimeMillis() / 1000) + realm.getAccessCodeLifespan());
  code.setToken(token);
  code.setClient(client);
synchronized (accessCodeMap) {
    accessCodeMap.put(code.getId(),code);
  }
  String accessCode=null;
  try {
    accessCode=new JWSBuilder().content(code.getId().getBytes("UTF-8")).rsa256(realm.getPrivateKey());
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
  UriBuilder redirectUri=UriBuilder.fromUri(redirect).queryParam("code",accessCode);
  if (state != null)   redirectUri.queryParam("state",state);
  return Response.status(302).location(redirectUri.build()).build();
}
