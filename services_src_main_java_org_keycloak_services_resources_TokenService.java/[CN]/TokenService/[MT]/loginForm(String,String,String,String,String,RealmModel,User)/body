{
  StringBuffer html=new StringBuffer();
  if (scopeParam != null) {
    html.append("<h1>Grant Request For ").append(realm.getName()).append(" Realm</h1>");
    if (validationError != null) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
      html.append("<p/><p><b>").append(validationError).append("</b></p>");
    }
    html.append("<p>A Third Party is requesting access to the following resources</p>");
    html.append("<table>");
    SkeletonKeyScope scope=tokenManager.decodeScope(scopeParam);
    Map<String,ResourceModel> resourceMap=realm.getResourceMap();
    for (    String res : scope.keySet()) {
      ResourceModel resource=resourceMap.get(res);
      html.append("<tr><td><b>Resource: </b>").append(resource.getName()).append("</td><td><b>Roles:</b>");
      Set<String> scopeMapping=resource.getScope(client);
      for (      String role : scope.get(res)) {
        html.append(" ").append(role);
        if (!scopeMapping.contains("*") && !scopeMapping.contains(role)) {
          return Response.ok("<h1>Security Alert</h1><p>Known client not authorized for the requested scope.</p>").type("text/html").build();
        }
      }
      html.append("</td></tr>");
    }
    html.append("</table><p>To Authorize, please login below</p>");
  }
 else {
    Set<String> scopeMapping=realm.getScopes(client);
    if (scopeMapping.contains("*")) {
      html.append("<h1>Login For ").append(realm.getName()).append(" Realm</h1>");
      if (validationError != null) {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
        html.append("<p/><p><b>").append(validationError).append("</b></p>");
      }
    }
 else {
      html.append("<h1>Grant Request For ").append(realm.getName()).append(" Realm</h1>");
      if (validationError != null) {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
        html.append("<p/><p><b>").append(validationError).append("</b></p>");
      }
      SkeletonKeyScope scope=new SkeletonKeyScope();
      List<ResourceModel> resources=realm.getResources();
      boolean found=false;
      for (      ResourceModel resource : resources) {
        Set<String> resourceScope=resource.getScope(client);
        if (resourceScope == null)         continue;
        if (resourceScope.size() == 0)         continue;
        if (!found) {
          found=true;
          html.append("<p>A Third Party is requesting access to the following resources</p>");
          html.append("<table>");
        }
        html.append("<tr><td><b>Resource: </b>").append(resource.getName()).append("</td><td><b>Roles:</b>");
        for (        String role : resourceScope) {
          html.append(" ").append(role);
          scope.add(resource.getName(),role);
        }
      }
      if (!found) {
        return Response.ok("<h1>Security Alert</h1><p>Known client not authorized to access this realm.</p>").type("text/html").build();
      }
      html.append("</table>");
      try {
        String json=JsonSerialization.toString(scope,false);
        scopeParam=Base64Url.encode(json.getBytes("UTF-8"));
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
  UriBuilder formActionUri=loginAction(uriInfo);
  String action=formActionUri.build(realm.getId()).toString();
  html.append("<form action=\"").append(action).append("\" method=\"POST\">");
  html.append("Username: <input type=\"text\" name=\"username\" size=\"20\"><br>");
  for (  RequiredCredentialModel credential : realm.getRequiredCredentials()) {
    if (!credential.isInput())     continue;
    html.append(credential.getType()).append(": ");
    if (credential.isSecret()) {
      html.append("<input type=\"password\" name=\"").append(credential.getType()).append("\"  size=\"20\"><br>");
    }
 else {
      html.append("<input type=\"text\" name=\"").append(credential.getType()).append("\"  size=\"20\"><br>");
    }
  }
  html.append("<input type=\"hidden\" name=\"client_id\" value=\"").append(clientId).append("\">");
  if (scopeParam != null) {
    html.append("<input type=\"hidden\" name=\"scope\" value=\"").append(scopeParam).append("\">");
  }
  if (state != null)   html.append("<input type=\"hidden\" name=\"state\" value=\"").append(state).append("\">");
  html.append("<input type=\"hidden\" name=\"redirect_uri\" value=\"").append(redirect).append("\">");
  html.append("<input type=\"submit\" value=\"");
  if (scopeParam == null)   html.append("Login");
 else   html.append("Grant Access");
  html.append("\">");
  html.append("</form>");
  return Response.ok(html.toString()).type("text/html").build();
}
