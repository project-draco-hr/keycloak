{
  event.event(EventType.LOGIN).client(clientId).detail(Details.REDIRECT_URI,redirect).detail(Details.RESPONSE_TYPE,"code");
  OAuthFlows oauth=Flows.oauth(session,realm,request,uriInfo,clientConnection,authManager,tokenManager);
  if (!checkSsl()) {
    return oauth.forwardToSecurityFailure("HTTPS required");
  }
  if (!realm.isEnabled()) {
    event.error(Errors.REALM_DISABLED);
    return oauth.forwardToSecurityFailure("Realm not enabled");
  }
  ClientModel client=realm.findClient(clientId);
  if (client == null) {
    event.error(Errors.CLIENT_NOT_FOUND);
    return oauth.forwardToSecurityFailure("Unknown login requester.");
  }
  if (!client.isEnabled()) {
    event.error(Errors.CLIENT_DISABLED);
    return oauth.forwardToSecurityFailure("Login requester not enabled.");
  }
  if ((client instanceof ApplicationModel) && ((ApplicationModel)client).isBearerOnly()) {
    event.error(Errors.NOT_ALLOWED);
    return oauth.forwardToSecurityFailure("Bearer-only applications are not allowed to initiate browser login");
  }
  if (client.isDirectGrantsOnly()) {
    event.error(Errors.NOT_ALLOWED);
    return oauth.forwardToSecurityFailure("direct-grants-only clients are not allowed to initiate browser login");
  }
  redirect=verifyRedirectUri(uriInfo,redirect,realm,client);
  if (redirect == null) {
    event.error(Errors.INVALID_REDIRECT_URI);
    return oauth.forwardToSecurityFailure("Invalid redirect_uri.");
  }
  AuthenticationManager.AuthResult authResult=authManager.authenticateIdentityCookie(session,realm,uriInfo,clientConnection,headers);
  if (authResult != null) {
    UserModel user=authResult.getUser();
    UserSessionModel session=authResult.getSession();
    event.user(user).session(session).detail(Details.AUTH_METHOD,"sso");
    return oauth.processAccessCode(scopeParam,state,redirect,client,user,session,event);
  }
  if (prompt != null && prompt.equals("none")) {
    return oauth.redirectError(client,"access_denied",state,redirect);
  }
  LoginFormsProvider forms=Flows.forms(session,realm,client,uriInfo);
  String rememberMeUsername=null;
  Cookie rememberMeCookie=headers.getCookies().get(AuthenticationManager.KEYCLOAK_REMEMBER_ME);
  if (rememberMeCookie != null && !"".equals(rememberMeCookie.getValue())) {
    rememberMeUsername=rememberMeCookie.getValue();
  }
  if (loginHint != null || rememberMeUsername != null) {
    MultivaluedMap<String,String> formData=new MultivaluedMapImpl<String,String>();
    if (loginHint != null) {
      formData.add(AuthenticationManager.FORM_USERNAME,loginHint);
    }
 else {
      formData.add(AuthenticationManager.FORM_USERNAME,rememberMeUsername);
      formData.add("rememberMe","on");
    }
    forms.setFormData(formData);
  }
  return forms.createLogin();
}
