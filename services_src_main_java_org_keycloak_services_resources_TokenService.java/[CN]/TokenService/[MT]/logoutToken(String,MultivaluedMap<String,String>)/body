{
  logger.info("--> logoutToken");
  if (!checkSsl()) {
    throw new NotAcceptableException("HTTPS required");
  }
  audit.event(EventType.LOGOUT);
  ClientModel client=authorizeClient(authorizationHeader,form,audit);
  String refreshToken=form.getFirst(OAuth2Constants.REFRESH_TOKEN);
  if (refreshToken == null) {
    Map<String,String> error=new HashMap<String,String>();
    error.put(OAuth2Constants.ERROR,OAuthErrorException.INVALID_REQUEST);
    error.put(OAuth2Constants.ERROR_DESCRIPTION,"No refresh token");
    audit.error(Errors.INVALID_TOKEN);
    logger.error("OAuth Error: no refresh token");
    return Response.status(Response.Status.BAD_REQUEST).entity(error).type("application/json").build();
  }
  try {
    RefreshToken token=tokenManager.verifyRefreshToken(realm,refreshToken);
    UserSessionModel userSessionModel=session.sessions().getUserSession(realm,token.getSessionState());
    if (userSessionModel != null) {
      logout(userSessionModel);
    }
  }
 catch (  OAuthErrorException e) {
    Map<String,String> error=new HashMap<String,String>();
    error.put(OAuth2Constants.ERROR,e.getError());
    if (e.getDescription() != null)     error.put(OAuth2Constants.ERROR_DESCRIPTION,e.getDescription());
    audit.error(Errors.INVALID_TOKEN);
    logger.error("OAuth Error",e);
    return Response.status(Response.Status.BAD_REQUEST).entity(error).type("application/json").build();
  }
  return Cors.add(request,Response.noContent()).auth().allowedOrigins(client).allowedMethods("POST").exposedHeaders(Cors.ACCESS_CONTROL_ALLOW_METHODS).build();
}
