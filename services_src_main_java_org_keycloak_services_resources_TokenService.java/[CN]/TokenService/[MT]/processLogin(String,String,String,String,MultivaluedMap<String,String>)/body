{
  logger.debug("TokenService.processLogin");
  OAuthFlows oauth=Flows.oauth(realm,request,uriInfo,authManager,tokenManager);
  if (!checkSsl()) {
    return oauth.forwardToSecurityFailure("HTTPS required");
  }
  if (!realm.isEnabled()) {
    return oauth.forwardToSecurityFailure("Realm not enabled.");
  }
  ClientModel client=realm.findClient(clientId);
  if (client == null) {
    return oauth.forwardToSecurityFailure("Unknown login requester.");
  }
  if (!client.isEnabled()) {
    return oauth.forwardToSecurityFailure("Login requester not enabled.");
  }
  redirect=verifyRedirectUri(redirect,client);
  if (redirect == null) {
    return oauth.forwardToSecurityFailure("Invalid redirect_uri.");
  }
  if (formData.containsKey("cancel")) {
    return oauth.redirectError(client,"access_denied",state,redirect);
  }
  AuthenticationStatus status=authManager.authenticateForm(clientConnection,realm,formData);
  String rememberMe=formData.getFirst("rememberMe");
  boolean remember=rememberMe != null && rememberMe.equalsIgnoreCase("on");
  logger.debug("*** Remember me: " + remember);
  if (remember) {
    NewCookie cookie=authManager.createRememberMeCookie(realm,uriInfo);
    response.addNewCookie(cookie);
  }
 else {
    authManager.expireRememberMeCookie(realm,uriInfo);
  }
switch (status) {
case SUCCESS:
case ACTIONS_REQUIRED:
    UserModel user=KeycloakModelUtils.findUserByNameOrEmail(realm,formData.getFirst(AuthenticationManager.FORM_USERNAME));
  return oauth.processAccessCode(scopeParam,state,redirect,client,user,remember);
case ACCOUNT_DISABLED:
return Flows.forms(realm,request,uriInfo).setError(Messages.ACCOUNT_DISABLED).setFormData(formData).createLogin();
case MISSING_TOTP:
return Flows.forms(realm,request,uriInfo).setFormData(formData).createLoginTotp();
default :
return Flows.forms(realm,request,uriInfo).setError(Messages.INVALID_USER).setFormData(formData).createLogin();
}
}
