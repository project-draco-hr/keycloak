{
  return new Transaction(){
    protected Response callImpl(){
      String code=formData.getFirst("code");
      JWSInput input=new JWSInput(code,providers);
      boolean verifiedCode=false;
      try {
        verifiedCode=RSAProvider.verify(input,realm.getPublicKey());
      }
 catch (      Exception ignored) {
        logger.debug("Failed to verify signature",ignored);
      }
      if (!verifiedCode) {
        OAuthUtil.securityFailureForward(request,"Illegal access code.");
        session.close();
        return null;
      }
      String key=input.readContent(String.class);
      AccessCodeEntry accessCodeEntry=tokenManager.getAccessCode(key);
      if (accessCodeEntry == null) {
        OAuthUtil.securityFailureForward(request,"Unknown access code.");
        session.close();
        return null;
      }
      String redirect=accessCodeEntry.getRedirectUri();
      String state=accessCodeEntry.getState();
      if (formData.containsKey("cancel")) {
        return redirectAccessDenied(redirect,state);
      }
      return OAuthUtil.redirectAccessCode(realm,authManager,uriInfo,accessCodeEntry,state,redirect);
    }
  }
.call();
}
