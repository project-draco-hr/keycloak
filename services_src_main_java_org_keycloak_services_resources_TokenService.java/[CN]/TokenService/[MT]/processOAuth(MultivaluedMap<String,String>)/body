{
  audit.event(EventType.LOGIN).detail(Details.RESPONSE_TYPE,"code");
  OAuthFlows oauth=Flows.oauth(session,realm,request,uriInfo,authManager,tokenManager);
  if (!checkSsl()) {
    return oauth.forwardToSecurityFailure("HTTPS required");
  }
  String code=formData.getFirst(OAuth2Constants.CODE);
  AccessCodeEntry accessCodeEntry=tokenManager.parseCode(code,session,realm);
  if (accessCodeEntry == null || !AccessCode.Action.OAUTH_GRANT.equals(accessCodeEntry.getAction())) {
    audit.error(Errors.INVALID_CODE);
    return oauth.forwardToSecurityFailure("Unknown access code.");
  }
  audit.detail(Details.CODE_ID,accessCodeEntry.getCodeId());
  String redirect=accessCodeEntry.getRedirectUri();
  String state=accessCodeEntry.getState();
  audit.client(accessCodeEntry.getClient()).user(accessCodeEntry.getUser()).detail(Details.RESPONSE_TYPE,"code").detail(Details.REDIRECT_URI,redirect);
  UserSessionModel userSession=session.sessions().getUserSession(realm,accessCodeEntry.getSessionState());
  if (userSession != null) {
    audit.detail(Details.AUTH_METHOD,userSession.getAuthMethod());
    audit.detail(Details.USERNAME,userSession.getLoginUsername());
    if (userSession.isRememberMe()) {
      audit.detail(Details.REMEMBER_ME,"true");
    }
  }
  if (!AuthenticationManager.isSessionValid(realm,userSession)) {
    AuthenticationManager.logout(session,realm,userSession,uriInfo);
    audit.error(Errors.INVALID_CODE);
    return oauth.forwardToSecurityFailure("Session not active");
  }
  audit.session(userSession);
  if (formData.containsKey("cancel")) {
    audit.error(Errors.REJECTED_BY_USER);
    return redirectAccessDenied(redirect,state);
  }
  audit.success();
  accessCodeEntry.setAction(null);
  return oauth.redirectAccessCode(accessCodeEntry,userSession,state,redirect);
}
