{
  String username=formData.getFirst("username");
  String email=formData.getFirst("email");
  audit.event(Events.REGISTER).client(clientId).detail(Details.REDIRECT_URI,redirect).detail(Details.RESPONSE_TYPE,"code").detail(Details.USERNAME,username).detail(Details.EMAIL,email).detail(Details.REGISTER_METHOD,"form");
  OAuthFlows oauth=Flows.oauth(realm,request,uriInfo,authManager,tokenManager);
  if (!realm.isEnabled()) {
    logger.warn("Realm not enabled");
    audit.error(Errors.REALM_DISABLED);
    return oauth.forwardToSecurityFailure("Realm not enabled");
  }
  ClientModel client=realm.findClient(clientId);
  if (client == null) {
    logger.warn("Unknown login requester.");
    audit.error(Errors.CLIENT_NOT_FOUND);
    return oauth.forwardToSecurityFailure("Unknown login requester.");
  }
  if (!client.isEnabled()) {
    logger.warn("Login requester not enabled.");
    audit.error(Errors.CLIENT_DISABLED);
    return oauth.forwardToSecurityFailure("Login requester not enabled.");
  }
  redirect=verifyRedirectUri(redirect,client);
  if (redirect == null) {
    audit.error(Errors.INVALID_REDIRECT_URI);
    return oauth.forwardToSecurityFailure("Invalid redirect_uri.");
  }
  if (!realm.isRegistrationAllowed()) {
    logger.warn("Registration not allowed");
    audit.error(Errors.REGISTRATION_DISABLED);
    return oauth.forwardToSecurityFailure("Registration not allowed");
  }
  List<String> requiredCredentialTypes=new LinkedList<String>();
  for (  RequiredCredentialModel m : realm.getRequiredCredentials()) {
    requiredCredentialTypes.add(m.getType());
  }
  String error=Validation.validateRegistrationForm(formData,requiredCredentialTypes);
  if (error == null) {
    error=Validation.validatePassword(formData,realm.getPasswordPolicy());
  }
  if (error != null) {
    audit.error(Errors.INVALID_REGISTRATION);
    return Flows.forms(realm,request,uriInfo).setError(error).setFormData(formData).createRegistration();
  }
  AuthenticationProviderManager authenticationProviderManager=AuthenticationProviderManager.getManager(realm);
  if (realm.getUser(username) != null || authenticationProviderManager.getUser(username) != null) {
    audit.error(Errors.USERNAME_IN_USE);
    return Flows.forms(realm,request,uriInfo).setError(Messages.USERNAME_EXISTS).setFormData(formData).createRegistration();
  }
  UserModel user=realm.addUser(username);
  user.setEnabled(true);
  user.setFirstName(formData.getFirst("firstName"));
  user.setLastName(formData.getFirst("lastName"));
  user.setEmail(email);
  if (requiredCredentialTypes.contains(CredentialRepresentation.PASSWORD)) {
    UserCredentialModel credentials=new UserCredentialModel();
    credentials.setType(CredentialRepresentation.PASSWORD);
    credentials.setValue(formData.getFirst("password"));
    boolean passwordUpdateSuccessful;
    String passwordUpdateError=null;
    try {
      passwordUpdateSuccessful=AuthenticationProviderManager.getManager(realm).updatePassword(user,formData.getFirst("password"));
      passwordUpdateError="Password update failed";
    }
 catch (    AuthenticationProviderException ape) {
      passwordUpdateSuccessful=false;
      passwordUpdateError=ape.getMessage();
    }
    if (!passwordUpdateSuccessful) {
      user.addRequiredAction(UserModel.RequiredAction.UPDATE_PASSWORD);
      return Flows.forms(realm,request,uriInfo).setError(passwordUpdateError).createResponse(UserModel.RequiredAction.UPDATE_PASSWORD);
    }
  }
  audit.user(user).success();
  audit.reset();
  return processLogin(clientId,scopeParam,state,redirect,formData);
}
