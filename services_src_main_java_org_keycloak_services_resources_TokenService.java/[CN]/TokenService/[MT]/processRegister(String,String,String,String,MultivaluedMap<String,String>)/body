{
  return new Transaction<Response>(){
    @Override protected Response callImpl(){
      OAuthFlows oauth=Flows.oauth(realm,request,uriInfo,authManager,tokenManager);
      if (!realm.isEnabled()) {
        return oauth.forwardToSecurityFailure("Realm not enabled");
      }
      UserModel client=realm.getUser(clientId);
      if (client == null) {
        return oauth.forwardToSecurityFailure("Unknown login requester.");
      }
      if (!client.isEnabled()) {
        return oauth.forwardToSecurityFailure("Login requester not enabled.");
      }
      if (!realm.isRegistrationAllowed()) {
        return oauth.forwardToSecurityFailure("Registration not allowed");
      }
      String error=validateRegistrationForm(formData);
      if (error != null) {
        return Flows.forms(realm,request).setError(error).setFormData(formData).forwardToRegistration();
      }
      String username=formData.getFirst("username");
      UserModel user=realm.getUser(username);
      if (user != null) {
        return Flows.forms(realm,request).setError(Messages.USERNAME_EXISTS).setFormData(formData).forwardToRegistration();
      }
      user=realm.addUser(username);
      String fullname=formData.getFirst("name");
      if (fullname != null) {
        StringTokenizer tokenizer=new StringTokenizer(fullname," ");
        StringBuffer first=null;
        String last="";
        while (tokenizer.hasMoreTokens()) {
          String token=tokenizer.nextToken();
          if (tokenizer.hasMoreTokens()) {
            if (first == null) {
              first=new StringBuffer();
            }
 else {
              first.append(" ");
            }
            first.append(token);
          }
 else {
            last=token;
          }
        }
        if (first == null)         first=new StringBuffer();
        user.setFirstName(first.toString());
        user.setLastName(last);
      }
      user.setEmail(formData.getFirst("email"));
      UserCredentialModel credentials=new UserCredentialModel();
      credentials.setType(CredentialRepresentation.PASSWORD);
      credentials.setValue(formData.getFirst("password"));
      realm.updateCredential(user,credentials);
      RoleModel defaultRole=realm.getRole("user");
      realm.grantRole(user,defaultRole);
      return processLogin(clientId,scopeParam,state,redirect,formData);
    }
  }
.call();
}
