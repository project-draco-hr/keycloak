{
  OAuthFlows oauth=Flows.oauth(realm,request,uriInfo,authManager,tokenManager);
  if (!realm.isEnabled()) {
    logger.warn("Realm not enabled");
    return oauth.forwardToSecurityFailure("Realm not enabled");
  }
  UserModel client=realm.getUser(clientId);
  if (client == null) {
    logger.warn("Unknown login requester.");
    return oauth.forwardToSecurityFailure("Unknown login requester.");
  }
  if (!client.isEnabled()) {
    logger.warn("Login requester not enabled.");
    return oauth.forwardToSecurityFailure("Login requester not enabled.");
  }
  if (!realm.isRegistrationAllowed()) {
    logger.warn("Registration not allowed");
    return oauth.forwardToSecurityFailure("Registration not allowed");
  }
  List<String> requiredCredentialTypes=new LinkedList<String>();
  for (  RequiredCredentialModel m : realm.getRequiredCredentials()) {
    requiredCredentialTypes.add(m.getType());
  }
  String error=Validation.validateRegistrationForm(formData,requiredCredentialTypes);
  if (error != null) {
    return Flows.forms(realm,request,uriInfo).setError(error).setFormData(formData).setSocialRegistration(isSocialRegistration).forwardToRegistration();
  }
  String username=formData.getFirst("username");
  UserModel user=realm.getUser(username);
  if (user != null) {
    return Flows.forms(realm,request,uriInfo).setError(Messages.USERNAME_EXISTS).setFormData(formData).setSocialRegistration(isSocialRegistration).forwardToRegistration();
  }
  user=realm.addUser(username);
  user.setEnabled(true);
  user.setFirstName(formData.getFirst("firstName"));
  user.setLastName(formData.getFirst("lastName"));
  user.setEmail(formData.getFirst("email"));
  if (requiredCredentialTypes.contains(CredentialRepresentation.PASSWORD)) {
    UserCredentialModel credentials=new UserCredentialModel();
    credentials.setType(CredentialRepresentation.PASSWORD);
    credentials.setValue(formData.getFirst("password"));
    realm.updateCredential(user,credentials);
  }
  for (  RoleModel role : realm.getDefaultRoles()) {
    realm.grantRole(user,role);
  }
  return null;
}
