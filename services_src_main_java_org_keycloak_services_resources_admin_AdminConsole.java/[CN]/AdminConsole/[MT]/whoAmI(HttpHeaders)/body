{
  RealmManager realmManager=new RealmManager(session);
  AuthenticationManager.AuthResult authResult=authManager.authenticateBearerToken(realm,uriInfo,headers);
  if (authResult == null) {
    return Response.status(401).build();
  }
  UserModel user=authResult.getUser();
  String displayName;
  if ((user.getFirstName() != null && !user.getFirstName().trim().equals("")) || (user.getLastName() != null && !user.getLastName().trim().equals(""))) {
    displayName=user.getFirstName();
    if (user.getLastName() != null) {
      displayName=displayName != null ? displayName + " " + user.getLastName() : user.getLastName();
    }
  }
 else {
    displayName=user.getUsername();
  }
  RealmModel masterRealm=getAdminstrationRealm(realmManager);
  Map<String,Set<String>> realmAccess=new HashMap<String,Set<String>>();
  if (masterRealm == null)   throw new NotFoundException("No realm found");
  boolean createRealm=false;
  if (realm.equals(masterRealm)) {
    logger.info("setting up realm access for a master realm user");
    createRealm=user.hasRole(masterRealm.getRole(AdminRoles.CREATE_REALM));
    addMasterRealmAccess(realm,user,realmAccess);
  }
 else {
    logger.info("setting up realm access for a realm user");
    addRealmAccess(realm,user,realmAccess);
  }
  if (realmAccess.size() == 0) {
    return Response.status(401).build();
  }
  return Response.ok(new WhoAmI(user.getId(),realm.getName(),displayName,createRealm,realmAccess)).build();
}
