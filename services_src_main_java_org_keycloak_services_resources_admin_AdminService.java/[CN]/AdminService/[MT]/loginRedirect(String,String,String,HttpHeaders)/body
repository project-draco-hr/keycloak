{
  try {
    logger.info("loginRedirect ********************** <---");
    if (error != null) {
      logger.debug("error from oauth");
      return redirectOnLoginError(error);
    }
    RealmManager realmManager=new RealmManager(session);
    RealmModel realm=getAdminstrationRealm(realmManager);
    if (!realm.isEnabled()) {
      logger.debug("realm not enabled");
      return redirectOnLoginError("realm not enabled");
    }
    ApplicationModel adminConsole=realm.getApplicationNameMap().get(Constants.ADMIN_CONSOLE_APPLICATION);
    UserModel adminConsoleUser=adminConsole.getApplicationUser();
    if (!adminConsole.isEnabled() || !adminConsoleUser.isEnabled()) {
      logger.debug("admin app not enabled");
      return redirectOnLoginError("admin app not enabled");
    }
    if (code == null) {
      logger.debug("code not specified");
      return redirectOnLoginError("invalid login data");
    }
    if (state == null) {
      logger.debug("state not specified");
      return redirectOnLoginError("invalid login data");
    }
    String path=new JaxrsOAuthClient().checkStateCookie(uriInfo,headers);
    JWSInput input=new JWSInput(code);
    boolean verifiedCode=false;
    try {
      verifiedCode=RSAProvider.verify(input,realm.getPublicKey());
    }
 catch (    Exception ignored) {
      logger.debug("Failed to verify signature",ignored);
    }
    if (!verifiedCode) {
      logger.debug("unverified access code");
      return redirectOnLoginError("invalid login data");
    }
    String key=input.readContentAsString();
    AccessCodeEntry accessCode=tokenManager.pullAccessCode(key);
    if (accessCode == null) {
      logger.debug("bad access code");
      return redirectOnLoginError("invalid login data");
    }
    if (accessCode.isExpired()) {
      logger.debug("access code expired");
      return redirectOnLoginError("invalid login data");
    }
    if (!accessCode.getToken().isActive()) {
      logger.debug("access token expired");
      return redirectOnLoginError("invalid login data");
    }
    if (!accessCode.getRealm().getId().equals(realm.getId())) {
      logger.debug("bad realm");
      return redirectOnLoginError("invalid login data");
    }
    if (!adminConsoleUser.getLoginName().equals(accessCode.getClient().getLoginName())) {
      logger.debug("bad client");
      return redirectOnLoginError("invalid login data");
    }
    RoleModel adminConsoleAdminRole=adminConsole.getRole(Constants.ADMIN_CONSOLE_ADMIN_ROLE);
    if (!realm.hasRole(accessCode.getUser(),adminConsoleAdminRole)) {
      logger.debug("not allowed");
      return redirectOnLoginError("No permission to access console");
    }
    logger.debug("loginRedirect SUCCESS");
    NewCookie cookie=authManager.createSaasIdentityCookie(realm,accessCode.getUser(),uriInfo);
    URI redirectUri=contextRoot(uriInfo).path(adminPath).build();
    if (path != null) {
      redirectUri=redirectUri.resolve("#" + UriBuilder.fromPath(path).build().toString());
    }
    return Response.status(302).cookie(cookie).location(redirectUri).build();
  }
  finally {
    authManager.expireCookie(AbstractOAuthClient.OAUTH_TOKEN_REQUEST_STATE,uriInfo.getAbsolutePath().getPath());
  }
}
