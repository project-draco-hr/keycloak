{
  auth.requireView();
  if (config.getFormat() != null && !config.getFormat().equals("JKS") && !config.getFormat().equals("PKCS12")) {
    throw new NotAcceptableException("Only support jks format.");
  }
  String format=config.getFormat();
  String privatePem=client.getAttribute(privateAttribute);
  String certPem=client.getAttribute(certificateAttribute);
  if (privatePem == null && certPem == null) {
    throw new NotFoundException("keypair not generated for client");
  }
  if (privatePem != null && config.getKeyPassword() == null) {
    throw new BadRequestException("Need to specify a key password for jks download");
  }
  if (config.getStorePassword() == null) {
    throw new BadRequestException("Need to specify a store password for jks download");
  }
  final KeyStore keyStore;
  try {
    if (format.equals("JKS"))     keyStore=KeyStore.getInstance("JKS");
 else     keyStore=KeyStore.getInstance(format,"BC");
    keyStore.load(null,null);
    String keyAlias=config.getKeyAlias();
    if (keyAlias == null)     keyAlias=client.getClientId();
    if (privatePem != null) {
      PrivateKey privateKey=PemUtils.decodePrivateKey(privatePem);
      X509Certificate clientCert=PemUtils.decodeCertificate(certPem);
      Certificate[] chain={clientCert};
      keyStore.setKeyEntry(keyAlias,privateKey,config.getKeyPassword().trim().toCharArray(),chain);
    }
 else {
      X509Certificate clientCert=PemUtils.decodeCertificate(certPem);
      keyStore.setCertificateEntry(keyAlias,clientCert);
    }
    if (config.isRealmCertificate() == null || config.isRealmCertificate().booleanValue()) {
      X509Certificate certificate=realm.getCertificate();
      if (certificate == null) {
        KeycloakModelUtils.generateRealmCertificate(realm);
        certificate=realm.getCertificate();
      }
      String certificateAlias=config.getRealmAlias();
      if (certificateAlias == null)       certificateAlias=realm.getName();
      keyStore.setCertificateEntry(certificateAlias,certificate);
    }
    ByteArrayOutputStream stream=new ByteArrayOutputStream();
    keyStore.store(stream,config.getStorePassword().trim().toCharArray());
    stream.flush();
    stream.close();
    byte[] rtn=stream.toByteArray();
    adminEvent.operation(OperationType.ACTION).resourcePath(client,session.getContext().getUri().getPath()).success();
    return rtn;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
