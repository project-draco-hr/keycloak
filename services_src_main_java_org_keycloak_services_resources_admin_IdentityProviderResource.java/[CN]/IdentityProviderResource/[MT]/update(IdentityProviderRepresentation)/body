{
  try {
    this.auth.requireManage();
    String internalId=providerRep.getInternalId();
    String newProviderId=providerRep.getAlias();
    String oldProviderId=getProviderIdByInternalId(this.realm,internalId);
    this.realm.updateIdentityProvider(RepresentationToModel.toModel(providerRep));
    if (oldProviderId != null && !oldProviderId.equals(newProviderId)) {
      logger.debug("Changing providerId in all clients and linked users. oldProviderId=" + oldProviderId + ", newProviderId="+ newProviderId);
      updateUsersAfterProviderAliasChange(this.session.users().getUsers(this.realm),oldProviderId,newProviderId);
    }
    adminEvent.operation(OperationType.UPDATE).resourcePath(providerRep).representation(providerRep).success();
    return Response.noContent().build();
  }
 catch (  ModelDuplicateException e) {
    return ErrorResponse.exists("Identity Provider " + providerRep.getAlias() + " already exists");
  }
}
