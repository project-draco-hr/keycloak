{
  auth.requireView();
  MappingsRepresentation all=new MappingsRepresentation();
  Set<RoleModel> realmMappings=client.getRealmScopeMappings();
  if (realmMappings.size() > 0) {
    List<RoleRepresentation> realmRep=new ArrayList<RoleRepresentation>();
    for (    RoleModel roleModel : realmMappings) {
      realmRep.add(ModelToRepresentation.toRepresentation(roleModel));
    }
    all.setRealmMappings(realmRep);
  }
  List<ClientModel> applications=realm.getClients();
  if (applications.size() > 0) {
    Map<String,ApplicationMappingsRepresentation> appMappings=new HashMap<String,ApplicationMappingsRepresentation>();
    for (    ClientModel app : applications) {
      Set<RoleModel> roleMappings=app.getApplicationScopeMappings(client);
      if (roleMappings.size() > 0) {
        ApplicationMappingsRepresentation mappings=new ApplicationMappingsRepresentation();
        mappings.setApplicationId(app.getId());
        mappings.setApplication(app.getClientId());
        List<RoleRepresentation> roles=new ArrayList<RoleRepresentation>();
        mappings.setMappings(roles);
        for (        RoleModel role : roleMappings) {
          roles.add(ModelToRepresentation.toRepresentation(role));
        }
        appMappings.put(app.getClientId(),mappings);
        all.setApplicationMappings(appMappings);
      }
    }
  }
  return all;
}
