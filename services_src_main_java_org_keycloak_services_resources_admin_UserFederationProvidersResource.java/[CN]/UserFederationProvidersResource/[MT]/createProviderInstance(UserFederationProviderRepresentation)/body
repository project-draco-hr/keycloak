{
  auth.requireManage();
  try {
    String displayName=rep.getDisplayName();
    if (displayName != null && displayName.trim().equals("")) {
      displayName=null;
    }
    UserFederationProviderModel tempModel=new UserFederationProviderModel(null,rep.getProviderName(),rep.getConfig(),rep.getPriority(),displayName,rep.getFullSyncPeriod(),rep.getChangedSyncPeriod(),rep.getLastSync());
    validateFederationProviderConfig(session,auth,realm,tempModel);
    UserFederationProviderModel model=realm.addUserFederationProvider(rep.getProviderName(),rep.getConfig(),rep.getPriority(),displayName,rep.getFullSyncPeriod(),rep.getChangedSyncPeriod(),rep.getLastSync());
    new UsersSyncManager().notifyToRefreshPeriodicSync(session,realm,model,false);
    boolean kerberosCredsAdded=checkKerberosCredential(session,realm,model);
    if (kerberosCredsAdded) {
      ServicesLogger.LOGGER.addedKerberosToRealmCredentials();
    }
    rep.setId(model.getId());
    adminEvent.operation(OperationType.CREATE).resourcePath(uriInfo,model.getId()).representation(rep).success();
    return Response.created(uriInfo.getAbsolutePathBuilder().path(model.getId()).build()).build();
  }
 catch (  ModelDuplicateException e) {
    if (session.getTransactionManager().isActive()) {
      session.getTransactionManager().setRollbackOnly();
    }
    return ErrorResponse.exists("Federation provider exists with same name.");
  }
catch (  ModelException me) {
    if (session.getTransactionManager().isActive()) {
      session.getTransactionManager().setRollbackOnly();
    }
    return ErrorResponse.error("Could not create federation provider.",Response.Status.INTERNAL_SERVER_ERROR);
  }
}
