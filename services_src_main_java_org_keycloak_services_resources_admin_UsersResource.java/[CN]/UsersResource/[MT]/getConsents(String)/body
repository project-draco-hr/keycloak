{
  auth.requireView();
  UserModel user=session.users().getUserById(id,realm);
  if (user == null) {
    throw new NotFoundException("User not found");
  }
  List<Map<String,Object>> result=new LinkedList<>();
  Set<ClientModel> offlineClients=new UserSessionManager(session).findClientsWithOfflineToken(realm,user);
  for (  ClientModel client : realm.getClients()) {
    UserConsentModel consent=session.users().getConsentByClient(realm,user,client.getId());
    boolean hasOfflineToken=offlineClients.contains(client);
    if (consent == null && !hasOfflineToken) {
      continue;
    }
    UserConsentRepresentation rep=(consent == null) ? null : ModelToRepresentation.toRepresentation(consent);
    Map<String,Object> currentRep=new HashMap<>();
    currentRep.put("clientId",client.getClientId());
    currentRep.put("grantedProtocolMappers",(rep == null ? Collections.emptyMap() : rep.getGrantedProtocolMappers()));
    currentRep.put("grantedRealmRoles",(rep == null ? Collections.emptyList() : rep.getGrantedRealmRoles()));
    currentRep.put("grantedClientRoles",(rep == null ? Collections.emptyMap() : rep.getGrantedClientRoles()));
    currentRep.put("createdDate",(rep == null ? null : rep.getCreatedDate()));
    currentRep.put("lastUpdatedDate",(rep == null ? null : rep.getLastUpdatedDate()));
    List<Map<String,String>> additionalGrants=new LinkedList<>();
    if (hasOfflineToken) {
      Map<String,String> offlineTokens=new HashMap<>();
      offlineTokens.put("client",client.getId());
      offlineTokens.put("key","Offline Token");
      additionalGrants.add(offlineTokens);
    }
    currentRep.put("additionalGrants",additionalGrants);
    result.add(currentRep);
  }
  return result;
}
