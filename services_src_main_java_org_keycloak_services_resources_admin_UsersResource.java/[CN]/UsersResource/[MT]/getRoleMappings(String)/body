{
  auth.requireView();
  UserModel user=session.users().getUserByUsername(username,realm);
  if (user == null) {
    throw new NotFoundException("User not found");
  }
  MappingsRepresentation all=new MappingsRepresentation();
  Set<RoleModel> realmMappings=user.getRoleMappings();
  RealmManager manager=new RealmManager(session);
  if (realmMappings.size() > 0) {
    List<RoleRepresentation> realmRep=new ArrayList<RoleRepresentation>();
    for (    RoleModel roleModel : realmMappings) {
      realmRep.add(ModelToRepresentation.toRepresentation(roleModel));
    }
    all.setRealmMappings(realmRep);
  }
  List<ApplicationModel> applications=realm.getApplications();
  if (applications.size() > 0) {
    Map<String,ApplicationMappingsRepresentation> appMappings=new HashMap<String,ApplicationMappingsRepresentation>();
    for (    ApplicationModel application : applications) {
      Set<RoleModel> roleMappings=user.getApplicationRoleMappings(application);
      if (roleMappings.size() > 0) {
        ApplicationMappingsRepresentation mappings=new ApplicationMappingsRepresentation();
        mappings.setApplicationId(application.getId());
        mappings.setApplication(application.getName());
        List<RoleRepresentation> roles=new ArrayList<RoleRepresentation>();
        mappings.setMappings(roles);
        for (        RoleModel role : roleMappings) {
          roles.add(ModelToRepresentation.toRepresentation(role));
        }
        appMappings.put(application.getName(),mappings);
        all.setApplicationMappings(appMappings);
      }
    }
  }
  return all;
}
