{
  auth.requireManage();
  UserModel user=session.users().getUserByUsername(username,realm);
  if (user == null) {
    throw new NotFoundException("User not found");
  }
  if (user.getEmail() == null) {
    return Flows.errors().error("User email missing",Response.Status.BAD_REQUEST);
  }
  String redirect=Urls.accountBase(uriInfo.getBaseUri()).path("/").build(realm.getName()).toString();
  String clientId=Constants.ACCOUNT_MANAGEMENT_APP;
  String state=null;
  String scope=null;
  ClientModel client=realm.findClient(clientId);
  if (client == null || !client.isEnabled()) {
    return Flows.errors().error("AccountProvider management not enabled",Response.Status.INTERNAL_SERVER_ERROR);
  }
  AccessCodeEntry accessCode=tokenManager.createAccessCode(scope,state,redirect,session,realm,client,user,null);
  accessCode.setRequiredAction(UserModel.RequiredAction.UPDATE_PASSWORD);
  try {
    UriBuilder builder=Urls.loginPasswordResetBuilder(uriInfo.getBaseUri());
    builder.queryParam("key",accessCode.getCode());
    String link=builder.build(realm.getName()).toString();
    long expiration=TimeUnit.SECONDS.toMinutes(realm.getAccessCodeLifespanUserAction());
    session.getProvider(EmailProvider.class).setRealm(realm).setUser(user).sendPasswordReset(link,expiration);
    return Response.ok().build();
  }
 catch (  EmailException e) {
    logger.error("Failed to send password reset email",e);
    return Flows.errors().error("Failed to send email",Response.Status.INTERNAL_SERVER_ERROR);
  }
}
