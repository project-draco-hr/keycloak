{
  auth.requireManage();
  UserModel user=session.users().getUserByUsername(username,realm);
  if (user == null) {
    return ErrorResponse.error("User not found",Response.Status.NOT_FOUND);
  }
  if (!user.isEnabled()) {
    return ErrorResponse.error("User is disabled",Response.Status.BAD_REQUEST);
  }
  if (user.getEmail() == null) {
    return ErrorResponse.error("User email missing",Response.Status.BAD_REQUEST);
  }
  if (redirectUri != null && clientId == null) {
    return ErrorResponse.error("Client id missing",Response.Status.BAD_REQUEST);
  }
  if (clientId == null) {
    clientId=Constants.ACCOUNT_MANAGEMENT_CLIENT_ID;
  }
  ClientModel client=realm.getClientByClientId(clientId);
  if (client == null || !client.isEnabled()) {
    return ErrorResponse.error(clientId + " not enabled",Response.Status.INTERNAL_SERVER_ERROR);
  }
  String redirect;
  if (redirectUri != null) {
    redirect=RedirectUtils.verifyRedirectUri(uriInfo,redirectUri,realm,client);
    if (redirect == null) {
      return ErrorResponse.error("Invalid redirect uri.",Response.Status.BAD_REQUEST);
    }
  }
 else {
    redirect=Urls.accountBase(uriInfo.getBaseUri()).path("/").build(realm.getName()).toString();
  }
  UserSessionModel userSession=session.sessions().createUserSession(realm,user,username,clientConnection.getRemoteAddr(),"form",false,null,null);
  ClientSessionModel clientSession=session.sessions().createClientSession(realm,client);
  clientSession.setAuthMethod(OIDCLoginProtocol.LOGIN_PROTOCOL);
  clientSession.setRedirectUri(redirect);
  clientSession.setUserSession(userSession);
  ClientSessionCode accessCode=new ClientSessionCode(realm,clientSession);
  accessCode.setAction(ClientSessionModel.Action.RECOVER_PASSWORD);
  try {
    UriBuilder builder=Urls.loginPasswordResetBuilder(uriInfo.getBaseUri());
    builder.queryParam("key",accessCode.getCode());
    String link=builder.build(realm.getName()).toString();
    long expiration=TimeUnit.SECONDS.toMinutes(realm.getAccessCodeLifespanUserAction());
    this.session.getProvider(EmailProvider.class).setRealm(realm).setUser(user).sendPasswordReset(link,expiration);
    adminEvent.operation(OperationType.ACTION).resourcePath(uriInfo).success();
    return Response.ok().build();
  }
 catch (  EmailException e) {
    logger.error("Failed to send password reset email",e);
    return ErrorResponse.error("Failed to send email",Response.Status.INTERNAL_SERVER_ERROR);
  }
}
