{
  info.setProtocolMapperTypes(new HashMap<String,List<ProtocolMapperTypeRepresentation>>());
  for (  ProviderFactory p : session.getKeycloakSessionFactory().getProviderFactories(ProtocolMapper.class)) {
    ProtocolMapper mapper=(ProtocolMapper)p;
    List<ProtocolMapperTypeRepresentation> types=info.getProtocolMapperTypes().get(mapper.getProtocol());
    if (types == null) {
      types=new LinkedList<ProtocolMapperTypeRepresentation>();
      info.getProtocolMapperTypes().put(mapper.getProtocol(),types);
    }
    ProtocolMapperTypeRepresentation rep=new ProtocolMapperTypeRepresentation();
    rep.setId(mapper.getId());
    rep.setName(mapper.getDisplayType());
    rep.setHelpText(mapper.getHelpText());
    rep.setCategory(mapper.getDisplayCategory());
    rep.setProperties(new LinkedList<ConfigPropertyRepresentation>());
    List<ProviderConfigProperty> configProperties=mapper.getConfigProperties();
    for (    ProviderConfigProperty prop : configProperties) {
      ConfigPropertyRepresentation propRep=new ConfigPropertyRepresentation();
      propRep.setName(prop.getName());
      propRep.setLabel(prop.getLabel());
      propRep.setType(prop.getType());
      propRep.setDefaultValue(prop.getDefaultValue());
      propRep.setHelpText(prop.getHelpText());
      rep.getProperties().add(propRep);
    }
    types.add(rep);
  }
}
