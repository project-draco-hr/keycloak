{
  isTotpConfigurationRequired(user);
  isEmailVerificationRequired(user);
  boolean isResource=client instanceof ApplicationModel;
  AccessCodeEntry accessCode=tokenManager.createAccessCode(scopeParam,state,redirect,this.session,realm,client,user,session);
  log.debugv("processAccessCode: isResource: {0}",isResource);
  log.debugv("processAccessCode: go to oauth page?: {0}",!isResource);
  audit.detail(Details.CODE_ID,accessCode.getCodeId());
  Set<RequiredAction> requiredActions=user.getRequiredActions();
  if (!requiredActions.isEmpty()) {
    RequiredAction action=user.getRequiredActions().iterator().next();
    accessCode.setRequiredAction(action);
    if (action.equals(RequiredAction.VERIFY_EMAIL)) {
      audit.clone().event(EventType.SEND_VERIFY_EMAIL).detail(Details.EMAIL,accessCode.getUser().getEmail()).success();
    }
    return Flows.forms(this.session,realm,uriInfo).setAccessCode(accessCode.getCode()).setUser(user).createResponse(action);
  }
  if (!isResource) {
    accessCode.setAction(AccessCode.Action.OAUTH_GRANT);
    List<RoleModel> realmRoles=new LinkedList<RoleModel>();
    MultivaluedMap<String,RoleModel> resourceRoles=new MultivaluedMapImpl<String,RoleModel>();
    for (    RoleModel r : accessCode.getRequestedRoles()) {
      if (r.getContainer() instanceof RealmModel) {
        realmRoles.add(r);
      }
 else {
        resourceRoles.add(((ApplicationModel)r.getContainer()).getName(),r);
      }
    }
    return Flows.forms(this.session,realm,uriInfo).setAccessCode(accessCode.getCode()).setAccessRequest(realmRoles,resourceRoles).setClient(client).createOAuthGrant();
  }
  if (redirect != null) {
    audit.success();
    return redirectAccessCode(accessCode,session,state,redirect);
  }
 else {
    return null;
  }
}
