{
  isTotpConfigurationRequired(user);
  isEmailVerificationRequired(user);
  boolean isResource=client instanceof ApplicationModel;
  AccessCodeEntry accessCode=tokenManager.createAccessCode(scopeParam,state,redirect,realm,client,user,session);
  accessCode.setRememberMe(rememberMe);
  accessCode.setAuthMethod(authMethod);
  accessCode.setUsernameUsed(username);
  log.debugv("processAccessCode: isResource: {0}",isResource);
  log.debugv("processAccessCode: go to oauth page?: {0}",!isResource);
  audit.detail(Details.CODE_ID,accessCode.getCodeId());
  Set<RequiredAction> requiredActions=user.getRequiredActions();
  if (!requiredActions.isEmpty()) {
    accessCode.setRequiredActions(new HashSet<UserModel.RequiredAction>(requiredActions));
    accessCode.resetExpiration();
    RequiredAction action=user.getRequiredActions().iterator().next();
    if (action.equals(RequiredAction.VERIFY_EMAIL)) {
      audit.clone().event(EventType.SEND_VERIFY_EMAIL).detail(Details.EMAIL,accessCode.getUser().getEmail()).success();
    }
    return Flows.forms(this.session,realm,uriInfo).setAccessCode(accessCode.getCode()).setUser(user).createResponse(action);
  }
  if (!isResource) {
    accessCode.resetExpiration();
    List<RoleModel> realmRolesRequested=new LinkedList<RoleModel>();
    MultivaluedMap<String,RoleModel> appRolesRequested=new MultivaluedMapImpl<String,RoleModel>();
    if (accessCode.getToken().getRealmAccess() != null) {
      if (accessCode.getToken().getRealmAccess().getRoles() != null) {
        for (        String role : accessCode.getToken().getRealmAccess().getRoles()) {
          RoleModel roleModel=realm.getRole(role);
          if (roleModel != null)           realmRolesRequested.add(roleModel);
        }
      }
    }
    if (accessCode.getToken().getResourceAccess().size() > 0) {
      for (      Map.Entry<String,AccessToken.Access> entry : accessCode.getToken().getResourceAccess().entrySet()) {
        ApplicationModel app=realm.getApplicationByName(entry.getKey());
        if (app == null)         continue;
        if (entry.getValue().getRoles() != null) {
          for (          String role : entry.getValue().getRoles()) {
            RoleModel roleModel=app.getRole(role);
            if (roleModel != null)             appRolesRequested.add(entry.getKey(),roleModel);
          }
        }
      }
    }
    return Flows.forms(this.session,realm,uriInfo).setAccessCode(accessCode.getCode()).setAccessRequest(realmRolesRequested,appRolesRequested).setClient(client).createOAuthGrant();
  }
  if (redirect != null) {
    audit.success();
    return redirectAccessCode(accessCode,session,state,redirect,rememberMe);
  }
 else {
    return null;
  }
}
