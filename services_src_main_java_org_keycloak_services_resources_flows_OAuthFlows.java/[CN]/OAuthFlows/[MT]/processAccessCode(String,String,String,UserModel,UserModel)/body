{
  RoleModel resourceRole=realm.getRole(RealmManager.RESOURCE_ROLE);
  RoleModel identityRequestRole=realm.getRole(RealmManager.IDENTITY_REQUESTER_ROLE);
  boolean isResource=realm.hasRole(client,resourceRole);
  if (!isResource && !realm.hasRole(client,identityRequestRole)) {
    return forwardToSecurityFailure("Login requester not allowed to request login.");
  }
  AccessCodeEntry accessCode=tokenManager.createAccessCode(scopeParam,state,redirect,realm,client,user);
  log.info("processAccessCode: isResource: " + isResource);
  log.info("processAccessCode: go to oauth page?: " + (!isResource && (accessCode.getRealmRolesRequested().size() > 0 || accessCode.getResourceRolesRequested().size() > 0)));
  if (!isResource && (accessCode.getRealmRolesRequested().size() > 0 || accessCode.getResourceRolesRequested().size() > 0)) {
    return oauthGrantPage(accessCode,client);
  }
  if (user.getRequiredActions() != null) {
    accessCode.setExpiration(System.currentTimeMillis() / 1000 + realm.getAccessCodeLifespanUserAction());
    return Flows.forms(realm,request).setCode(accessCode.getCode()).setUser(user).forwardToAction(user.getRequiredActions().get(0));
  }
  if (redirect != null) {
    return redirectAccessCode(accessCode,state,redirect);
  }
 else {
    return null;
  }
}
