{
  RealmModel defaultRealm=manager.createRealm(RealmModel.DEFAULT_REALM,RealmModel.DEFAULT_REALM);
  defaultRealm.setName(RealmModel.DEFAULT_REALM);
  defaultRealm.setEnabled(true);
  defaultRealm.setTokenLifespan(300);
  defaultRealm.setAccessCodeLifespan(60);
  defaultRealm.setAccessCodeLifespanUserAction(600);
  defaultRealm.setSslNotRequired(false);
  defaultRealm.setCookieLoginAllowed(true);
  defaultRealm.setRegistrationAllowed(true);
  defaultRealm.setAutomaticRegistrationAfterSocialLogin(false);
  manager.generateRealmKeys(defaultRealm);
  defaultRealm.addRequiredCredential(CredentialRepresentation.PASSWORD);
  RoleModel role=defaultRealm.addRole(SaasService.REALM_CREATOR_ROLE);
  UserModel admin=defaultRealm.addUser("admin");
  defaultRealm.grantRole(admin,role);
  RealmRepresentation rep=AbstractKeycloakServerTest.loadJson("testrealm.json");
  RealmModel realm=manager.createRealm("demo",rep.getRealm());
  manager.importRealm(rep,realm);
  realm.addRealmAdmin(admin);
  Assert.assertTrue(realm.isVerifyEmail());
  Assert.assertFalse(realm.isAutomaticRegistrationAfterSocialLogin());
  List<RequiredCredentialModel> creds=realm.getRequiredCredentials();
  Assert.assertEquals(1,creds.size());
  RequiredCredentialModel cred=creds.get(0);
  Assert.assertEquals("password",cred.getFormLabel());
  Assert.assertEquals(2,realm.getDefaultRoles().size());
  Assert.assertNotNull(realm.getRole("foo"));
  Assert.assertNotNull(realm.getRole("bar"));
  UserModel user=realm.getUser("loginclient");
  Assert.assertNotNull(user);
  Set<String> scopes=realm.getScopeMapping(user);
  System.out.println("Scopes size: " + scopes.size());
  Assert.assertTrue(scopes.contains("*"));
  Assert.assertEquals(0,realm.getSocialLinks(user).size());
  List<ApplicationModel> resources=realm.getApplications();
  Assert.assertEquals(2,resources.size());
  List<RealmModel> realms=identitySession.getRealms(admin);
  Assert.assertEquals(1,realms.size());
  ApplicationModel application=realm.getApplicationNameMap().get("Application");
  UserModel oauthClient=realm.getUser("oauthclient");
  Assert.assertNotNull(application);
  Assert.assertNotNull(oauthClient);
  Set<String> appScopes=application.getScopeMapping(oauthClient);
  Assert.assertTrue(appScopes.contains("user"));
  UserModel socialUser=realm.getUser("mySocialUser");
  Set<SocialLinkModel> socialLinks=realm.getSocialLinks(socialUser);
  Assert.assertEquals(3,socialLinks.size());
  int facebookCount=0;
  int googleCount=0;
  for (  SocialLinkModel socialLinkModel : socialLinks) {
    if ("facebook".equals(socialLinkModel.getSocialProvider())) {
      facebookCount++;
    }
 else     if ("google".equals(socialLinkModel.getSocialProvider())) {
      googleCount++;
      Assert.assertEquals(socialLinkModel.getSocialUsername(),"mySocialUser@gmail.com");
    }
  }
  Assert.assertEquals(2,facebookCount);
  Assert.assertEquals(1,googleCount);
  UserModel foundSocialUser=realm.getUserBySocialLink(new SocialLinkModel("facebook","fbuser1"));
  Assert.assertEquals(foundSocialUser.getLoginName(),socialUser.getLoginName());
  Assert.assertNull(realm.getUserBySocialLink(new SocialLinkModel("facebook","not-existing")));
}
