{
  try {
    OIDCResponseType.parse(Arrays.asList("code","token"));
    Assert.fail("Not expected to parse with success");
  }
 catch (  IllegalArgumentException iae) {
  }
  OIDCResponseType responseType=OIDCResponseType.parse(Collections.singletonList("code"));
  Assert.assertTrue(responseType.hasResponseType("code"));
  Assert.assertFalse(responseType.hasResponseType("none"));
  Assert.assertFalse(responseType.isImplicitOrHybridFlow());
  responseType=OIDCResponseType.parse(Arrays.asList("code","none"));
  Assert.assertTrue(responseType.hasResponseType("code"));
  Assert.assertTrue(responseType.hasResponseType("none"));
  Assert.assertFalse(responseType.isImplicitOrHybridFlow());
  responseType=OIDCResponseType.parse(Arrays.asList("code","code token"));
  Assert.assertTrue(responseType.hasResponseType("code"));
  Assert.assertFalse(responseType.hasResponseType("none"));
  Assert.assertTrue(responseType.hasResponseType("token"));
  Assert.assertFalse(responseType.hasResponseType("id_token"));
  Assert.assertTrue(responseType.isImplicitOrHybridFlow());
  Assert.assertFalse(responseType.isImplicitFlow());
  responseType=OIDCResponseType.parse(Arrays.asList("id_token","id_token token"));
  Assert.assertFalse(responseType.hasResponseType("code"));
  Assert.assertTrue(responseType.isImplicitOrHybridFlow());
  Assert.assertTrue(responseType.isImplicitFlow());
}
