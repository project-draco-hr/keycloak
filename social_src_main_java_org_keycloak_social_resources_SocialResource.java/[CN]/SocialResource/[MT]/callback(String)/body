{
  String realm=null;
  IdentityProviderCallback callback=new IdentityProviderCallback();
  callback.setApplication(application);
  callback.setHeaders(headers);
  callback.setUriInfo(uriInfo);
  Iterator<IdentityProvider> itr=ServiceRegistry.lookupProviders(IdentityProvider.class);
  for (IdentityProvider provider=itr.next(); itr.hasNext(); ) {
    callback.setProviderState(getProviderState(provider));
    if (provider.isCallbackHandler(callback)) {
      User user=provider.processCallback(callback);
      if (user == null) {
        break;
      }
      String providerUsername=user.getLoginName();
      String providerUsernameKey=provider.getId() + ".username";
      user.setAttribute(new Attribute<String>(providerUsernameKey,user.getLoginName()));
      User existingUser=getUser(realm,user.getLoginName());
      if (existingUser != null) {
        user=mergeUser(user,existingUser);
        updateUser(realm,user);
      }
 else {
        if (user.getEmail() != null && getUser(realm,user.getEmail()) == null) {
          user.setLoginName(user.getEmail());
        }
 else         if (getUser(realm,user.getLoginName()) != null) {
          for (int i=0; ; i++) {
            if (getUser(realm,providerUsername + i) == null) {
              user.setLoginName(providerUsername + i);
              break;
            }
          }
        }
        createUser(realm,user);
      }
      URI uri=null;
      return Response.seeOther(uri).build();
    }
  }
  return redirectToLogin(application,"login_failed");
}
