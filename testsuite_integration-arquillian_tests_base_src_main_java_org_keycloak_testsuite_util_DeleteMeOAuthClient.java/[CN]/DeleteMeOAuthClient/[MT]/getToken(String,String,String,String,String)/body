{
  CloseableHttpClient httpclient=HttpClients.createDefault();
  try {
    HttpPost post=new HttpPost(OIDCLoginProtocolService.tokenUrl(UriBuilder.fromUri(baseUrl)).build(realm));
    List<NameValuePair> parameters=new LinkedList<NameValuePair>();
    parameters.add(new BasicNameValuePair(OAuth2Constants.GRANT_TYPE,OAuth2Constants.PASSWORD));
    parameters.add(new BasicNameValuePair("username",username));
    parameters.add(new BasicNameValuePair("password",password));
    if (clientSecret != null) {
      String authorization=BasicAuthHelper.createHeader(clientId,clientSecret);
      post.setHeader("Authorization",authorization);
    }
 else {
      parameters.add(new BasicNameValuePair("client_id",clientId));
    }
    UrlEncodedFormEntity formEntity;
    try {
      formEntity=new UrlEncodedFormEntity(parameters,"UTF-8");
    }
 catch (    UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    post.setEntity(formEntity);
    CloseableHttpResponse response=httpclient.execute(post);
    if (response.getStatusLine().getStatusCode() != 200) {
      throw new RuntimeException("Failed to retrieve token: " + response.getStatusLine().toString() + " / "+ IOUtils.toString(response.getEntity().getContent()));
    }
    return JsonSerialization.readValue(response.getEntity().getContent(),AccessTokenResponse.class);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      httpclient.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}
