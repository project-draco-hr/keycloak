{
  InputStream is;
  try {
    if (connectionPropertiesLocation.startsWith(GenericConstants.PROTOCOL_CLASSPATH)) {
      String classPathLocation=connectionPropertiesLocation.replace(GenericConstants.PROTOCOL_CLASSPATH,"");
      log.info("Reading LDAP configuration from classpath from: " + classPathLocation);
      is=LDAPTestConfiguration.class.getClassLoader().getResourceAsStream(classPathLocation);
    }
 else {
      String file=getResource(connectionPropertiesLocation);
      log.info("Reading LDAP configuration from: " + connectionPropertiesLocation);
      is=new FileInputStream(file);
    }
  }
 catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
  PropertiesConfiguration p;
  try {
    p=new PropertiesConfiguration();
    p.setDelimiterParsingDisabled(true);
    p.load(is);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  config=new HashMap<String,String>();
  for (  Map.Entry<String,String> property : PROP_MAPPINGS.entrySet()) {
    String propertyName=property.getKey();
    String configName=property.getValue();
    String value=p.getString(configName);
    if (value == null) {
      value=DEFAULT_VALUES.get(propertyName);
    }
    config.put(propertyName,value);
  }
  startEmbeddedLdapServer=p.getBoolean("idm.test.ldap.start.embedded.ldap.server",true);
  sleepTime=p.getInteger("idm.test.ldap.sleepTime",1000);
  caseSensitiveLogin=p.getBoolean("idm.test.kerberos.caseSensitiveLogin",true);
  log.info("Start embedded server: " + startEmbeddedLdapServer);
  log.info("Read config: " + config);
}
