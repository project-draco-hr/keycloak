{
  RealmRepresentation realm=testRealmResource().toRepresentation();
  realm.setEventsEnabled(true);
  realm.setEnabledEventTypes(Arrays.asList("LOGIN","LOGIN_ERROR","LOGOUT","CODE_TO_TOKEN"));
  testRealmResource().update(realm);
  customerPortalExamplePage.navigateTo();
  customerPortalExamplePage.customerListing();
  testRealmLoginPage.form().login("bburke@redhat.com","password");
  Assert.assertTrue(driver.getPageSource().contains("Username: bburke@redhat.com") && driver.getPageSource().contains("Bill Burke") && driver.getPageSource().contains("Stian Thorgersen"));
  if (isRelative()) {
    productPortalExamplePage.logOut();
  }
 else {
    driver.navigate().to(testRealmPage.getOIDCLogoutUrl() + "?redirect_uri=" + productPortalExamplePage);
  }
  loginEventsPage.navigateTo();
  if (!testContext.isAdminLoggedIn()) {
    loginPage.form().login(adminUser);
    testContext.setAdminLoggedIn(true);
  }
  loginEventsPage.table().filter();
  loginEventsPage.table().filterForm().addEventType("LOGOUT");
  loginEventsPage.table().update();
  List<WebElement> resultList=loginEventsPage.table().rows();
  assertEquals(1,resultList.size());
  resultList.get(0).findElement(By.xpath(".//td[text()='LOGOUT']"));
  resultList.get(0).findElement(By.xpath(".//td[text()='Client']/../td[text()='']"));
  resultList.get(0).findElement(By.xpath(".//td[text()='IP Address']/../td[text()='127.0.0.1']"));
  loginEventsPage.table().reset();
  loginEventsPage.table().filterForm().addEventType("LOGIN");
  loginEventsPage.table().update();
  resultList=loginEventsPage.table().rows();
  assertEquals(1,resultList.size());
  resultList.get(0).findElement(By.xpath(".//td[text()='LOGIN']"));
  resultList.get(0).findElement(By.xpath(".//td[text()='Client']/../td[text()='customer-portal']"));
  resultList.get(0).findElement(By.xpath(".//td[text()='IP Address']/../td[text()='127.0.0.1']"));
  resultList.get(0).findElement(By.xpath(".//td[text()='username']/../td[text()='bburke@redhat.com']"));
  loginEventsPage.table().reset();
  loginEventsPage.table().filterForm().addEventType("CODE_TO_TOKEN");
  loginEventsPage.table().update();
  resultList=loginEventsPage.table().rows();
  assertEquals(1,resultList.size());
  resultList.get(0).findElement(By.xpath(".//td[text()='CODE_TO_TOKEN']"));
  resultList.get(0).findElement(By.xpath(".//td[text()='Client']/../td[text()='customer-portal']"));
  resultList.get(0).findElement(By.xpath(".//td[text()='IP Address']/../td[text()='127.0.0.1']"));
  resultList.get(0).findElement(By.xpath(".//td[text()='refresh_token_type']/../td[text()='Refresh']"));
  String serverLogPath=null;
  if (System.getProperty("app.server.wildfly","false").equals("true")) {
    serverLogPath=System.getProperty("app.server.wildfly.home") + "/standalone/log/server.log";
  }
  if (System.getProperty("app.server.eap6","false").equals("true")) {
    serverLogPath=System.getProperty("app.server.eap6.home") + "/standalone/log/server.log";
  }
  if (System.getProperty("app.server.eap7","false").equals("true")) {
    serverLogPath=System.getProperty("app.server.eap7.home") + "/standalone/log/server.log";
  }
  String appServerUrl;
  if (Boolean.parseBoolean(System.getProperty("app.server.ssl.required"))) {
    appServerUrl="https://localhost:" + System.getProperty("app.server.https.port","8543") + "/";
  }
 else {
    appServerUrl="http://localhost:" + System.getProperty("app.server.http.port","8280") + "/";
  }
  if (serverLogPath != null) {
    File serverLog=new File(serverLogPath);
    String serverLogContent=FileUtils.readFileToString(serverLog);
    UserRepresentation bburke=ApiUtil.findUserByUsername(testRealmResource(),"bburke@redhat.com");
    Pattern pattern=Pattern.compile("User '" + bburke.getId() + "' invoking '"+ appServerUrl+ "customer-portal\\/customers\\/view\\.jsp[^\\s]+' on client 'customer-portal'");
    Matcher matcher=pattern.matcher(serverLogContent);
    assertTrue(matcher.find());
    assertTrue(serverLogContent.contains("User '" + bburke.getId() + "' invoking '"+ appServerUrl+ "database/customers' on client 'database-service'"));
  }
}
