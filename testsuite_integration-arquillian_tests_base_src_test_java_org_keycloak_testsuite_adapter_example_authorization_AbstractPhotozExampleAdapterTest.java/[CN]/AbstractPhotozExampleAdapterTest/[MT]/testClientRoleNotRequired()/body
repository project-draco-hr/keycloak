{
  try {
    this.deployer.deploy(RESOURCE_SERVER_ID);
    this.clientPage.login("alice","alice");
    assertFalse(this.clientPage.wasDenied());
    UsersResource usersResource=realmsResouce().realm(REALM_NAME).users();
    List<UserRepresentation> users=usersResource.search("alice",null,null,null,null,null);
    assertFalse(users.isEmpty());
    UserRepresentation userRepresentation=users.get(0);
    UserResource userResource=usersResource.get(userRepresentation.getId());
    ClientResource html5ClientApp=getClientResource("photoz-html5-client");
    userResource.revokeConsent(html5ClientApp.toRepresentation().getClientId());
    ClientResource resourceServerClient=getClientResource(RESOURCE_SERVER_ID);
    RoleResource manageAlbumRole=resourceServerClient.roles().get("manage-albums");
    RoleRepresentation roleRepresentation=manageAlbumRole.toRepresentation();
    roleRepresentation.setScopeParamRequired(true);
    manageAlbumRole.update(roleRepresentation);
    this.clientPage.login("alice","alice");
    assertTrue(this.clientPage.wasDenied());
    for (    PolicyRepresentation policy : getAuthorizationResource().policies().policies()) {
      if ("Any User Policy".equals(policy.getName())) {
        List<Map> roles=JsonSerialization.readValue(policy.getConfig().get("roles"),List.class);
        roles.forEach(new Consumer<Map>(){
          @Override public void accept(          Map role){
            String roleId=(String)role.get("id");
            if (roleId.equals(manageAlbumRole.toRepresentation().getId())) {
              role.put("required",false);
            }
          }
        }
);
        policy.getConfig().put("roles",JsonSerialization.writeValueAsString(roles));
        getAuthorizationResource().policies().policy(policy.getId()).update(policy);
      }
    }
    this.clientPage.login("alice","alice");
    assertFalse(this.clientPage.wasDenied());
  }
  finally {
    this.deployer.undeploy(RESOURCE_SERVER_ID);
  }
}
