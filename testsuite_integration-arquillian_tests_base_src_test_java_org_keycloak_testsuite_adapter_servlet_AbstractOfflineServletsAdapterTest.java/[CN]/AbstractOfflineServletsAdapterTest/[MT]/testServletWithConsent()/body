{
  ClientManager.realm(adminClient.realm("test")).clientId("offline-client").consentRequired(true);
  offlineTokenPage.navigateTo();
  loginPage.login("test-user@localhost","password");
  oauthGrantPage.assertCurrent();
  waitUntilElement(By.xpath("//body")).text().not().contains("Offline access");
  oauthGrantPage.cancel();
  String servletUri=UriBuilder.fromUri(offlineTokenPage.toString()).queryParam(OAuth2Constants.SCOPE,OAuth2Constants.OFFLINE_ACCESS).build().toString();
  driver.navigate().to(servletUri);
  waitUntilElement(By.tagName("body")).is().visible();
  loginPage.login("test-user@localhost","password");
  oauthGrantPage.assertCurrent();
  waitUntilElement(By.xpath("//body")).text().contains("Offline access");
  oauthGrantPage.accept();
  assertCurrentUrlStartsWith(offlineTokenPage);
  Assert.assertEquals(offlineTokenPage.getRefreshToken().getType(),TokenUtil.TOKEN_TYPE_OFFLINE);
  accountAppPage.open();
  AccountApplicationsPage.AppEntry offlineClient=accountAppPage.getApplications().get("offline-client");
  Assert.assertTrue(offlineClient.getRolesGranted().contains("Offline access"));
  Assert.assertTrue(offlineClient.getAdditionalGrants().contains("Offline Token"));
  offlineTokenPage.logout();
  loginPage.assertCurrent();
  events.clear();
  ClientManager.realm(adminClient.realm("test")).clientId("offline-client").consentRequired(false);
}
