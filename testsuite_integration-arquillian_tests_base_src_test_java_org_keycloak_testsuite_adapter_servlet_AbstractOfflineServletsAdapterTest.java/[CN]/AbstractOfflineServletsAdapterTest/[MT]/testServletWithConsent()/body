{
  ClientManager.realm(adminClient.realm("test")).clientId("offline-client").consentRequired(true);
  driver.navigate().to(OFFLINE_CLIENT_APP_URI);
  loginPage.login("test-user@localhost","password");
  oauthGrantPage.assertCurrent();
  Assert.assertFalse(driver.getPageSource().contains("Offline access"));
  oauthGrantPage.cancel();
  String servletUri=UriBuilder.fromUri(OFFLINE_CLIENT_APP_URI).queryParam(OAuth2Constants.SCOPE,OAuth2Constants.OFFLINE_ACCESS).build().toString();
  driver.navigate().to(servletUri);
  loginPage.login("test-user@localhost","password");
  oauthGrantPage.assertCurrent();
  Assert.assertTrue(driver.getPageSource().contains("Offline access"));
  oauthGrantPage.accept();
  Assert.assertTrue(driver.getCurrentUrl().startsWith(OFFLINE_CLIENT_APP_URI));
  Assert.assertEquals(offlineToken.getRefreshToken().getType(),TokenUtil.TOKEN_TYPE_OFFLINE);
  accountAppPage.open();
  AccountApplicationsPage.AppEntry offlineClient=accountAppPage.getApplications().get("offline-client");
  Assert.assertTrue(offlineClient.getRolesGranted().contains("Offline access"));
  Assert.assertTrue(offlineClient.getAdditionalGrants().contains("Offline Token"));
  driver.navigate().to(OFFLINE_CLIENT_APP_URI + "/logout");
  loginPage.assertCurrent();
  events.clear();
  ClientManager.realm(adminClient.realm("test")).clientId("offline-client").consentRequired(false);
}
