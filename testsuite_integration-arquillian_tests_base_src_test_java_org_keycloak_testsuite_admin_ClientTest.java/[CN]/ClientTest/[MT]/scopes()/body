{
  Response response=realm.clients().create(ClientBuilder.create().clientId("client").fullScopeEnabled(false).build());
  String id=ApiUtil.getCreatedId(response);
  response.close();
  RoleMappingResource scopesResource=realm.clients().get(id).getScopeMappings();
  realm.roles().create(RoleBuilder.create().name("role1").build());
  realm.roles().create(RoleBuilder.create().name("role2").build());
  RoleRepresentation roleRep1=realm.roles().get("role1").toRepresentation();
  RoleRepresentation roleRep2=realm.roles().get("role2").toRepresentation();
  realm.roles().get("role1").addComposites(Collections.singletonList(roleRep2));
  String accountMgmtId=realm.clients().findByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).get(0).getId();
  RoleRepresentation viewAccountRoleRep=realm.clients().get(accountMgmtId).roles().get(AccountRoles.VIEW_PROFILE).toRepresentation();
  scopesResource.realmLevel().add(Collections.singletonList(roleRep1));
  scopesResource.clientLevel(accountMgmtId).add(Collections.singletonList(viewAccountRoleRep));
  Assert.assertNames(scopesResource.realmLevel().listAll(),"role1");
  Assert.assertNames(scopesResource.realmLevel().listEffective(),"role1","role2");
  Assert.assertNames(scopesResource.realmLevel().listAvailable(),"offline_access");
  Assert.assertNames(scopesResource.clientLevel(accountMgmtId).listAll(),AccountRoles.VIEW_PROFILE);
  Assert.assertNames(scopesResource.clientLevel(accountMgmtId).listEffective(),AccountRoles.VIEW_PROFILE);
  Assert.assertNames(scopesResource.clientLevel(accountMgmtId).listAvailable(),AccountRoles.MANAGE_ACCOUNT);
  Assert.assertNames(scopesResource.getAll().getRealmMappings(),"role1");
  Assert.assertNames(scopesResource.getAll().getClientMappings().get(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).getMappings(),AccountRoles.VIEW_PROFILE);
  scopesResource.realmLevel().remove(Collections.singletonList(roleRep1));
  scopesResource.clientLevel(accountMgmtId).remove(Collections.singletonList(viewAccountRoleRep));
  Assert.assertNames(scopesResource.realmLevel().listAll());
  Assert.assertNames(scopesResource.realmLevel().listEffective());
  Assert.assertNames(scopesResource.realmLevel().listAvailable(),"offline_access","role1","role2");
  Assert.assertNames(scopesResource.clientLevel(accountMgmtId).listAll());
  Assert.assertNames(scopesResource.clientLevel(accountMgmtId).listAvailable(),AccountRoles.VIEW_PROFILE,AccountRoles.MANAGE_ACCOUNT);
  Assert.assertNames(scopesResource.clientLevel(accountMgmtId).listEffective());
}
