{
  IdentityProviderResource provider;
  Map<String,IdentityProviderMapperTypeRepresentation> mapperTypes;
  Response response=realm.identityProviders().create(create("google","google"));
  Assert.assertNotNull(ApiUtil.getCreatedId(response));
  response.close();
  provider=realm.identityProviders().get("google");
  mapperTypes=provider.getMapperTypes();
  assertMapperTypes(mapperTypes,"google-user-attribute-mapper");
  response=realm.identityProviders().create(create("facebook","facebook"));
  Assert.assertNotNull(ApiUtil.getCreatedId(response));
  response.close();
  provider=realm.identityProviders().get("facebook");
  mapperTypes=provider.getMapperTypes();
  assertMapperTypes(mapperTypes,"facebook-user-attribute-mapper");
  response=realm.identityProviders().create(create("github","github"));
  Assert.assertNotNull(ApiUtil.getCreatedId(response));
  response.close();
  provider=realm.identityProviders().get("github");
  mapperTypes=provider.getMapperTypes();
  assertMapperTypes(mapperTypes,"github-user-attribute-mapper");
  response=realm.identityProviders().create(create("twitter","twitter"));
  Assert.assertNotNull(ApiUtil.getCreatedId(response));
  response.close();
  provider=realm.identityProviders().get("twitter");
  mapperTypes=provider.getMapperTypes();
  assertMapperTypes(mapperTypes);
  response=realm.identityProviders().create(create("linkedin","linkedin"));
  Assert.assertNotNull(ApiUtil.getCreatedId(response));
  response.close();
  provider=realm.identityProviders().get("linkedin");
  mapperTypes=provider.getMapperTypes();
  assertMapperTypes(mapperTypes,"linkedin-user-attribute-mapper");
  response=realm.identityProviders().create(create("microsoft","microsoft"));
  Assert.assertNotNull(ApiUtil.getCreatedId(response));
  response.close();
  provider=realm.identityProviders().get("microsoft");
  mapperTypes=provider.getMapperTypes();
  assertMapperTypes(mapperTypes,"microsoft-user-attribute-mapper");
  response=realm.identityProviders().create(create("stackoverflow","stackoverflow"));
  Assert.assertNotNull(ApiUtil.getCreatedId(response));
  response.close();
  provider=realm.identityProviders().get("stackoverflow");
  mapperTypes=provider.getMapperTypes();
  assertMapperTypes(mapperTypes,"stackoverflow-user-attribute-mapper");
  response=realm.identityProviders().create(create("keycloak-oidc","keycloak-oidc"));
  Assert.assertNotNull(ApiUtil.getCreatedId(response));
  response.close();
  provider=realm.identityProviders().get("keycloak-oidc");
  mapperTypes=provider.getMapperTypes();
  assertMapperTypes(mapperTypes,"keycloak-oidc-role-to-role-idp-mapper","oidc-user-attribute-idp-mapper","oidc-role-idp-mapper","oidc-username-idp-mapper");
  response=realm.identityProviders().create(create("oidc","oidc"));
  Assert.assertNotNull(ApiUtil.getCreatedId(response));
  response.close();
  provider=realm.identityProviders().get("oidc");
  mapperTypes=provider.getMapperTypes();
  assertMapperTypes(mapperTypes,"oidc-user-attribute-idp-mapper","oidc-role-idp-mapper","oidc-username-idp-mapper");
  response=realm.identityProviders().create(create("saml","saml"));
  Assert.assertNotNull(ApiUtil.getCreatedId(response));
  response.close();
  provider=realm.identityProviders().get("saml");
  mapperTypes=provider.getMapperTypes();
  assertMapperTypes(mapperTypes,"saml-user-attribute-idp-mapper","saml-role-idp-mapper","saml-username-idp-mapper");
}
