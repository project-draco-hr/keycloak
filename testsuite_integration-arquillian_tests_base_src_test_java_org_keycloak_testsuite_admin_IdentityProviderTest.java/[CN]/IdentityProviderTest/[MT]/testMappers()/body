{
  Response response=realm.identityProviders().create(create("google","google"));
  Assert.assertNotNull(ApiUtil.getCreatedId(response));
  response.close();
  IdentityProviderResource provider=realm.identityProviders().get("google");
  IdentityProviderMapperRepresentation mapper=new IdentityProviderMapperRepresentation();
  mapper.setIdentityProviderAlias("google");
  mapper.setName("my_mapper");
  mapper.setIdentityProviderMapper("oidc-hardcoded-role-idp-mapper");
  Map<String,String> config=new HashMap<>();
  config.put("role","offline_access");
  mapper.setConfig(config);
  response=provider.addMapper(mapper);
  String id=ApiUtil.getCreatedId(response);
  Assert.assertNotNull(id);
  response.close();
  List<IdentityProviderMapperRepresentation> mappers=provider.getMappers();
  Assert.assertEquals("mappers count",1,mappers.size());
  Assert.assertEquals("newly created mapper id",id,mappers.get(0).getId());
  mapper=provider.getMapperById(id);
  Assert.assertNotNull("mapperById not null",mapper);
  Assert.assertEquals("mapper id",id,mapper.getId());
  Assert.assertNotNull("mapper.config exists",mapper.getConfig());
  Assert.assertEquals("config retained","offline_access",mapper.getConfig().get("role"));
  mapper.getConfig().put("role","master-realm.manage-realm");
  provider.update(id,mapper);
  mapper=provider.getMapperById(id);
  Assert.assertNotNull("mapperById not null",mapper);
  Assert.assertEquals("config changed","master-realm.manage-realm",mapper.getConfig().get("role"));
  provider.delete(id);
  try {
    provider.getMapperById(id);
    Assert.fail("Should fail with NotFoundException");
  }
 catch (  NotFoundException e) {
  }
}
