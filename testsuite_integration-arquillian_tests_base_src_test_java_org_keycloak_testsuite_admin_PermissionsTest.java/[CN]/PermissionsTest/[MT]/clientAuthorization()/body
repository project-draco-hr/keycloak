{
  invoke(new InvocationWithResponse(){
    public void invoke(    RealmResource realm,    AtomicReference<Response> response){
      realm.clients().create(ClientBuilder.create().clientId("foo-authz").build());
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      foo.setServiceAccountsEnabled(true);
      foo.setAuthorizationServicesEnabled(true);
      realm.clients().get(foo.getId()).update(foo);
    }
  }
,CLIENT,true);
  invoke(new Invocation(){
    public void invoke(    RealmResource realm){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      realm.clients().get(foo.getId()).authorization().getSettings();
    }
  }
,AUTHORIZATION,false);
  invoke(new Invocation(){
    public void invoke(    RealmResource realm){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      AuthorizationResource authorization=realm.clients().get(foo.getId()).authorization();
      ResourceServerRepresentation settings=authorization.getSettings();
      authorization.update(settings);
    }
  }
,AUTHORIZATION,true);
  invoke(new Invocation(){
    public void invoke(    RealmResource realm){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      AuthorizationResource authorization=realm.clients().get(foo.getId()).authorization();
      authorization.resources().resources();
    }
  }
,AUTHORIZATION,false);
  invoke(new Invocation(){
    public void invoke(    RealmResource realm){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      AuthorizationResource authorization=realm.clients().get(foo.getId()).authorization();
      authorization.scopes().scopes();
    }
  }
,AUTHORIZATION,false);
  invoke(new Invocation(){
    public void invoke(    RealmResource realm){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      AuthorizationResource authorization=realm.clients().get(foo.getId()).authorization();
      authorization.policies().policies();
    }
  }
,AUTHORIZATION,false);
  invoke(new InvocationWithResponse(){
    public void invoke(    RealmResource realm,    AtomicReference<Response> response){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      AuthorizationResource authorization=realm.clients().get(foo.getId()).authorization();
      response.set(authorization.resources().create(new ResourceRepresentation("Test",Collections.emptySet())));
    }
  }
,AUTHORIZATION,true);
  invoke(new InvocationWithResponse(){
    public void invoke(    RealmResource realm,    AtomicReference<Response> response){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      AuthorizationResource authorization=realm.clients().get(foo.getId()).authorization();
      response.set(authorization.scopes().create(new ScopeRepresentation("Test")));
    }
  }
,AUTHORIZATION,true);
  invoke(new InvocationWithResponse(){
    public void invoke(    RealmResource realm,    AtomicReference<Response> response){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      AuthorizationResource authorization=realm.clients().get(foo.getId()).authorization();
      PolicyRepresentation representation=new PolicyRepresentation();
      representation.setName("Test PermissionsTest");
      representation.setType("js");
      HashMap<String,String> config=new HashMap<>();
      config.put("code","");
      representation.setConfig(config);
      response.set(authorization.policies().create(representation));
    }
  }
,AUTHORIZATION,true);
  invoke(new Invocation(){
    public void invoke(    RealmResource realm){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      AuthorizationResource authorization=realm.clients().get(foo.getId()).authorization();
      authorization.resources().resource("nosuch").update(new ResourceRepresentation());
    }
  }
,AUTHORIZATION,true);
  invoke(new Invocation(){
    public void invoke(    RealmResource realm){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      AuthorizationResource authorization=realm.clients().get(foo.getId()).authorization();
      authorization.scopes().scope("nosuch").update(new ScopeRepresentation());
    }
  }
,AUTHORIZATION,true);
  invoke(new Invocation(){
    public void invoke(    RealmResource realm){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      AuthorizationResource authorization=realm.clients().get(foo.getId()).authorization();
      authorization.policies().policy("nosuch").update(new PolicyRepresentation());
    }
  }
,AUTHORIZATION,true);
  invoke(new Invocation(){
    public void invoke(    RealmResource realm){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      AuthorizationResource authorization=realm.clients().get(foo.getId()).authorization();
      authorization.resources().resource("nosuch").remove();
    }
  }
,AUTHORIZATION,true);
  invoke(new Invocation(){
    public void invoke(    RealmResource realm){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      AuthorizationResource authorization=realm.clients().get(foo.getId()).authorization();
      authorization.scopes().scope("nosuch").remove();
    }
  }
,AUTHORIZATION,true);
  invoke(new Invocation(){
    public void invoke(    RealmResource realm){
      org.keycloak.representations.idm.ClientRepresentation foo=realm.clients().findByClientId("foo-authz").get(0);
      AuthorizationResource authorization=realm.clients().get(foo.getId()).authorization();
      authorization.policies().policy("nosuch").remove();
    }
  }
,AUTHORIZATION,true);
}
