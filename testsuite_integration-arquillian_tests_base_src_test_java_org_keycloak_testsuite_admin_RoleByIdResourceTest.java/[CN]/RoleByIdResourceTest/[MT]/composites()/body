{
  assertFalse(resource.getRole(ids.get("role-a")).isComposite());
  assertEquals(0,resource.getRoleComposites(ids.get("role-a")).size());
  List<RoleRepresentation> l=new LinkedList<>();
  l.add(RoleBuilder.create().id(ids.get("role-b")).build());
  l.add(RoleBuilder.create().id(ids.get("role-c")).build());
  resource.addComposites(ids.get("role-a"),l);
  assertAdminEvents.assertEvent(realmId,OperationType.CREATE,Matchers.startsWith(AdminEventPaths.roleByIdResourceCompositesPath(ids.get("role-a"))));
  assertAdminEvents.assertEvent(realmId,OperationType.CREATE,Matchers.startsWith(AdminEventPaths.roleByIdResourceCompositesPath(ids.get("role-a"))));
  Set<RoleRepresentation> composites=resource.getRoleComposites(ids.get("role-a"));
  assertTrue(resource.getRole(ids.get("role-a")).isComposite());
  Assert.assertNames(composites,"role-b","role-c");
  Set<RoleRepresentation> realmComposites=resource.getRealmRoleComposites(ids.get("role-a"));
  Assert.assertNames(realmComposites,"role-b");
  Set<RoleRepresentation> clientComposites=resource.getClientRoleComposites(ids.get("role-a"),clientUuid);
  Assert.assertNames(clientComposites,"role-c");
  resource.deleteComposites(ids.get("role-a"),l);
  assertAdminEvents.assertEvent(realmId,OperationType.DELETE,AdminEventPaths.roleByIdResourceCompositesPath(ids.get("role-a")));
  assertFalse(resource.getRole(ids.get("role-a")).isComposite());
  assertEquals(0,resource.getRoleComposites(ids.get("role-a")).size());
}
