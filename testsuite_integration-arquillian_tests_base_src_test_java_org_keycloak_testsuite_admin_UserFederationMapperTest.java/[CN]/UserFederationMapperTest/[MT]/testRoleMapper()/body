{
  UserFederationMapperRepresentation roleMapper=createMapperRep("role-mapper",RoleLDAPFederationMapperFactory.PROVIDER_ID,RoleMapperConfig.ROLES_DN,"ou=roles,dc=keycloak,dc=org",RoleMapperConfig.MODE,"READ_ONLY");
  Response response=ldapProviderResource().addMapper(roleMapper);
  Assert.assertEquals(400,response.getStatus());
  response.close();
  roleMapper.getConfig().put(RoleMapperConfig.USE_REALM_ROLES_MAPPING,"true");
  String roleMapperId=createMapper(roleMapper);
  List<UserFederationMapperRepresentation> mappers=ldapProviderResource().getMappers();
  Assert.assertNotNull(findMapperByName(mappers,"email"));
  Assert.assertNotNull(findMapperByName(mappers,"first name"));
  Assert.assertNull(findMapperByName(mappers,"non-existent"));
  roleMapper=findMapperByName(mappers,"role-mapper");
  assertMapper(roleMapper,roleMapperId,"role-mapper",RoleLDAPFederationMapperFactory.PROVIDER_ID,RoleMapperConfig.ROLES_DN,"ou=roles,dc=keycloak,dc=org",RoleMapperConfig.MODE,"READ_ONLY",RoleMapperConfig.USE_REALM_ROLES_MAPPING,"true");
  ldapProviderResource().removeMapper(roleMapperId);
  mappers=ldapProviderResource().getMappers();
  Assert.assertNull(findMapperByName(mappers,"role-mapper"));
}
