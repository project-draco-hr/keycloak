{
  List<UserFederationProviderFactoryRepresentation> providerFactories=userFederation().getProviderFactories();
  Assert.assertNames(providerFactories,"ldap","kerberos","dummy","dummy-configurable");
  UserFederationProviderFactoryRepresentation ldapProvider=userFederation().getProviderFactory("ldap");
  Assert.assertEquals(ldapProvider.getId(),"ldap");
  Assert.assertEquals(0,ldapProvider.getOptions().size());
  UserFederationProviderFactoryRepresentation dummyProvider=userFederation().getProviderFactory("dummy");
  Assert.assertEquals(dummyProvider.getId(),"dummy");
  Assert.assertNames(new LinkedList<>(dummyProvider.getOptions()),"important.config");
  UserFederationProviderFactoryRepresentation dummyConfiguredProvider=userFederation().getProviderFactory("dummy-configurable");
  Assert.assertEquals(dummyConfiguredProvider.getId(),"dummy-configurable");
  Assert.assertTrue(dummyConfiguredProvider.getOptions() == null || dummyConfiguredProvider.getOptions().isEmpty());
  Assert.assertEquals("Dummy User Federation Provider Help Text",dummyConfiguredProvider.getHelpText());
  Assert.assertEquals(2,dummyConfiguredProvider.getProperties().size());
  Assert.assertProviderConfigProperty(dummyConfiguredProvider.getProperties().get(0),"prop1","Prop1","prop1Default","Prop1 HelpText",ProviderConfigProperty.STRING_TYPE);
  Assert.assertProviderConfigProperty(dummyConfiguredProvider.getProperties().get(1),"prop2","Prop2","true","Prop2 HelpText",ProviderConfigProperty.BOOLEAN_TYPE);
  try {
    userFederation().getProviderFactory("not-existent");
    Assert.fail("Not expected to find not-existent provider");
  }
 catch (  NotFoundException nfe) {
  }
}
