{
  RealmResource realm=adminClient.realms().realm("test");
  realm.roles().create(RoleBuilder.create().name("realm-role").build());
  realm.roles().create(RoleBuilder.create().name("realm-composite").build());
  realm.roles().create(RoleBuilder.create().name("realm-child").build());
  realm.roles().get("realm-composite").addComposites(Collections.singletonList(realm.roles().get("realm-child").toRepresentation()));
  Response response=realm.clients().create(ClientBuilder.create().clientId("myclient").build());
  String clientId=ApiUtil.getCreatedId(response);
  response.close();
  realm.clients().get(clientId).roles().create(RoleBuilder.create().name("client-role").build());
  realm.clients().get(clientId).roles().create(RoleBuilder.create().name("client-role2").build());
  realm.clients().get(clientId).roles().create(RoleBuilder.create().name("client-composite").build());
  realm.clients().get(clientId).roles().create(RoleBuilder.create().name("client-child").build());
  realm.clients().get(clientId).roles().get("client-composite").addComposites(Collections.singletonList(realm.clients().get(clientId).roles().get("client-child").toRepresentation()));
  response=realm.users().create(UserBuilder.create().username("myuser").build());
  String userId=ApiUtil.getCreatedId(response);
  response.close();
  RoleMappingResource roles=realm.users().get(userId).roles();
  assertNames(roles.realmLevel().listAll(),"user","offline_access");
  List<RoleRepresentation> l=new LinkedList<>();
  l.add(realm.roles().get("realm-role").toRepresentation());
  l.add(realm.roles().get("realm-composite").toRepresentation());
  roles.realmLevel().add(l);
  roles.clientLevel(clientId).add(Collections.singletonList(realm.clients().get(clientId).roles().get("client-role").toRepresentation()));
  roles.clientLevel(clientId).add(Collections.singletonList(realm.clients().get(clientId).roles().get("client-composite").toRepresentation()));
  assertNames(roles.realmLevel().listAll(),"realm-role","realm-composite","user","offline_access");
  assertNames(roles.realmLevel().listAvailable(),"admin");
  assertNames(roles.realmLevel().listEffective(),"realm-role","realm-composite","realm-child","user","offline_access");
  assertNames(roles.clientLevel(clientId).listAll(),"client-role","client-composite");
  assertNames(roles.clientLevel(clientId).listAvailable(),"client-role2");
  assertNames(roles.clientLevel(clientId).listEffective(),"client-role","client-composite","client-child");
  MappingsRepresentation all=roles.getAll();
  assertNames(all.getRealmMappings(),"realm-role","realm-composite","user","offline_access");
  assertEquals(2,all.getClientMappings().size());
  assertNames(all.getClientMappings().get("myclient").getMappings(),"client-role","client-composite");
  assertNames(all.getClientMappings().get("account").getMappings(),"manage-account","view-profile");
  roles.realmLevel().remove(Collections.singletonList(realm.roles().get("realm-role").toRepresentation()));
  assertNames(roles.realmLevel().listAll(),"realm-composite","user","offline_access");
  roles.clientLevel(clientId).remove(Collections.singletonList(realm.clients().get(clientId).roles().get("client-role").toRepresentation()));
  assertNames(roles.clientLevel(clientId).listAll(),"client-composite");
}
