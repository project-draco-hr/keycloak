{
  HashMap<String,String> params=new HashMap<>();
  params.put("provider","idp-review-profile");
  try {
    authMgmtResource.addExecution("browser",params);
    Assert.fail("add execution to built-in flow should fail");
  }
 catch (  BadRequestException expected) {
  }
  try {
    authMgmtResource.addExecution("not-existent",params);
    Assert.fail("add execution to not-existent flow should fail");
  }
 catch (  BadRequestException expected) {
  }
  params.put("newName","Copy of browser");
  Response response=authMgmtResource.copy("browser",params);
  try {
    Assert.assertEquals("Copy flow",201,response.getStatus());
  }
  finally {
    response.close();
  }
  params.put("provider","test-execution");
  try {
    authMgmtResource.addExecution("Copy of browser",params);
    Assert.fail("add execution with inexistent provider should fail");
  }
 catch (  BadRequestException expected) {
  }
  params.put("provider","idp-review-profile");
  authMgmtResource.addExecution("Copy of browser",params);
  List<AuthenticationExecutionInfoRepresentation> executionReps=authMgmtResource.getExecutions("Copy of browser");
  AuthenticationExecutionInfoRepresentation exec=findExecutionByProvider("idp-review-profile",executionReps);
  Assert.assertNotNull("idp-review-profile added",exec);
  AuthenticationExecutionInfoRepresentation authCookieExec=findExecutionByProvider("auth-cookie",executionReps);
  compareExecution(newExecInfo("Review Profile","idp-review-profile",true,0,3,DISABLED,null,new String[]{REQUIRED,DISABLED}),exec);
  authMgmtResource.removeExecution(exec.getId());
  executionReps=authMgmtResource.getExecutions("Copy of browser");
  exec=findExecutionByProvider("idp-review-profile",executionReps);
  Assert.assertNull("idp-review-profile removed",exec);
  authMgmtResource.removeExecution(authCookieExec.getId());
  AuthenticationExecutionRepresentation rep=new AuthenticationExecutionRepresentation();
  rep.setPriority(10);
  rep.setAuthenticator("auth-cookie");
  rep.setRequirement(OPTIONAL);
  response=authMgmtResource.addExecution(rep);
  try {
    Assert.assertEquals("added execution missing parent flow",400,response.getStatus());
  }
  finally {
    response.close();
  }
  rep.setParentFlow("not-existent-id");
  response=authMgmtResource.addExecution(rep);
  try {
    Assert.assertEquals("added execution missing parent flow",400,response.getStatus());
  }
  finally {
    response.close();
  }
  AuthenticationFlowRepresentation browserFlow=findFlowByAlias("browser",authMgmtResource.getFlows());
  rep.setParentFlow(browserFlow.getId());
  response=authMgmtResource.addExecution(rep);
  try {
    Assert.assertEquals("added execution to builtin flow",400,response.getStatus());
  }
  finally {
    response.close();
  }
  List<AuthenticationFlowRepresentation> flows=authMgmtResource.getFlows();
  AuthenticationFlowRepresentation flow=findFlowByAlias("Copy of browser",flows);
  rep.setParentFlow(flow.getId());
  response=authMgmtResource.addExecution(rep);
  try {
    Assert.assertEquals("added execution",201,response.getStatus());
  }
  finally {
    response.close();
  }
  List<AuthenticationExecutionInfoRepresentation> executions=authMgmtResource.getExecutions("Copy of browser");
  exec=findExecutionByProvider("auth-cookie",executions);
  Assert.assertNotNull("auth-cookie added",exec);
  compareExecution(newExecInfo("Cookie","auth-cookie",false,0,2,OPTIONAL,null,new String[]{ALTERNATIVE,DISABLED}),exec);
}
