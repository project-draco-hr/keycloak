{
  List<AuthenticationFlowRepresentation> flows=authMgmtResource.getFlows();
  for (  AuthenticationFlowRepresentation flow : flows) {
    try {
      authMgmtResource.deleteFlow(flow.getId());
      Assert.fail("deleteFlow should fail for built in flow");
    }
 catch (    BadRequestException e) {
      break;
    }
  }
  Response response=authMgmtResource.createFlow(newFlow("browser","Browser flow","basic-flow",true,false));
  try {
    Assert.assertEquals("createFlow using the alias of existing flow should fail",409,response.getStatus());
  }
  finally {
    response.close();
  }
  response=authMgmtResource.createFlow(newFlow(null,"Browser flow","basic-flow",true,false));
  try {
    Assert.assertEquals("createFlow using the alias of existing flow should fail",409,response.getStatus());
  }
  finally {
    response.close();
  }
  AuthenticationFlowRepresentation newFlow=newFlow("browser-2","Browser flow","basic-flow",true,false);
  createFlow(newFlow);
  flows=authMgmtResource.getFlows();
  AuthenticationFlowRepresentation found=findFlowByAlias("browser-2",flows);
  Assert.assertNotNull("created flow visible in parent",found);
  compareFlows(newFlow,found);
  try {
    authMgmtResource.getFlow("id-123-notExistent");
    Assert.fail("Not expected to find unexistent flow");
  }
 catch (  NotFoundException nfe) {
  }
  AuthenticationFlowRepresentation found2=authMgmtResource.getFlow(found.getId());
  Assert.assertNotNull("created flow visible directly",found2);
  compareFlows(newFlow,found2);
  Map<String,String> data=new HashMap<>();
  data.put("alias","SomeFlow");
  data.put("type","basic-flow");
  data.put("description","Test flow");
  data.put("provider","registration-page-form");
  try {
    authMgmtResource.addExecutionFlow("inexistent-parent-flow-alias",data);
    Assert.fail("addExecutionFlow for inexistent parent should have failed");
  }
 catch (  Exception expected) {
  }
  try {
    data.put("alias","browser");
    authMgmtResource.addExecutionFlow("browser-2",data);
    Assert.fail("addExecutionFlow should have failed as browser flow already exists");
  }
 catch (  Exception expected) {
  }
  data.put("alias","SomeFlow");
  authMgmtResource.addExecutionFlow("browser-2",data);
  assertAdminEvents.assertEvent(REALM_NAME,OperationType.CREATE,AdminEventPaths.authAddExecutionFlowPath("browser-2"),data);
  flows=authMgmtResource.getFlows();
  found2=findFlowByAlias("browser-2",flows);
  Assert.assertNotNull("created flow visible in parent",found2);
  List<AuthenticationExecutionExportRepresentation> execs=found2.getAuthenticationExecutions();
  Assert.assertNotNull(execs);
  Assert.assertEquals("Size one",1,execs.size());
  AuthenticationExecutionExportRepresentation expected=new AuthenticationExecutionExportRepresentation();
  expected.setFlowAlias("SomeFlow");
  expected.setUserSetupAllowed(false);
  expected.setAuthenticator("registration-page-form");
  expected.setAutheticatorFlow(true);
  expected.setRequirement("DISABLED");
  expected.setPriority(0);
  compareExecution(expected,execs.get(0));
  authMgmtResource.deleteFlow(found.getId());
  assertAdminEvents.assertEvent(REALM_NAME,OperationType.DELETE,AdminEventPaths.authFlowPath(found.getId()));
  flows=authMgmtResource.getFlows();
  found=findFlowByAlias("browser-2",flows);
  Assert.assertNull("flow deleted",found);
  try {
    authMgmtResource.deleteFlow("id-123-notExistent");
    Assert.fail("Not expected to delete flow, which doesn't exists");
  }
 catch (  NotFoundException nfe) {
  }
}
