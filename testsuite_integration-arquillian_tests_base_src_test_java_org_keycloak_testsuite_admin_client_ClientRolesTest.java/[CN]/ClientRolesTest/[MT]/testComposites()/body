{
  RoleRepresentation roleA=makeRole("role-a");
  rolesRsc.create(roleA);
  assertAdminEvents.assertEvent(getRealmId(),OperationType.CREATE,AdminEventPaths.clientRoleResourcePath(clientDbId,"role-a"),roleA);
  assertFalse(rolesRsc.get("role-a").toRepresentation().isComposite());
  assertEquals(0,rolesRsc.get("role-a").getRoleComposites().size());
  RoleRepresentation roleB=makeRole("role-b");
  rolesRsc.create(roleB);
  assertAdminEvents.assertEvent(getRealmId(),OperationType.CREATE,AdminEventPaths.clientRoleResourcePath(clientDbId,"role-b"),roleB);
  RoleRepresentation roleC=makeRole("role-c");
  testRealmResource().roles().create(roleC);
  assertAdminEvents.assertEvent(getRealmId(),OperationType.CREATE,AdminEventPaths.roleResourcePath("role-c"),roleC);
  List<RoleRepresentation> l=new LinkedList<>();
  l.add(rolesRsc.get("role-b").toRepresentation());
  l.add(testRealmResource().roles().get("role-c").toRepresentation());
  rolesRsc.get("role-a").addComposites(l);
  assertAdminEvents.assertEvent(getRealmId(),OperationType.CREATE,AdminEventPaths.clientRoleResourceCompositesPath(clientDbId,"role-a"),l);
  Set<RoleRepresentation> composites=rolesRsc.get("role-a").getRoleComposites();
  assertTrue(rolesRsc.get("role-a").toRepresentation().isComposite());
  Assert.assertNames(composites,"role-b","role-c");
  Set<RoleRepresentation> realmComposites=rolesRsc.get("role-a").getRealmRoleComposites();
  Assert.assertNames(realmComposites,"role-c");
  Set<RoleRepresentation> clientComposites=rolesRsc.get("role-a").getClientRoleComposites(clientRsc.toRepresentation().getId());
  Assert.assertNames(clientComposites,"role-b");
  rolesRsc.get("role-a").deleteComposites(l);
  assertAdminEvents.assertEvent(getRealmId(),OperationType.DELETE,AdminEventPaths.clientRoleResourceCompositesPath(clientDbId,"role-a"),l);
  assertFalse(rolesRsc.get("role-a").toRepresentation().isComposite());
  assertEquals(0,rolesRsc.get("role-a").getRoleComposites().size());
}
