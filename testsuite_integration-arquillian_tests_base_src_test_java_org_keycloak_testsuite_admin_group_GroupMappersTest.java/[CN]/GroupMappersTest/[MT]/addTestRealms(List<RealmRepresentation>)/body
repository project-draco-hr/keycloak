{
  RealmRepresentation testRealmRep=loadTestRealm(testRealms);
  testRealmRep.setEventsEnabled(true);
  ClientRepresentation client=getClientByAlias(testRealmRep,"test-app");
  Assert.assertNotNull("test-app client exists",client);
  client.setDirectAccessGrantsEnabled(true);
  List<ProtocolMapperRepresentation> mappers=new LinkedList<>();
  ProtocolMapperRepresentation mapper=new ProtocolMapperRepresentation();
  mapper.setName("groups");
  mapper.setProtocolMapper(GroupMembershipMapper.PROVIDER_ID);
  mapper.setProtocol(OIDCLoginProtocol.LOGIN_PROTOCOL);
  mapper.setConsentRequired(false);
  Map<String,String> config=new HashMap<>();
  config.put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME,"groups");
  config.put(OIDCAttributeMapperHelper.INCLUDE_IN_ACCESS_TOKEN,"true");
  config.put(OIDCAttributeMapperHelper.INCLUDE_IN_ID_TOKEN,"true");
  mapper.setConfig(config);
  mappers.add(mapper);
  mapper=new ProtocolMapperRepresentation();
  mapper.setName("topAttribute");
  mapper.setProtocolMapper(UserAttributeMapper.PROVIDER_ID);
  mapper.setProtocol(OIDCLoginProtocol.LOGIN_PROTOCOL);
  mapper.setConsentRequired(false);
  config=new HashMap<>();
  config.put(ProtocolMapperUtils.USER_ATTRIBUTE,"topAttribute");
  config.put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME,"topAttribute");
  config.put(OIDCAttributeMapperHelper.JSON_TYPE,ProviderConfigProperty.STRING_TYPE);
  config.put(OIDCAttributeMapperHelper.INCLUDE_IN_ACCESS_TOKEN,"true");
  config.put(OIDCAttributeMapperHelper.INCLUDE_IN_ID_TOKEN,"true");
  mapper.setConfig(config);
  mappers.add(mapper);
  mapper=new ProtocolMapperRepresentation();
  mapper.setName("level2Attribute");
  mapper.setProtocolMapper(UserAttributeMapper.PROVIDER_ID);
  mapper.setProtocol(OIDCLoginProtocol.LOGIN_PROTOCOL);
  mapper.setConsentRequired(false);
  config=new HashMap<>();
  config.put(ProtocolMapperUtils.USER_ATTRIBUTE,"level2Attribute");
  config.put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME,"level2Attribute");
  config.put(OIDCAttributeMapperHelper.JSON_TYPE,ProviderConfigProperty.STRING_TYPE);
  config.put(OIDCAttributeMapperHelper.INCLUDE_IN_ACCESS_TOKEN,"true");
  config.put(OIDCAttributeMapperHelper.INCLUDE_IN_ID_TOKEN,"true");
  mapper.setConfig(config);
  mappers.add(mapper);
  client.setProtocolMappers(mappers);
}
