{
  RealmResource realm=adminClient.realms().realm("test");
{
    RoleRepresentation groupRole=new RoleRepresentation();
    groupRole.setName("topRole");
    realm.roles().create(groupRole);
  }
  RoleRepresentation topRole=realm.roles().get("topRole").toRepresentation();
{
    RoleRepresentation groupRole=new RoleRepresentation();
    groupRole.setName("level2Role");
    realm.roles().create(groupRole);
  }
  RoleRepresentation level2Role=realm.roles().get("level2Role").toRepresentation();
{
    RoleRepresentation groupRole=new RoleRepresentation();
    groupRole.setName("level3Role");
    realm.roles().create(groupRole);
  }
  RoleRepresentation level3Role=realm.roles().get("level3Role").toRepresentation();
  assertAdminEvents.clear();
  GroupRepresentation topGroup=new GroupRepresentation();
  topGroup.setName("top");
  topGroup=createGroup(realm,topGroup);
  List<RoleRepresentation> roles=new LinkedList<>();
  roles.add(topRole);
  realm.groups().group(topGroup.getId()).roles().realmLevel().add(roles);
  assertAdminEvents.assertEvent("test",OperationType.CREATE,AdminEventPaths.groupRolesRealmRolesPath(topGroup.getId()),roles,ResourceType.REALM_ROLE_MAPPING);
  GroupRepresentation level2Group=new GroupRepresentation();
  level2Group.setName("level2");
  Response response=realm.groups().group(topGroup.getId()).subGroup(level2Group);
  response.close();
  assertAdminEvents.assertEvent("test",OperationType.CREATE,AdminEventPaths.groupSubgroupsPath(topGroup.getId()),level2Group,ResourceType.GROUP);
  URI location=response.getLocation();
  final String level2Id=ApiUtil.getCreatedId(response);
  final GroupRepresentation level2GroupById=realm.groups().group(level2Id).toRepresentation();
  assertEquals(level2Id,level2GroupById.getId());
  assertEquals(level2Group.getName(),level2GroupById.getName());
  URLAssert.assertGetURL(location,adminClient.tokenManager().getAccessTokenString(),new URLAssert.AssertJSONResponseHandler(){
    @Override protected void assertResponseBody(    String body) throws IOException {
      GroupRepresentation level2=JsonSerialization.readValue(body,GroupRepresentation.class);
      assertEquals(level2Id,level2.getId());
    }
  }
);
  level2Group=realm.getGroupByPath("/top/level2");
  Assert.assertNotNull(level2Group);
  roles.clear();
  roles.add(level2Role);
  realm.groups().group(level2Group.getId()).roles().realmLevel().add(roles);
  assertAdminEvents.assertEvent("test",OperationType.CREATE,AdminEventPaths.groupRolesRealmRolesPath(level2Group.getId()),roles,ResourceType.REALM_ROLE_MAPPING);
  GroupRepresentation level3Group=new GroupRepresentation();
  level3Group.setName("level3");
  response=realm.groups().group(level2Group.getId()).subGroup(level3Group);
  response.close();
  assertAdminEvents.assertEvent("test",OperationType.CREATE,AdminEventPaths.groupSubgroupsPath(level2Group.getId()),level3Group,ResourceType.GROUP);
  level3Group=realm.getGroupByPath("/top/level2/level3");
  Assert.assertNotNull(level3Group);
  roles.clear();
  roles.add(level3Role);
  realm.groups().group(level3Group.getId()).roles().realmLevel().add(roles);
  assertAdminEvents.assertEvent("test",OperationType.CREATE,AdminEventPaths.groupRolesRealmRolesPath(level3Group.getId()),roles,ResourceType.REALM_ROLE_MAPPING);
  topGroup=realm.getGroupByPath("/top");
  assertEquals(1,topGroup.getRealmRoles().size());
  assertTrue(topGroup.getRealmRoles().contains("topRole"));
  assertEquals(1,topGroup.getSubGroups().size());
  level2Group=topGroup.getSubGroups().get(0);
  assertEquals("level2",level2Group.getName());
  assertEquals(1,level2Group.getRealmRoles().size());
  assertTrue(level2Group.getRealmRoles().contains("level2Role"));
  assertEquals(1,level2Group.getSubGroups().size());
  level3Group=level2Group.getSubGroups().get(0);
  assertEquals("level3",level3Group.getName());
  assertEquals(1,level3Group.getRealmRoles().size());
  assertTrue(level3Group.getRealmRoles().contains("level3Role"));
  UserRepresentation user=realm.users().search("direct-login",-1,-1).get(0);
  realm.users().get(user.getId()).joinGroup(level3Group.getId());
  assertAdminEvents.assertEvent("test",OperationType.CREATE,AdminEventPaths.userGroupPath(user.getId(),level3Group.getId()),ResourceType.GROUP_MEMBERSHIP);
  List<GroupRepresentation> membership=realm.users().get(user.getId()).groups();
  assertEquals(1,membership.size());
  assertEquals("level3",membership.get(0).getName());
  AccessToken token=login("direct-login","resource-owner","secret",user.getId());
  assertTrue(token.getRealmAccess().getRoles().contains("topRole"));
  assertTrue(token.getRealmAccess().getRoles().contains("level2Role"));
  assertTrue(token.getRealmAccess().getRoles().contains("level3Role"));
  realm.addDefaultGroup(level3Group.getId());
  assertAdminEvents.assertEvent("test",OperationType.CREATE,AdminEventPaths.defaultGroupPath(level3Group.getId()),ResourceType.GROUP);
  List<GroupRepresentation> defaultGroups=realm.getDefaultGroups();
  assertEquals(1,defaultGroups.size());
  assertEquals(defaultGroups.get(0).getId(),level3Group.getId());
  UserRepresentation newUser=new UserRepresentation();
  newUser.setUsername("groupUser");
  newUser.setEmail("group@group.com");
  response=realm.users().create(newUser);
  String userId=ApiUtil.getCreatedId(response);
  response.close();
  assertAdminEvents.assertEvent("test",OperationType.CREATE,AdminEventPaths.userResourcePath(userId),newUser,ResourceType.USER);
  membership=realm.users().get(userId).groups();
  assertEquals(1,membership.size());
  assertEquals("level3",membership.get(0).getName());
  realm.removeDefaultGroup(level3Group.getId());
  assertAdminEvents.assertEvent("test",OperationType.DELETE,AdminEventPaths.defaultGroupPath(level3Group.getId()),ResourceType.GROUP);
  defaultGroups=realm.getDefaultGroups();
  assertEquals(0,defaultGroups.size());
  realm.groups().group(topGroup.getId()).remove();
  assertAdminEvents.assertEvent("test",OperationType.DELETE,AdminEventPaths.groupPath(topGroup.getId()),ResourceType.GROUP);
  try {
    realm.getGroupByPath("/top/level2/level3");
    Assert.fail("Group should not have been found");
  }
 catch (  NotFoundException e) {
  }
  try {
    realm.getGroupByPath("/top/level2");
    Assert.fail("Group should not have been found");
  }
 catch (  NotFoundException e) {
  }
  try {
    realm.getGroupByPath("/top");
    Assert.fail("Group should not have been found");
  }
 catch (  NotFoundException e) {
  }
  Assert.assertNull(login("direct-login","resource-owner","secret",user.getId()).getRealmAccess());
}
