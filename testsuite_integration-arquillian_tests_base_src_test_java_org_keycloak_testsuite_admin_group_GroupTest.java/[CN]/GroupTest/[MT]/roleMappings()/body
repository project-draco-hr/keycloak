{
  RealmResource realm=adminClient.realms().realm("test");
  realm.roles().create(RoleBuilder.create().name("realm-role").build());
  realm.roles().create(RoleBuilder.create().name("realm-composite").build());
  realm.roles().create(RoleBuilder.create().name("realm-child").build());
  realm.roles().get("realm-composite").addComposites(Collections.singletonList(realm.roles().get("realm-child").toRepresentation()));
  Response response=realm.clients().create(ClientBuilder.create().clientId("myclient").build());
  String clientId=ApiUtil.getCreatedId(response);
  response.close();
  realm.clients().get(clientId).roles().create(RoleBuilder.create().name("client-role").build());
  realm.clients().get(clientId).roles().create(RoleBuilder.create().name("client-role2").build());
  realm.clients().get(clientId).roles().create(RoleBuilder.create().name("client-composite").build());
  realm.clients().get(clientId).roles().create(RoleBuilder.create().name("client-child").build());
  realm.clients().get(clientId).roles().get("client-composite").addComposites(Collections.singletonList(realm.clients().get(clientId).roles().get("client-child").toRepresentation()));
  assertAdminEvents.clear();
  GroupRepresentation group=new GroupRepresentation();
  group.setName("group");
  String groupId=createGroup(realm,group).getId();
  RoleMappingResource roles=realm.groups().group(groupId).roles();
  assertEquals(0,roles.realmLevel().listAll().size());
  List<RoleRepresentation> l=new LinkedList<>();
  l.add(realm.roles().get("realm-role").toRepresentation());
  l.add(realm.roles().get("realm-composite").toRepresentation());
  roles.realmLevel().add(l);
  assertAdminEvents.assertEvent("test",OperationType.CREATE,Matchers.startsWith(AdminEventPaths.groupRolesRealmRolesPath(group.getId())));
  assertAdminEvents.assertEvent("test",OperationType.CREATE,Matchers.startsWith(AdminEventPaths.groupRolesRealmRolesPath(group.getId())));
  roles.clientLevel(clientId).add(Collections.singletonList(realm.clients().get(clientId).roles().get("client-role").toRepresentation()));
  roles.clientLevel(clientId).add(Collections.singletonList(realm.clients().get(clientId).roles().get("client-composite").toRepresentation()));
  assertAdminEvents.assertEvent("test",OperationType.CREATE,AdminEventPaths.groupRolesClientRolesPath(group.getId(),clientId));
  assertAdminEvents.assertEvent("test",OperationType.CREATE,AdminEventPaths.groupRolesClientRolesPath(group.getId(),clientId));
  assertNames(roles.realmLevel().listAll(),"realm-role","realm-composite");
  assertNames(roles.realmLevel().listAvailable(),"admin","offline_access","user");
  assertNames(roles.realmLevel().listEffective(),"realm-role","realm-composite","realm-child");
  assertNames(roles.clientLevel(clientId).listAll(),"client-role","client-composite");
  assertNames(roles.clientLevel(clientId).listAvailable(),"client-role2");
  assertNames(roles.clientLevel(clientId).listEffective(),"client-role","client-composite","client-child");
  MappingsRepresentation all=roles.getAll();
  assertNames(all.getRealmMappings(),"realm-role","realm-composite");
  assertEquals(1,all.getClientMappings().size());
  assertNames(all.getClientMappings().get("myclient").getMappings(),"client-role","client-composite");
  RoleRepresentation realmRoleRep=realm.roles().get("realm-role").toRepresentation();
  roles.realmLevel().remove(Collections.singletonList(realmRoleRep));
  assertAdminEvents.assertEvent("test",OperationType.DELETE,AdminEventPaths.groupRolesRealmRolesPath(group.getId()) + "/" + realmRoleRep.getId());
  assertNames(roles.realmLevel().listAll(),"realm-composite");
  RoleRepresentation clientRoleRep=realm.clients().get(clientId).roles().get("client-role").toRepresentation();
  roles.clientLevel(clientId).remove(Collections.singletonList(clientRoleRep));
  assertAdminEvents.assertEvent("test",OperationType.DELETE,AdminEventPaths.groupRolesClientRolesPath(group.getId(),clientId));
  assertNames(roles.clientLevel(clientId).listAll(),"client-composite");
}
