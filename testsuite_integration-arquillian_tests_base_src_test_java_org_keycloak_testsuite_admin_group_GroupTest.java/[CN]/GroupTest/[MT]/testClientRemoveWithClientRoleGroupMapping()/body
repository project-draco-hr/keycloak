{
  RealmResource realm=adminClient.realms().realm("test");
  ClientRepresentation client=new ClientRepresentation();
  client.setClientId("foo");
  client.setRootUrl("http://foo");
  client.setProtocol("openid-connect");
  Response response=realm.clients().create(client);
  response.close();
  String clientUuid=ApiUtil.getCreatedId(response);
  assertAdminEvents.assertEvent("test",OperationType.CREATE,AdminEventPaths.clientResourcePath(clientUuid),client);
  client=realm.clients().findByClientId("foo").get(0);
  RoleRepresentation role=new RoleRepresentation();
  role.setName("foo-role");
  realm.clients().get(client.getId()).roles().create(role);
  assertAdminEvents.assertEvent("test",OperationType.CREATE,AdminEventPaths.clientRoleResourcePath(clientUuid,"foo-role"),role);
  role=realm.clients().get(client.getId()).roles().get("foo-role").toRepresentation();
  GroupRepresentation group=new GroupRepresentation();
  group.setName("2716");
  group=createGroup(realm,group);
  List<RoleRepresentation> list=new LinkedList<>();
  list.add(role);
  realm.groups().group(group.getId()).roles().clientLevel(client.getId()).add(list);
  assertAdminEvents.assertEvent("test",OperationType.CREATE,AdminEventPaths.groupRolesClientRolesPath(group.getId(),clientUuid),list);
  realm.clients().get(client.getId()).remove();
  assertAdminEvents.assertEvent("test",OperationType.DELETE,AdminEventPaths.clientResourcePath(clientUuid));
}
