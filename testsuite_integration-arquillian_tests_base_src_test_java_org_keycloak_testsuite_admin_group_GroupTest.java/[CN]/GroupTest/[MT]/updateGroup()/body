{
  RealmResource realm=adminClient.realms().realm("test");
  final String groupName="group-" + UUID.randomUUID();
  GroupRepresentation group=GroupBuilder.create().name(groupName).singleAttribute("attr1","attrval1").singleAttribute("attr2","attrval2").build();
  createGroup(realm,group);
  group=realm.getGroupByPath("/" + groupName);
  Assert.assertNotNull(group);
  assertThat(group.getName(),is(groupName));
  assertThat(group.getAttributes().keySet(),containsInAnyOrder("attr1","attr2"));
  assertThat(group.getAttributes(),hasEntry(is("attr1"),contains("attrval1")));
  assertThat(group.getAttributes(),hasEntry(is("attr2"),contains("attrval2")));
  final String groupNewName="group-" + UUID.randomUUID();
  group.setName(groupNewName);
  group.getAttributes().remove("attr1");
  group.getAttributes().get("attr2").add("attrval2-2");
  group.getAttributes().put("attr3",Collections.singletonList("attrval2"));
  realm.groups().group(group.getId()).update(group);
  assertAdminEvents.assertEvent("test",OperationType.UPDATE,AdminEventPaths.groupPath(group.getId()),group,ResourceType.GROUP);
  group=realm.getGroupByPath("/" + groupNewName);
  assertThat(group.getName(),is(groupNewName));
  assertThat(group.getAttributes().keySet(),containsInAnyOrder("attr2","attr3"));
  assertThat(group.getAttributes(),hasEntry(is("attr2"),containsInAnyOrder("attrval2","attrval2-2")));
  assertThat(group.getAttributes(),hasEntry(is("attr3"),contains("attrval2")));
}
