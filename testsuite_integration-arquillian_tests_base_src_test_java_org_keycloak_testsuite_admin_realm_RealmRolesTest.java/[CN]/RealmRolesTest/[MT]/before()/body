{
  RoleRepresentation roleA=RoleBuilder.create().name("role-a").description("Role A").build();
  RoleRepresentation roleB=RoleBuilder.create().name("role-b").description("Role B").build();
  adminClient.realm(REALM_NAME).roles().create(roleA);
  adminClient.realm(REALM_NAME).roles().create(roleB);
  ClientRepresentation clientRep=ClientBuilder.create().clientId("client-a").build();
  Response response=adminClient.realm(REALM_NAME).clients().create(clientRep);
  clientUuid=ApiUtil.getCreatedId(response);
  RoleRepresentation roleC=RoleBuilder.create().name("role-c").description("Role C").build();
  adminClient.realm(REALM_NAME).clients().get(clientUuid).roles().create(roleC);
  for (  RoleRepresentation r : adminClient.realm(REALM_NAME).roles().list()) {
    ids.put(r.getName(),r.getId());
  }
  for (  RoleRepresentation r : adminClient.realm(REALM_NAME).clients().get(clientUuid).roles().list()) {
    ids.put(r.getName(),r.getId());
  }
  resource=adminClient.realm(REALM_NAME).roles();
  assertAdminEvents.assertEvent(realmId,OperationType.CREATE,AdminEventPaths.roleResourcePath("role-a"),roleA);
  assertAdminEvents.assertEvent(realmId,OperationType.CREATE,AdminEventPaths.roleResourcePath("role-b"),roleB);
  assertAdminEvents.assertEvent(realmId,OperationType.CREATE,AdminEventPaths.clientResourcePath(clientUuid),clientRep);
  assertAdminEvents.assertEvent(realmId,OperationType.CREATE,AdminEventPaths.clientRoleResourcePath(clientUuid,"role-c"),roleC);
}
