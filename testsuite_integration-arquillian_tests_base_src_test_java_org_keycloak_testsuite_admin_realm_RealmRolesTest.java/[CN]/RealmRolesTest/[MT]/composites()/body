{
  assertFalse(resource.get("role-a").toRepresentation().isComposite());
  assertEquals(0,resource.get("role-a").getRoleComposites().size());
  List<RoleRepresentation> l=new LinkedList<>();
  l.add(RoleBuilder.create().id(ids.get("role-b")).build());
  l.add(RoleBuilder.create().id(ids.get("role-c")).build());
  resource.get("role-a").addComposites(l);
  Set<RoleRepresentation> composites=resource.get("role-a").getRoleComposites();
  assertTrue(resource.get("role-a").toRepresentation().isComposite());
  Assert.assertNames(composites,"role-b","role-c");
  Set<RoleRepresentation> realmComposites=resource.get("role-a").getRealmRoleComposites();
  Assert.assertNames(realmComposites,"role-b");
  Set<RoleRepresentation> clientComposites=resource.get("role-a").getClientRoleComposites(clientUuid);
  Assert.assertNames(clientComposites,"role-c");
  resource.get("role-a").deleteComposites(l);
  assertFalse(resource.get("role-a").toRepresentation().isComposite());
  assertEquals(0,resource.get("role-a").getRoleComposites().size());
}
