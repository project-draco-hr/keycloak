{
  ClientRepresentation client=new ClientRepresentation();
  client.setClientId(getAuthRoot() + "/auth/realms/" + REALM_CONS_NAME);
  client.setEnabled(true);
  client.setProtocol(IDP_SAML_PROVIDER_ID);
  client.setRedirectUris(Collections.singletonList(getAuthRoot() + "/auth/realms/" + REALM_CONS_NAME+ "/broker/"+ IDP_SAML_ALIAS+ "/endpoint"));
  Map<String,String> attributes=new HashMap<>();
  attributes.put("saml.authnstatement","true");
  attributes.put("saml_single_logout_service_url_post",getAuthRoot() + "/auth/realms/" + REALM_CONS_NAME+ "/broker/"+ IDP_SAML_ALIAS+ "/endpoint");
  attributes.put("saml_assertion_consumer_url_post",getAuthRoot() + "/auth/realms/" + REALM_CONS_NAME+ "/broker/"+ IDP_SAML_ALIAS+ "/endpoint");
  attributes.put("saml_force_name_id_format","true");
  attributes.put("saml_name_id_format","username");
  attributes.put("saml.assertion.signature","false");
  attributes.put("saml.server.signature","false");
  attributes.put("saml.client.signature","false");
  attributes.put("saml.encrypt","false");
  client.setAttributes(attributes);
  ProtocolMapperRepresentation mapper=new ProtocolMapperRepresentation();
  mapper.setName("email");
  mapper.setProtocol("saml");
  mapper.setProtocolMapper("saml-user-property-mapper");
  mapper.setConsentRequired(false);
  Map<String,String> mapperConfig=mapper.getConfig();
  mapperConfig.put("user.attribute","email");
  mapperConfig.put("attribute.name","urn:oid:1.2.840.113549.1.9.1");
  mapperConfig.put("attribute.nameformat","urn:oasis:names:tc:SAML:2.0:attrname-format:uri");
  mapperConfig.put("friendly.name","email");
  client.setProtocolMappers(Collections.singletonList(mapper));
  return Collections.singletonList(client);
}
