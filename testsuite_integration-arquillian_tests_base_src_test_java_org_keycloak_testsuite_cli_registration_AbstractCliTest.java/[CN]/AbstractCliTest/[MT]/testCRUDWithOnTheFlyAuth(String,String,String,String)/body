{
  File configFile=getDefaultConfigFilePath();
  long lastModified=configFile.exists() ? configFile.lastModified() : 0;
  KcRegExec exe=execute("create --no-config --server " + serverUrl + " --realm test "+ credentials+ " "+ extraOptions+ " -s clientId=test-client -o");
  Assert.assertEquals("exitCode == 0",0,exe.exitCode());
  Assert.assertEquals("login message",loginMessage,exe.stderrLines().get(0));
  ClientRepresentation client=JsonSerialization.readValue(exe.stdout(),ClientRepresentation.class);
  Assert.assertEquals("clientId","test-client",client.getClientId());
  Assert.assertNotNull("registrationAccessToken not null",client.getRegistrationAccessToken());
  long lastModified2=configFile.exists() ? configFile.lastModified() : 0;
  Assert.assertEquals("config file not modified",lastModified,lastModified2);
  exe=execute("get test-client --no-config --server " + serverUrl + " --realm test "+ credentials+ " "+ extraOptions);
  Assert.assertEquals("exitCode == 0",0,exe.exitCode());
  ClientRepresentation client2=JsonSerialization.readValue(exe.stdout(),ClientRepresentation.class);
  Assert.assertEquals("clientId","test-client",client2.getClientId());
  Assert.assertNull("registrationAccessToken is null",client2.getRegistrationAccessToken());
  lastModified2=configFile.exists() ? configFile.lastModified() : 0;
  Assert.assertEquals("config file not modified",lastModified,lastModified2);
  exe=execute("get test-client --no-config --server " + serverUrl + " --realm test "+ extraOptions+ " -t "+ client.getRegistrationAccessToken());
  Assert.assertEquals("exitCode == 0",0,exe.exitCode());
  ClientRepresentation client3=JsonSerialization.readValue(exe.stdout(),ClientRepresentation.class);
  Assert.assertEquals("clientId","test-client",client3.getClientId());
  Assert.assertNotEquals("registrationAccessToken in returned json is different than one returned by create",client.getRegistrationAccessToken(),client3.getRegistrationAccessToken());
  lastModified2=configFile.exists() ? configFile.lastModified() : 0;
  Assert.assertEquals("config file not modified",lastModified,lastModified2);
  exe=execute("update test-client --no-config --server " + serverUrl + " --realm test "+ credentials+ " "+ extraOptions+ " -s enabled=false -o --unsafe");
  Assert.assertEquals("exitCode == 0",0,exe.exitCode());
  ClientRepresentation client4=JsonSerialization.readValue(exe.stdout(),ClientRepresentation.class);
  Assert.assertEquals("clientId","test-client",client4.getClientId());
  Assert.assertFalse("enabled",client4.isEnabled());
  Assert.assertNull("registrationAccessToken in null",client4.getRegistrationAccessToken());
  lastModified2=configFile.exists() ? configFile.lastModified() : 0;
  Assert.assertEquals("config file not modified",lastModified,lastModified2);
  exe=execute("update test-client --no-config --server " + serverUrl + " --realm test "+ extraOptions+ " -s enabled=true -o -t "+ client3.getRegistrationAccessToken());
  Assert.assertEquals("exitCode == 0",0,exe.exitCode());
  ClientRepresentation client5=JsonSerialization.readValue(exe.stdout(),ClientRepresentation.class);
  Assert.assertEquals("clientId","test-client",client5.getClientId());
  Assert.assertTrue("enabled",client5.isEnabled());
  Assert.assertNotEquals("registrationAccessToken in returned json is different than one returned by get",client3.getRegistrationAccessToken(),client5.getRegistrationAccessToken());
  lastModified2=configFile.exists() ? configFile.lastModified() : 0;
  Assert.assertEquals("config file not modified",lastModified,lastModified2);
  exe=execute("delete test-client --no-config --server " + serverUrl + " --realm test "+ credentials+ " "+ extraOptions);
  assertExitCodeAndStreamSizes(exe,0,0,1);
  lastModified2=configFile.exists() ? configFile.lastModified() : 0;
  Assert.assertEquals("config file not modified",lastModified,lastModified2);
  exe=execute("delete test-client --no-config --server " + serverUrl + " --realm test "+ credentials+ " "+ extraOptions);
  assertExitCodeAndStreamSizes(exe,1,0,2);
  Assert.assertEquals("error message","Client not found [invalid_request]",exe.stderrLines().get(1));
  lastModified2=configFile.exists() ? configFile.lastModified() : 0;
  Assert.assertEquals("config file not modified",lastModified,lastModified2);
}
