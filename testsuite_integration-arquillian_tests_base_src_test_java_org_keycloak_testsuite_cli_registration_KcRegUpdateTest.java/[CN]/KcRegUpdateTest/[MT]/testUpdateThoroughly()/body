{
  FileConfigHandler handler=initCustomConfigFile();
  try (TempFileResource configFile=new TempFileResource(handler.getConfigFile())){
    final String realm="test";
    loginAsUser(configFile.getFile(),serverUrl,realm,"user1","userpass");
    KcRegExec exe=execute("create --config '" + configFile.getName() + "' -o -s clientId=my_client");
    assertExitCodeAndStdErrSize(exe,0,0);
    ClientRepresentation client=JsonSerialization.readValue(exe.stdout(),ClientRepresentation.class);
    Assert.assertEquals("enabled",true,client.isEnabled());
    Assert.assertEquals("publicClient",false,client.isPublicClient());
    Assert.assertEquals("bearerOnly",false,client.isBearerOnly());
    Assert.assertTrue("redirectUris is empty",client.getRedirectUris().isEmpty());
    exe=execute("update my_client --config '" + configFile.getName() + "' -o "+ " -s enabled=false -s 'redirectUris=[\"http://localhost:8980/myapp/*\"]'");
    assertExitCodeAndStdErrSize(exe,0,0);
    client=JsonSerialization.readValue(exe.stdout(),ClientRepresentation.class);
    Assert.assertEquals("enabled",false,client.isEnabled());
    Assert.assertEquals("redirectUris",Arrays.asList("http://localhost:8980/myapp/*"),client.getRedirectUris());
    exe=execute("update my_client --config '" + configFile.getName() + "' -o -d redirectUris -s webOrigins+=http://localhost:8980/myapp -s webOrigins+=http://localhost:8981/myapp -d webOrigins[0]");
    assertExitCodeAndStdErrSize(exe,0,0);
    client=JsonSerialization.readValue(exe.stdout(),ClientRepresentation.class);
    Assert.assertTrue("redirectUris is empty",client.getRedirectUris().isEmpty());
    Assert.assertEquals("webOrigins",Arrays.asList("http://localhost:8981/myapp"),client.getWebOrigins());
    exe=execute("update my_client --nonexisting --config '" + configFile.getName() + "'");
    assertExitCodeAndStreamSizes(exe,1,0,1);
    Assert.assertEquals("error message","Unsupported option: --nonexisting",exe.stderrLines().get(0));
    exe=execute("update my_client --config '" + configFile.getName() + "' -o -s enabled=true -e oidc");
    assertExitCodeAndStreamSizes(exe,1,0,1);
    Assert.assertEquals("error message","Failed to set attribute 'enabled' on document type 'oidc'",exe.stderrLines().get(0));
    exe=KcRegExec.newBuilder().argsLine("update my_client --config '" + configFile.getName() + "' -o  -s clientId=my_client -s 'redirectUris=[\"http://localhost:8980/myapp/*\"]' -f -").stdin(new ByteArrayInputStream("{ \"enabled\": false }".getBytes())).execute();
    assertExitCodeAndStdErrSize(exe,0,0);
    client=JsonSerialization.readValue(exe.stdout(),ClientRepresentation.class);
    Assert.assertEquals("webOrigins",Arrays.asList("http://localhost:8981/myapp"),client.getWebOrigins());
    Assert.assertFalse("enabled is false",client.isEnabled());
    Assert.assertEquals("redirectUris",Arrays.asList("http://localhost:8980/myapp/*"),client.getRedirectUris());
    exe=KcRegExec.newBuilder().argsLine("update my_client --config '" + configFile.getName() + "' -o -s enabled=true -m -f -").stdin(new ByteArrayInputStream("{ \"webOrigins\": [\"http://localhost:8980/myapp\"] }".getBytes())).execute();
    assertExitCodeAndStdErrSize(exe,0,0);
    client=JsonSerialization.readValue(exe.stdout(),ClientRepresentation.class);
    Assert.assertEquals("webOrigins",Arrays.asList("http://localhost:8980/myapp"),client.getWebOrigins());
    Assert.assertTrue("enabled is true",client.isEnabled());
    Assert.assertEquals("redirectUris",Arrays.asList("http://localhost:8980/myapp/*"),client.getRedirectUris());
    exe=execute("config registration-token --config '" + configFile.getName() + "' --server "+ serverUrl+ " --realm "+ realm+ " --client my_client -d");
    assertExitCodeAndStdErrSize(exe,0,0);
    Assert.assertNull("my_client registration token",handler.loadConfig().ensureRealmConfigData(serverUrl,realm).getClients().get("my_client"));
  }
 }
