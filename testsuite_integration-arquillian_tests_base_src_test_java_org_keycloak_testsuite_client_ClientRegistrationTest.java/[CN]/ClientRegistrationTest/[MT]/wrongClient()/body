{
  registerClient(clientRegistrationAsAdmin);
  ClientRepresentation client=new ClientRepresentation();
  client.setClientId("test-client-2");
  client.setSecret("test-client-2-secret");
  clientRegistrationAsAdmin.create(client);
  ClientRegistration clientRegistration=clientBuilder().auth("test-client-2","test-client-2-secret").build();
  client=clientRegistration.get("test-client-2");
  assertNotNull(client);
  assertEquals("test-client-2",client.getClientId());
  try {
    try {
      clientRegistration.get(CLIENT_ID);
      fail("Expected 403");
    }
 catch (    ClientRegistrationException e) {
      assertEquals(403,((HttpErrorException)e.getCause()).getStatusLine().getStatusCode());
    }
    client=clientRegistrationAsAdmin.get(CLIENT_ID);
    try {
      clientRegistration.update(client);
      fail("Expected 403");
    }
 catch (    ClientRegistrationException e) {
      assertEquals(403,((HttpErrorException)e.getCause()).getStatusLine().getStatusCode());
    }
    try {
      clientRegistration.delete(CLIENT_ID);
      fail("Expected 403");
    }
 catch (    ClientRegistrationException e) {
      assertEquals(403,((HttpErrorException)e.getCause()).getStatusLine().getStatusCode());
    }
  }
  finally {
    clientRegistration.close();
  }
}
