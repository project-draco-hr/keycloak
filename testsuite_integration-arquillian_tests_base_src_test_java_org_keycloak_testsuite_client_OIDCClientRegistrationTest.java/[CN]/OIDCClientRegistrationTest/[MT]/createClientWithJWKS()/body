{
  OIDCClientRepresentation clientRep=createRep();
  clientRep.setGrantTypes(Collections.singletonList(OAuth2Constants.CLIENT_CREDENTIALS));
  clientRep.setTokenEndpointAuthMethod(OIDCLoginProtocol.PRIVATE_KEY_JWT);
  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();
  Map<String,String> generatedKeys=oidcClientEndpointsResource.generateKeys();
  JSONWebKeySet keySet=oidcClientEndpointsResource.getJwks();
  clientRep.setJwks(keySet);
  OIDCClientRepresentation response=reg.oidc().create(clientRep);
  Assert.assertEquals(OIDCLoginProtocol.PRIVATE_KEY_JWT,response.getTokenEndpointAuthMethod());
  Assert.assertNull(response.getClientSecret());
  Assert.assertNull(response.getClientSecretExpiresAt());
  String signedJwt=getClientSignedJWT(response.getClientId(),generatedKeys.get(TestingOIDCEndpointsApplicationResource.PRIVATE_KEY));
  OAuthClient.AccessTokenResponse accessTokenResponse=doClientCredentialsGrantRequest(signedJwt);
  Assert.assertEquals(200,accessTokenResponse.getStatusCode());
  AccessToken accessToken=oauth.verifyToken(accessTokenResponse.getAccessToken());
  Assert.assertEquals(response.getClientId(),accessToken.getAudience()[0]);
}
