{
  clientMappersPage.mapperTable().createMapper();
  setInitialValues("hardcoded role",true,"Consent Text");
  createClientMappersPage.form().setMapperType(HARDCODED_ROLE);
  createClientMappersPage.form().selectRole(REALM_ROLE,"offline_access",null);
  createClientMappersPage.form().save();
  assertFlashMessageSuccess();
  ProtocolMapperRepresentation found=findClientMapperByName(id,"hardcoded role");
  assertNotNull(found);
  assertTrue(found.isConsentRequired());
  assertEquals("Consent Text",found.getConsentText());
  assertEquals("oidc-hardcoded-role-mapper",found.getProtocolMapper());
  Map<String,String> config=found.getConfig();
  assertEquals(1,config.size());
  assertEquals("offline_access",config.get("role"));
  createClientMappersPage.form().selectRole(CLIENT_ROLE,"view-profile","account");
  createClientMappersPage.form().save();
  assertFlashMessageSuccess();
  config=findClientMapperByName(id,"hardcoded role").getConfig();
  assertEquals("account.view-profile",config.get("role"));
  clientMapperPage.setMapperId(found.getId());
  clientMapperPage.delete();
  assertFlashMessageSuccess();
  assertNull(findClientMapperByName(id,"hardcoded role"));
}
