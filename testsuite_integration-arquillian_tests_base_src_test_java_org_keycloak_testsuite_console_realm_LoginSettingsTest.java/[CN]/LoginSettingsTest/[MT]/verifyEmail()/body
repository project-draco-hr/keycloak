{
  MailServer.start();
  MailServer.createEmailAccount(testUser.getEmail(),"password");
  log.info("enabling verify email in login settings");
  loginSettingsPage.form().setVerifyEmailAllowed(true);
  assertTrue(loginSettingsPage.form().isVerifyEmailAllowed());
  loginSettingsPage.form().save();
  assertAlertSuccess();
  log.debug("enabled");
  log.info("configure smtp server in test realm");
  RealmRepresentation testRealmRep=testRealmResource().toRepresentation();
  testRealmRep.setSmtpServer(suiteContext.getSmtpServer());
  testRealmResource().update(testRealmRep);
  testAccountPage.navigateTo();
  testRealmLoginPage.form().login(testUser);
  Assert.assertEquals("An email with instructions to verify your email address has been sent to you.",testRealmVerifyEmailPage.getInstructionMessage());
  log.info("verified verify email is enabled");
  log.info("disabling verify email");
  loginSettingsPage.navigateTo();
  loginSettingsPage.form().setVerifyEmailAllowed(false);
  assertFalse(loginSettingsPage.form().isVerifyEmailAllowed());
  loginSettingsPage.form().save();
  assertAlertSuccess();
  log.debug("disabled");
  log.debug("create new test user");
  UserRepresentation newUser=createUserRepresentation("new_user","new_user@email.test","new","user",true);
  setPasswordFor(newUser,PASSWORD);
  String id=createUserAndResetPasswordWithAdminClient(testRealmResource(),newUser,PASSWORD);
  newUser.setId(id);
  log.info("log in as new user");
  testAccountPage.navigateTo();
  testRealmLoginPage.form().login(newUser);
  testAccountPage.waitForAccountLinkPresent();
  log.info("verified verify email is disabled");
  MailServer.stop();
}
