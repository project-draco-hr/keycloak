{
  Assert.assertTrue(realm.isVerifyEmail());
  Assert.assertEquals((Integer)3600000,realm.getOfflineSessionIdleTimeout());
  Assert.assertEquals((Integer)1500,realm.getAccessTokenLifespanForImplicitFlow());
  Set<String> creds=realm.getRequiredCredentials();
  Assert.assertEquals(1,creds.size());
  String cred=(String)creds.iterator().next();
  Assert.assertEquals("password",cred);
  Assert.assertEquals(4,realm.getDefaultRoles().size());
  Assert.assertNotNull(RealmRepUtil.findDefaultRole(realm,"foo"));
  Assert.assertNotNull(RealmRepUtil.findDefaultRole(realm,"bar"));
  RealmResource realmRsc=adminClient.realm(realm.getRealm());
  UserRepresentation user=findByUsername(realmRsc,"loginclient");
  Assert.assertNotNull(user);
  UserResource userRsc=realmRsc.users().get(user.getId());
  Assert.assertEquals(0,userRsc.getFederatedIdentity().size());
  List<ClientRepresentation> resources=realmRsc.clients().findAll();
  Assert.assertEquals(8,resources.size());
  ClientRepresentation application=ApiUtil.findClientByClientId(realmRsc,"Application").toRepresentation();
  ClientRepresentation otherApp=ApiUtil.findClientByClientId(realmRsc,"OtherApp").toRepresentation();
  ClientRepresentation accountApp=ApiUtil.findClientByClientId(realmRsc,Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).toRepresentation();
  ClientResource nonExisting=ApiUtil.findClientByClientId(realmRsc,"NonExisting");
  Assert.assertNotNull(application);
  Assert.assertNotNull(otherApp);
  Assert.assertNull(nonExisting);
  List<ClientRepresentation> clients=realmRsc.clients().findAll();
  Assert.assertEquals(8,clients.size());
  Assert.assertTrue(hasClient(clients,application));
  Assert.assertTrue(hasClient(clients,otherApp));
  Assert.assertTrue(hasClient(clients,accountApp));
  Assert.assertEquals("Applicationn",application.getName());
  Assert.assertEquals((Integer)50,application.getNodeReRegistrationTimeout());
  Map<String,Integer> appRegisteredNodes=application.getRegisteredNodes();
  Assert.assertEquals(2,appRegisteredNodes.size());
  Assert.assertTrue(10 == appRegisteredNodes.get("node1"));
  Assert.assertTrue(20 == appRegisteredNodes.get("172.10.15.20"));
  Assert.assertEquals("client-secret",application.getClientAuthenticatorType());
  Assert.assertEquals("client-jwt",otherApp.getClientAuthenticatorType());
  Assert.assertNull(ApiUtil.findClientResourceById(realmRsc,"982734"));
  Assert.assertEquals(application.getId(),ApiUtil.findClientResourceById(realmRsc,application.getId()).toRepresentation().getId());
  UserRepresentation admin=findByUsername(realmRsc,"admin");
  Assert.assertNull(admin.getCreatedTimestamp());
  Set<RoleRepresentation> allRoles=allRoles(realmRsc,admin);
  Assert.assertEquals(3,allRoles.size());
  Assert.assertTrue(containsRole(allRoles,findRealmRole(realmRsc,"admin")));
  Assert.assertTrue(containsRole(allRoles,findClientRole(realmRsc,application.getId(),"app-admin")));
  Assert.assertTrue(containsRole(allRoles,findClientRole(realmRsc,otherApp.getId(),"otherapp-admin")));
  Assert.assertTrue(findClientRole(realmRsc,application.getId(),"app-admin").isScopeParamRequired());
  Assert.assertFalse(findClientRole(realmRsc,otherApp.getId(),"otherapp-admin").isScopeParamRequired());
  Assert.assertFalse(findClientRole(realmRsc,otherApp.getId(),"otherapp-user").isScopeParamRequired());
  UserRepresentation wburke=findByUsername(realmRsc,"wburke");
  Assert.assertEquals(new Long(123654),wburke.getCreatedTimestamp());
  allRoles=allRoles(realmRsc,wburke);
  Assert.assertEquals(2,allRoles.size());
  Assert.assertFalse(containsRole(allRoles,findRealmRole(realmRsc,"admin")));
  Assert.assertTrue(containsRole(allRoles,findClientRole(realmRsc,application.getId(),"app-user")));
  Assert.assertTrue(containsRole(allRoles,findClientRole(realmRsc,otherApp.getId(),"otherapp-user")));
  Assert.assertNull(realmRsc.users().get(wburke.getId()).roles().getAll().getRealmMappings());
  UserRepresentation loginclient=findByUsername(realmRsc,"loginclient");
  Assert.assertEquals(new Long(123655),loginclient.getCreatedTimestamp());
  List<RoleRepresentation> realmRoles=realmRolesForUser(realmRsc,admin);
  Assert.assertEquals(1,realmRoles.size());
  Assert.assertEquals("admin",realmRoles.iterator().next().getName());
  List<RoleRepresentation> appRoles=clientRolesForUser(realmRsc,application,admin);
  Assert.assertEquals(1,appRoles.size());
  Assert.assertEquals("app-admin",appRoles.iterator().next().getName());
  Map<String,List<String>> attrs=wburke.getAttributesAsListValues();
  Assert.assertEquals(1,attrs.size());
  List<String> attrVals=attrs.get("email");
  Assert.assertEquals(1,attrVals.size());
  Assert.assertEquals("bburke@redhat.com",attrVals.get(0));
  attrs=admin.getAttributesAsListValues();
  Assert.assertEquals(2,attrs.size());
  attrVals=attrs.get("key1");
  Assert.assertEquals(1,attrVals.size());
  Assert.assertEquals("val1",attrVals.get(0));
  attrVals=attrs.get("key2");
  Assert.assertEquals(2,attrVals.size());
  Assert.assertTrue(attrVals.contains("val21") && attrVals.contains("val22"));
  ClientResource oauthClient=ApiUtil.findClientResourceByClientId(realmRsc,"oauthclient");
  ClientRepresentation oauthClientRep=oauthClient.toRepresentation();
  Assert.assertEquals("clientpassword",oauthClient.getSecret().getValue());
  Assert.assertTrue(oauthClientRep.isEnabled());
  Assert.assertNotNull(oauthClientRep);
  Set<RoleRepresentation> allScopes=allScopeMappings(oauthClient);
  Assert.assertEquals(2,allScopes.size());
  Assert.assertTrue(containsRole(allScopes,findRealmRole(realmRsc,"admin")));
  Assert.assertTrue(containsRole(allScopes,findClientRole(realmRsc,application.getId(),"app-user")));
  List<RoleRepresentation> realmScopes=realmScopeMappings(oauthClient);
  Assert.assertTrue(containsRole(realmScopes,findRealmRole(realmRsc,"admin")));
  List<RoleRepresentation> appScopes=clientScopeMappings(oauthClient);
  Assert.assertTrue(containsRole(appScopes,findClientRole(realmRsc,application.getId(),"app-user")));
  UserResource socialUser=realmRsc.users().get(findByUsername(realmRsc,"mySocialUser").getId());
  List<FederatedIdentityRepresentation> socialLinks=socialUser.getFederatedIdentity();
  Assert.assertEquals(3,socialLinks.size());
  boolean facebookFound=false;
  boolean googleFound=false;
  boolean twitterFound=false;
  FederatedIdentityRepresentation facebookIdentityRep=null;
  for (  FederatedIdentityRepresentation federatedIdentityRep : socialLinks) {
    if ("facebook1".equals(federatedIdentityRep.getIdentityProvider())) {
      facebookFound=true;
      facebookIdentityRep=federatedIdentityRep;
      Assert.assertEquals("facebook1",federatedIdentityRep.getUserId());
      Assert.assertEquals("fbuser1",federatedIdentityRep.getUserName());
    }
 else     if ("google1".equals(federatedIdentityRep.getIdentityProvider())) {
      googleFound=true;
      Assert.assertEquals("google1",federatedIdentityRep.getUserId());
      Assert.assertEquals("mysocialuser@gmail.com",federatedIdentityRep.getUserName());
    }
 else     if ("twitter1".equals(federatedIdentityRep.getIdentityProvider())) {
      twitterFound=true;
      Assert.assertEquals("twitter1",federatedIdentityRep.getUserId());
      Assert.assertEquals("twuser1",federatedIdentityRep.getUserName());
    }
  }
  Assert.assertTrue(facebookFound && twitterFound && googleFound);
  UserRepresentation foundSocialUser=testingClient.testing().getUserByFederatedIdentity(realm.getRealm(),"facebook1","facebook1","fbuser1");
  Assert.assertEquals(foundSocialUser.getUsername(),socialUser.toRepresentation().getUsername());
  Assert.assertNull(testingClient.testing().getUserByFederatedIdentity(realm.getRealm(),"facebook","not-existing","not-existing"));
  Assert.assertEquals("facebook1",facebookIdentityRep.getUserId());
  Assert.assertEquals("fbuser1",facebookIdentityRep.getUserName());
  Assert.assertEquals("facebook1",facebookIdentityRep.getIdentityProvider());
  socialUser.removeFederatedIdentity("facebook1");
  Assert.assertEquals(2,socialUser.getFederatedIdentity().size());
  socialUser.addFederatedIdentity("facebook1",facebookIdentityRep);
  Assert.assertEquals(3,socialUser.getFederatedIdentity().size());
  Map<String,String> smtpConfig=realm.getSmtpServer();
  Assert.assertTrue(smtpConfig.size() == 3);
  Assert.assertEquals("auto@keycloak.org",smtpConfig.get("from"));
  Assert.assertEquals("localhost",smtpConfig.get("host"));
  Assert.assertEquals("3025",smtpConfig.get("port"));
  List<IdentityProviderRepresentation> identityProviders=realm.getIdentityProviders();
  Assert.assertEquals(3,identityProviders.size());
  IdentityProviderRepresentation google=null;
  for (  IdentityProviderRepresentation idpRep : identityProviders) {
    if (idpRep.getAlias().equals("google1"))     google=idpRep;
  }
  Assert.assertNotNull(google);
  Assert.assertEquals("google1",google.getAlias());
  Assert.assertEquals("google",google.getProviderId());
  Assert.assertTrue(google.isEnabled());
  Assert.assertEquals("googleId",google.getConfig().get("clientId"));
  Assert.assertEquals("googleSecret",google.getConfig().get("clientSecret"));
  List<UserFederationProviderRepresentation> fedProviders=realm.getUserFederationProviders();
  Assert.assertTrue(fedProviders.size() == 2);
  UserFederationProviderRepresentation ldap1=fedProviders.get(0);
  Assert.assertEquals("MyLDAPProvider1",ldap1.getDisplayName());
  Assert.assertEquals("ldap",ldap1.getProviderName());
  Assert.assertEquals(1,ldap1.getPriority());
  Assert.assertEquals("ldap://foo",ldap1.getConfig().get(LDAPConstants.CONNECTION_URL));
  UserFederationProviderRepresentation ldap2=fedProviders.get(1);
  Assert.assertEquals("MyLDAPProvider2",ldap2.getDisplayName());
  Assert.assertEquals("ldap://bar",ldap2.getConfig().get(LDAPConstants.CONNECTION_URL));
  List<UserFederationMapperRepresentation> fedMappers1=realmRsc.userFederation().get(ldap1.getId()).getMappers();
  Assert.assertTrue(fedMappers1.size() == 1);
  UserFederationMapperRepresentation fullNameMapper=fedMappers1.iterator().next();
  Assert.assertEquals("FullNameMapper",fullNameMapper.getName());
  Assert.assertEquals(FullNameLDAPFederationMapperFactory.PROVIDER_ID,fullNameMapper.getFederationMapperType());
  Assert.assertEquals("cn",fullNameMapper.getConfig().get(FullNameLDAPFederationMapper.LDAP_FULL_NAME_ATTRIBUTE));
  List<UserFederationMapperRepresentation> fedMappers2=realmRsc.userFederation().get(ldap2.getId()).getMappers();
  Assert.assertTrue(fedMappers2.size() > 3);
  List<UserFederationMapperRepresentation> allMappers=realm.getUserFederationMappers();
  Assert.assertEquals(allMappers.size(),fedMappers1.size() + fedMappers2.size());
  Assert.assertNull(testingClient.testing().getUserByUsernameFromFedProviderFactory(realm.getRealm(),"wburke"));
  AuthenticationFlowRepresentation clientFlow=testingClient.testing().getClientAuthFlow(realm.getRealm());
  Assert.assertEquals(DefaultAuthenticationFlows.CLIENT_AUTHENTICATION_FLOW,clientFlow.getAlias());
  Assert.assertNotNull(realmRsc.flows().getFlow(clientFlow.getId()));
  Assert.assertTrue(realmRsc.flows().getExecutions(clientFlow.getAlias()).size() > 0);
  AuthenticationFlowRepresentation resetFlow=testingClient.testing().getResetCredFlow(realm.getRealm());
  Assert.assertEquals(DefaultAuthenticationFlows.RESET_CREDENTIALS_FLOW,resetFlow.getAlias());
  Assert.assertNotNull(realmRsc.flows().getFlow(resetFlow.getId()));
  Assert.assertTrue(realmRsc.flows().getExecutions(resetFlow.getAlias()).size() > 0);
  List<ProtocolMapperRepresentation> applicationMappers=application.getProtocolMappers();
  Assert.assertNotNull(findMapperByName(applicationMappers,OIDCLoginProtocol.LOGIN_PROTOCOL,"username"));
  Assert.assertNotNull(findMapperByName(applicationMappers,OIDCLoginProtocol.LOGIN_PROTOCOL,"email"));
  Assert.assertNotNull(findMapperByName(applicationMappers,OIDCLoginProtocol.LOGIN_PROTOCOL,"given name"));
  Assert.assertNull(findMapperByName(applicationMappers,OIDCLoginProtocol.LOGIN_PROTOCOL,KerberosConstants.GSS_DELEGATION_CREDENTIAL_DISPLAY_NAME));
  Assert.assertEquals(1,otherApp.getProtocolMappers().size());
  List<ProtocolMapperRepresentation> otherAppMappers=otherApp.getProtocolMappers();
  Assert.assertNull(findMapperByName(otherAppMappers,OIDCLoginProtocol.LOGIN_PROTOCOL,"username"));
  ProtocolMapperRepresentation gssCredentialMapper=findMapperByName(otherAppMappers,OIDCLoginProtocol.LOGIN_PROTOCOL,KerberosConstants.GSS_DELEGATION_CREDENTIAL_DISPLAY_NAME);
  assertGssProtocolMapper(gssCredentialMapper);
  List<ClientTemplateRepresentation> clientTemplates=realmRsc.clientTemplates().findAll();
  Assert.assertEquals(1,clientTemplates.size());
  ClientTemplateRepresentation clientTemplate=clientTemplates.get(0);
  Assert.assertEquals("foo-template",clientTemplate.getName());
  Assert.assertEquals("foo-template-desc",clientTemplate.getDescription());
  Assert.assertEquals(OIDCLoginProtocol.LOGIN_PROTOCOL,clientTemplate.getProtocol());
  Assert.assertEquals(1,clientTemplate.getProtocolMappers().size());
  List<ProtocolMapperRepresentation> clientTemplateMappers=clientTemplate.getProtocolMappers();
  ProtocolMapperRepresentation templateGssCredentialMapper=findMapperByName(clientTemplateMappers,OIDCLoginProtocol.LOGIN_PROTOCOL,KerberosConstants.GSS_DELEGATION_CREDENTIAL_DISPLAY_NAME);
  assertGssProtocolMapper(templateGssCredentialMapper);
  Set<RoleRepresentation> allClientTemplateScopes=allScopeMappings(realmRsc.clientTemplates().get(clientTemplate.getId()));
  Assert.assertEquals(3,allClientTemplateScopes.size());
  Assert.assertTrue(containsRole(allClientTemplateScopes,findRealmRole(realmRsc,"admin")));
  Assert.assertTrue(containsRole(allClientTemplateScopes,findClientRole(realmRsc,application.getId(),"app-user")));
  Assert.assertTrue(containsRole(allClientTemplateScopes,findClientRole(realmRsc,application.getId(),"app-admin")));
  List<RoleRepresentation> clientTemplateRealmScopes=realmScopeMappings(realmRsc.clientTemplates().get(clientTemplate.getId()));
  Assert.assertTrue(containsRole(clientTemplateRealmScopes,findRealmRole(realmRsc,"admin")));
  List<RoleRepresentation> clientTemplateAppScopes=clientScopeMappings(realmRsc.clientTemplates().get(clientTemplate.getId()));
  Assert.assertTrue(containsRole(clientTemplateAppScopes,findClientRole(realmRsc,application.getId(),"app-user")));
  Assert.assertTrue(containsRole(clientTemplateAppScopes,findClientRole(realmRsc,application.getId(),"app-admin")));
  UserResource adminRsc=realmRsc.users().get(admin.getId());
  List<Map<String,Object>> consents=adminRsc.getConsents();
  Assert.assertEquals(2,consents.size());
  Map<String,Object> appAdminConsent=findConsentByClientId(consents,application.getClientId());
  Assert.assertEquals(2,calcNumberGrantedRoles(appAdminConsent));
  Assert.assertTrue(getGrantedProtocolMappers(appAdminConsent) == null || getGrantedProtocolMappers(appAdminConsent).isEmpty());
  Assert.assertTrue(isRealmRoleGranted(appAdminConsent,"admin"));
  Assert.assertTrue(isClientRoleGranted(appAdminConsent,application.getClientId(),"app-admin"));
  Map<String,Object> otherAppAdminConsent=findConsentByClientId(consents,otherApp.getClientId());
  Assert.assertEquals(1,calcNumberGrantedRoles(otherAppAdminConsent));
  Assert.assertEquals(1,getGrantedProtocolMappers(otherAppAdminConsent).size());
  Assert.assertTrue(isRealmRoleGranted(otherAppAdminConsent,"admin"));
  Assert.assertFalse(isClientRoleGranted(otherAppAdminConsent,application.getClientId(),"app-admin"));
  Assert.assertTrue(isProtocolMapperGranted(otherAppAdminConsent,gssCredentialMapper));
  Assert.assertTrue(application.isStandardFlowEnabled());
  Assert.assertTrue(application.isImplicitFlowEnabled());
  Assert.assertTrue(application.isDirectAccessGrantsEnabled());
  Assert.assertFalse(otherApp.isStandardFlowEnabled());
  Assert.assertFalse(otherApp.isImplicitFlowEnabled());
  Assert.assertFalse(otherApp.isDirectAccessGrantsEnabled());
  Assert.assertFalse(application.isServiceAccountsEnabled());
  Assert.assertTrue(otherApp.isServiceAccountsEnabled());
  Assert.assertNull(testingClient.testing().getUserByServiceAccountClient(realm.getRealm(),application.getClientId()));
  UserRepresentation linked=testingClient.testing().getUserByServiceAccountClient(realm.getRealm(),otherApp.getClientId());
  Assert.assertNotNull(linked);
  Assert.assertEquals("my-service-user",linked.getUsername());
}
