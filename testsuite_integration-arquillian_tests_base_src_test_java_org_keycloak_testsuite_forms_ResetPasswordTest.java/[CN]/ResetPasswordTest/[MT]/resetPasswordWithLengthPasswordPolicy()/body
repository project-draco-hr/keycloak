{
  setPasswordPolicy("length");
  loginPage.open();
  loginPage.resetPassword();
  resetPasswordPage.assertCurrent();
  resetPasswordPage.changePassword("login-test");
  loginPage.assertCurrent();
  assertEquals("You should receive an email shortly with further instructions.",loginPage.getSuccessMessage());
  assertEquals(1,greenMail.getReceivedMessages().length);
  MimeMessage message=greenMail.getReceivedMessages()[0];
  String changePasswordUrl=getPasswordResetEmailLink(message);
  events.expectRequiredAction(EventType.SEND_RESET_PASSWORD).session((String)null).user(userId).detail(Details.USERNAME,"login-test").detail(Details.EMAIL,"login@test.com").assertEvent();
  driver.navigate().to(changePasswordUrl.trim());
  updatePasswordPage.assertCurrent();
  updatePasswordPage.changePassword("invalid","invalid");
  assertEquals("Invalid password: minimum length 8.",resetPasswordPage.getErrorMessage());
  updatePasswordPage.changePassword("resetPasswordWithPasswordPolicy","resetPasswordWithPasswordPolicy");
  String sessionId=events.expectRequiredAction(EventType.UPDATE_PASSWORD).user(userId).detail(Details.USERNAME,"login-test").assertEvent().getSessionId();
  assertEquals(RequestType.AUTH_RESPONSE,appPage.getRequestType());
  events.expectLogin().user(userId).detail(Details.USERNAME,"login-test").session(sessionId).assertEvent();
  oauth.openLogout();
  events.expectLogout(sessionId).user(userId).session(sessionId).assertEvent();
  loginPage.open();
  loginPage.login("login-test","resetPasswordWithPasswordPolicy");
  assertEquals(RequestType.AUTH_RESPONSE,appPage.getRequestType());
  events.expectLogin().user(userId).detail(Details.USERNAME,"login-test").assertEvent();
}
