{
  RealmResource realmResource=adminClient.realms().realm("Migration");
  RealmRepresentation realmRep=realmResource.toRepresentation();
  assertEquals("Migration",realmRep.getRealm());
  List<RoleRepresentation> realmRoles=realmResource.roles().list();
  assertEquals(1,realmRoles.size());
  assertEquals("offline_access",realmRoles.get(0).getName());
  for (  ClientRepresentation client : realmResource.clients().findAll()) {
    final String clientId=client.getClientId();
switch (clientId) {
case "realm-management":
      assertEquals(13,realmResource.clients().get(client.getId()).roles().list().size());
    break;
case "security-admin-console":
  assertEquals(0,realmResource.clients().get(client.getId()).roles().list().size());
break;
case "broker":
assertEquals(1,realmResource.clients().get(client.getId()).roles().list().size());
break;
case "account":
assertEquals(2,realmResource.clients().get(client.getId()).roles().list().size());
break;
default :
fail("Migrated realm contains unexpected client " + clientId);
break;
}
}
}
