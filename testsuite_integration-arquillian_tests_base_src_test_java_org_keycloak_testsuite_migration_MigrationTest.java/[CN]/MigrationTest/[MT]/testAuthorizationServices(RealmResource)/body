{
  for (  RealmResource realm : realms) {
    for (    String roleName : Constants.AUTHZ_DEFAULT_AUTHORIZATION_ROLES) {
      RoleResource role=realm.roles().get(roleName);
      assertFalse("Role's scopeParamRequired should be false.",role.toRepresentation().isScopeParamRequired());
      assertFalse("Role shouldn't be composite should be false.",role.toRepresentation().isComposite());
      assertTrue("role should be added to default roles for new users",realm.toRepresentation().getDefaultRoles().contains(roleName));
    }
    List<ClientRepresentation> clients=realm.clients().findByClientId(realm.toRepresentation().getRealm() + "-realm");
    if (!clients.isEmpty()) {
      ClientResource masterAdminClient=realm.clients().get(clients.get(0).getId());
      masterAdminClient.roles().get(AdminRoles.VIEW_AUTHORIZATION).toRepresentation();
      masterAdminClient.roles().get(AdminRoles.MANAGE_AUTHORIZATION).toRepresentation();
      Set<String> roleNames=new HashSet<>();
      for (      RoleRepresentation role : realm.roles().get(AdminRoles.ADMIN).getRoleComposites()) {
        roleNames.add(role.getName());
      }
      assertTrue(AdminRoles.VIEW_AUTHORIZATION + " should be composite role of " + AdminRoles.ADMIN,roleNames.contains(AdminRoles.VIEW_AUTHORIZATION));
      assertTrue(AdminRoles.MANAGE_AUTHORIZATION + " should be composite role of " + AdminRoles.ADMIN,roleNames.contains(AdminRoles.MANAGE_AUTHORIZATION));
    }
  }
}
