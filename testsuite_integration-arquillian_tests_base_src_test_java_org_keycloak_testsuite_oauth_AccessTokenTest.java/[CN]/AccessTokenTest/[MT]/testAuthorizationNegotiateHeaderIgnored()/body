{
  adminClient.realm("test").clients().create(ClientBuilder.create().clientId("sample-public-client").authenticatorType("client-secret").redirectUris("http://localhost:8180/auth/realms/master/app/*").publicClient().build());
  oauth.clientId("sample-public-client");
  oauth.doLogin("test-user@localhost","password");
  EventRepresentation loginEvent=events.expectLogin().client("sample-public-client").assertEvent();
  String sessionId=loginEvent.getSessionId();
  String codeId=loginEvent.getDetails().get(Details.CODE_ID);
  String code=oauth.getCurrentQuery().get(OAuth2Constants.CODE);
  CloseableHttpClient client=new DefaultHttpClient();
  try {
    HttpPost post=new HttpPost(oauth.getAccessTokenUrl());
    List<NameValuePair> parameters=new LinkedList<NameValuePair>();
    parameters.add(new BasicNameValuePair(OAuth2Constants.GRANT_TYPE,OAuth2Constants.AUTHORIZATION_CODE));
    parameters.add(new BasicNameValuePair(OAuth2Constants.CODE,code));
    parameters.add(new BasicNameValuePair(OAuth2Constants.REDIRECT_URI,oauth.getRedirectUri()));
    parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ID,oauth.getClientId()));
    post.setHeader("Authorization","Negotiate something-which-will-be-ignored");
    UrlEncodedFormEntity formEntity=null;
    formEntity=new UrlEncodedFormEntity(parameters,"UTF-8");
    post.setEntity(formEntity);
    OAuthClient.AccessTokenResponse response=new OAuthClient.AccessTokenResponse(client.execute(post));
    Assert.assertEquals(200,response.getStatusCode());
    AccessToken token=oauth.verifyToken(response.getAccessToken());
    events.expectCodeToToken(codeId,sessionId).client("sample-public-client").assertEvent();
  }
  finally {
    oauth.closeClient(client);
  }
}
