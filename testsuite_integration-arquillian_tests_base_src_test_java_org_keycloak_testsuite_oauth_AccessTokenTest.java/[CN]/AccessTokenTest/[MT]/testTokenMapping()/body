{
  Client client=javax.ws.rs.client.ClientBuilder.newClient();
  UriBuilder builder=UriBuilder.fromUri(AUTH_SERVER_ROOT);
  URI grantUri=OIDCLoginProtocolService.tokenUrl(builder).build("test");
  WebTarget grantTarget=client.target(grantUri);
{
    UserResource userResource=findUserByUsernameId(adminClient.realm("test"),"test-user@localhost");
    UserRepresentation user=userResource.toRepresentation();
    user.singleAttribute("street","5 Yawkey Way");
    user.singleAttribute("locality","Boston");
    user.singleAttribute("region","MA");
    user.singleAttribute("postal_code","02115");
    user.singleAttribute("country","USA");
    user.singleAttribute("phone","617-777-6666");
    List<String> departments=Arrays.asList("finance","development");
    user.getAttributes().put("departments",departments);
    userResource.update(user);
    ClientResource app=findClientResourceByClientId(adminClient.realm("test"),"test-app");
    ProtocolMapperRepresentation mapper=createAddressMapper(true,true);
    app.getProtocolMappers().createMapper(mapper);
    ProtocolMapperRepresentation hard=createHardcodedClaim("hard","hard","coded","String",false,null,true,true);
    app.getProtocolMappers().createMapper(hard);
    app.getProtocolMappers().createMapper(createHardcodedClaim("hard-nested","nested.hard","coded-nested","String",false,null,true,true));
    app.getProtocolMappers().createMapper(createClaimMapper("custom phone","phone","home_phone","String",true,"",true,true,false));
    app.getProtocolMappers().createMapper(createClaimMapper("nested phone","phone","home.phone","String",true,"",true,true,false));
    app.getProtocolMappers().createMapper(createClaimMapper("departments","departments","department","String",true,"",true,true,true));
    app.getProtocolMappers().createMapper(createHardcodedRole("hard-realm","hardcoded"));
    app.getProtocolMappers().createMapper(createHardcodedRole("hard-app","app.hardcoded"));
    app.getProtocolMappers().createMapper(createRoleNameMapper("rename-app-role","test-app.customer-user","realm-user"));
  }
{
    Response response=executeGrantAccessTokenRequest(grantTarget);
    assertEquals(200,response.getStatus());
    org.keycloak.representations.AccessTokenResponse tokenResponse=response.readEntity(org.keycloak.representations.AccessTokenResponse.class);
    IDToken idToken=getIdToken(tokenResponse);
    assertNotNull(idToken.getAddress());
    assertEquals(idToken.getName(),"Tom Brady");
    assertEquals(idToken.getAddress().getStreetAddress(),"5 Yawkey Way");
    assertEquals(idToken.getAddress().getLocality(),"Boston");
    assertEquals(idToken.getAddress().getRegion(),"MA");
    assertEquals(idToken.getAddress().getPostalCode(),"02115");
    assertEquals(idToken.getAddress().getCountry(),"USA");
    assertNotNull(idToken.getOtherClaims().get("home_phone"));
    assertEquals("617-777-6666",idToken.getOtherClaims().get("home_phone"));
    assertEquals("coded",idToken.getOtherClaims().get("hard"));
    Map nested=(Map)idToken.getOtherClaims().get("nested");
    assertEquals("coded-nested",nested.get("hard"));
    nested=(Map)idToken.getOtherClaims().get("home");
    assertEquals("617-777-6666",nested.get("phone"));
    List<String> departments=(List<String>)idToken.getOtherClaims().get("department");
    assertEquals(2,departments.size());
    assertTrue(departments.contains("finance") && departments.contains("development"));
    AccessToken accessToken=getAccessToken(tokenResponse);
    assertEquals(accessToken.getName(),"Tom Brady");
    assertNotNull(accessToken.getAddress());
    assertEquals(accessToken.getAddress().getStreetAddress(),"5 Yawkey Way");
    assertEquals(accessToken.getAddress().getLocality(),"Boston");
    assertEquals(accessToken.getAddress().getRegion(),"MA");
    assertEquals(accessToken.getAddress().getPostalCode(),"02115");
    assertEquals(accessToken.getAddress().getCountry(),"USA");
    assertNotNull(accessToken.getOtherClaims().get("home_phone"));
    assertEquals("617-777-6666",accessToken.getOtherClaims().get("home_phone"));
    assertEquals("coded",accessToken.getOtherClaims().get("hard"));
    nested=(Map)accessToken.getOtherClaims().get("nested");
    assertEquals("coded-nested",nested.get("hard"));
    nested=(Map)accessToken.getOtherClaims().get("home");
    assertEquals("617-777-6666",nested.get("phone"));
    departments=(List<String>)idToken.getOtherClaims().get("department");
    assertEquals(2,departments.size());
    assertTrue(departments.contains("finance") && departments.contains("development"));
    assertTrue(accessToken.getRealmAccess().getRoles().contains("hardcoded"));
    assertTrue(accessToken.getRealmAccess().getRoles().contains("realm-user"));
    Assert.assertFalse(accessToken.getResourceAccess("test-app").getRoles().contains("customer-user"));
    assertTrue(accessToken.getResourceAccess("app").getRoles().contains("hardcoded"));
    response.close();
  }
{
    ClientResource app=findClientByClientId(adminClient.realm("test"),"test-app");
    ClientRepresentation clientRepresentation=app.toRepresentation();
    for (    ProtocolMapperRepresentation model : clientRepresentation.getProtocolMappers()) {
      if (model.getName().equals("address") || model.getName().equals("hard") || model.getName().equals("hard-nested")|| model.getName().equals("custom phone")|| model.getName().equals("departments")|| model.getName().equals("nested phone")|| model.getName().equals("rename-app-role")|| model.getName().equals("hard-realm")|| model.getName().equals("hard-app")) {
        app.getProtocolMappers().delete(model.getId());
      }
    }
  }
  events.clear();
{
    Response response=executeGrantAccessTokenRequest(grantTarget);
    assertEquals(200,response.getStatus());
    org.keycloak.representations.AccessTokenResponse tokenResponse=response.readEntity(org.keycloak.representations.AccessTokenResponse.class);
    IDToken idToken=getIdToken(tokenResponse);
    assertNull(idToken.getAddress());
    assertNull(idToken.getOtherClaims().get("home_phone"));
    assertNull(idToken.getOtherClaims().get("hard"));
    assertNull(idToken.getOtherClaims().get("nested"));
    assertNull(idToken.getOtherClaims().get("department"));
    response.close();
  }
  events.clear();
  client.close();
}
