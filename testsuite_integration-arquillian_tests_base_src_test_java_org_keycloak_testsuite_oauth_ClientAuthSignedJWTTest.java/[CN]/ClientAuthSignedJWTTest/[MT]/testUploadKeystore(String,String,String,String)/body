{
  ClientRepresentation client=getClient(testRealm.getRealm(),app3.getId()).toRepresentation();
  final String certOld=client.getAttributes().get(JWTClientAuthenticator.CERTIFICATE_ATTR);
  URL fileUrl=(getClass().getClassLoader().getResource(filePath));
  if (fileUrl == null) {
    throw new IOException("File not found: " + filePath);
  }
  File keystoreFile=new File(fileUrl.getFile());
  OAuthClient.AccessTokenResponse accessTokenResponse=oauth.doGrantAccessTokenRequest(AuthRealm.MASTER,AuthRealm.ADMIN,AuthRealm.ADMIN,null,"admin-cli",null);
  assertEquals(200,accessTokenResponse.getStatusCode());
  final String url=suiteContext.getAuthServerInfo().getContextRoot() + "/auth/admin/realms/" + testRealm.getRealm()+ "/clients/"+ client.getId()+ "/certificates/jwt.credential/upload-certificate";
  FileBody fileBody=new FileBody(keystoreFile);
  HttpEntity entity=MultipartEntityBuilder.create().addPart("file",fileBody).addTextBody("keystoreFormat",keystoreFormat).addTextBody("keyAlias",keyAlias).addTextBody("storePassword",storePassword).addTextBody("keyPassword","undefined").build();
  HttpPost httpRequest=new HttpPost(url);
  httpRequest.setHeader(HttpHeaders.AUTHORIZATION,"Bearer " + accessTokenResponse.getAccessToken());
  httpRequest.setEntity(entity);
  HttpClient httpClient=HttpClients.createDefault();
  HttpResponse httpResponse=httpClient.execute(httpRequest);
  assertEquals(200,httpResponse.getStatusLine().getStatusCode());
  client=getClient(testRealm.getRealm(),client.getId()).toRepresentation();
  if (keystoreFormat.equals(org.keycloak.services.resources.admin.ClientAttributeCertificateResource.PUBLIC_KEY_PEM)) {
    String pem=new String(Files.readAllBytes(keystoreFile.toPath()));
    final String publicKeyNew=client.getAttributes().get(JWTClientAuthenticator.ATTR_PREFIX + "." + CertificateInfoHelper.PUBLIC_KEY);
    assertEquals("Certificates don't match",pem,publicKeyNew);
  }
 else   if (keystoreFormat.equals(org.keycloak.services.resources.admin.ClientAttributeCertificateResource.JSON_WEB_KEY_SET)) {
    final String publicKeyNew=client.getAttributes().get(JWTClientAuthenticator.ATTR_PREFIX + "." + CertificateInfoHelper.PUBLIC_KEY);
    PublicKey pk=KeycloakModelUtils.getPublicKey(publicKeyNew);
    Assert.assertNotNull(pk);
  }
 else   if (keystoreFormat.equals(org.keycloak.services.resources.admin.ClientAttributeCertificateResource.CERTIFICATE_PEM)) {
    String pem=new String(Files.readAllBytes(keystoreFile.toPath()));
    assertCertificate(client,certOld,pem);
  }
 else {
    InputStream keystoreIs=new FileInputStream(keystoreFile);
    KeyStore keyStore=getKeystore(keystoreIs,storePassword,keystoreFormat);
    keystoreIs.close();
    String pem=KeycloakModelUtils.getPemFromCertificate((X509Certificate)keyStore.getCertificate(keyAlias));
    assertCertificate(client,certOld,pem);
  }
}
