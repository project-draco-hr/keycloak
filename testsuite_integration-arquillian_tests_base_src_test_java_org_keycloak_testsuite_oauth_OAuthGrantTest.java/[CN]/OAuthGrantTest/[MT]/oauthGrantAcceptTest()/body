{
  oauth.clientId(THIRD_PARTY_APP);
  oauth.doLoginGrant("test-user@localhost","password");
  grantPage.assertCurrent();
  Assert.assertTrue(driver.getPageSource().contains(ROLE_USER));
  Assert.assertTrue(driver.getPageSource().contains(ROLE_CUSTOMER));
  grantPage.accept();
  Assert.assertTrue(oauth.getCurrentQuery().containsKey(OAuth2Constants.CODE));
  EventRepresentation loginEvent=events.expectLogin().client(THIRD_PARTY_APP).detail(Details.CONSENT,Details.CONSENT_VALUE_CONSENT_GRANTED).assertEvent();
  String codeId=loginEvent.getDetails().get(Details.CODE_ID);
  String sessionId=loginEvent.getSessionId();
  OAuthClient.AccessTokenResponse accessToken=oauth.doAccessTokenRequest(oauth.getCurrentQuery().get(OAuth2Constants.CODE),"password");
  String tokenString=accessToken.getAccessToken();
  Assert.assertNotNull(tokenString);
  AccessToken token=oauth.verifyToken(tokenString);
  assertEquals(sessionId,token.getSessionState());
  AccessToken.Access realmAccess=token.getRealmAccess();
  assertEquals(1,realmAccess.getRoles().size());
  Assert.assertTrue(realmAccess.isUserInRole("user"));
  Map<String,AccessToken.Access> resourceAccess=token.getResourceAccess();
  assertEquals(1,resourceAccess.size());
  assertEquals(1,resourceAccess.get("test-app").getRoles().size());
  Assert.assertTrue(resourceAccess.get("test-app").isUserInRole("customer-user"));
  events.expectCodeToToken(codeId,loginEvent.getSessionId()).client(THIRD_PARTY_APP).assertEvent();
  accountAppsPage.open();
  assertEquals(1,driver.findElements(By.id("revoke-third-party")).size());
  accountAppsPage.revokeGrant(THIRD_PARTY_APP);
  events.expect(EventType.REVOKE_GRANT).client("account").detail(Details.REVOKED_CLIENT,THIRD_PARTY_APP).assertEvent();
  assertEquals(0,driver.findElements(By.id("revoke-third-party")).size());
}
