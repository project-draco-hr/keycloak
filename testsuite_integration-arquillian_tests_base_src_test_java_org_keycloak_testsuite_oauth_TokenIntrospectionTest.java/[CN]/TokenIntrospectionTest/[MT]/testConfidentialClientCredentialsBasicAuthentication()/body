{
  oauth.doLogin("test-user@localhost","password");
  String code=oauth.getCurrentQuery().get(OAuth2Constants.CODE);
  AccessTokenResponse accessTokenResponse=oauth.doAccessTokenRequest(code,"password");
  String tokenResponse=oauth.introspectAccessTokenWithClientCredential("confidential-cli","secret1",accessTokenResponse.getAccessToken());
  ObjectMapper objectMapper=new ObjectMapper();
  JsonNode jsonNode=objectMapper.readTree(tokenResponse);
  assertTrue(jsonNode.get("active").asBoolean());
  assertEquals("test-user@localhost",jsonNode.get("username").asText());
  assertEquals("test-app",jsonNode.get("client_id").asText());
  assertTrue(jsonNode.has("exp"));
  assertTrue(jsonNode.has("iat"));
  assertTrue(jsonNode.has("nbf"));
  assertTrue(jsonNode.has("sub"));
  assertTrue(jsonNode.has("aud"));
  assertTrue(jsonNode.has("iss"));
  assertTrue(jsonNode.has("jti"));
  TokenMetadataRepresentation rep=objectMapper.readValue(tokenResponse,TokenMetadataRepresentation.class);
  assertTrue(rep.isActive());
  assertEquals("test-user@localhost",rep.getUserName());
  assertEquals("test-app",rep.getClientId());
  assertEquals(jsonNode.get("exp").asInt(),rep.getExpiration());
  assertEquals(jsonNode.get("iat").asInt(),rep.getIssuedAt());
  assertEquals(jsonNode.get("nbf").asInt(),rep.getNotBefore());
  assertEquals(jsonNode.get("sub").asText(),rep.getSubject());
  assertEquals(jsonNode.get("aud").asText(),rep.getAudience()[0]);
  assertEquals(jsonNode.get("iss").asText(),rep.getIssuer());
  assertEquals(jsonNode.get("jti").asText(),rep.getId());
}
