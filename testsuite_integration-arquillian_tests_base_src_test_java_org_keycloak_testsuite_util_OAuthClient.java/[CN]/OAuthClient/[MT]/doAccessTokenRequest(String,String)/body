{
  CloseableHttpClient client=new DefaultHttpClient();
  try {
    HttpPost post=new HttpPost(getAccessTokenUrl());
    List<NameValuePair> parameters=new LinkedList<NameValuePair>();
    parameters.add(new BasicNameValuePair(OAuth2Constants.GRANT_TYPE,OAuth2Constants.AUTHORIZATION_CODE));
    if (code != null) {
      parameters.add(new BasicNameValuePair(OAuth2Constants.CODE,code));
    }
    if (redirectUri != null) {
      parameters.add(new BasicNameValuePair(OAuth2Constants.REDIRECT_URI,redirectUri));
    }
    if (clientId != null && password != null) {
      String authorization=BasicAuthHelper.createHeader(clientId,password);
      post.setHeader("Authorization",authorization);
    }
 else     if (clientId != null) {
      parameters.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ID,clientId));
    }
    if (clientSessionState != null) {
      parameters.add(new BasicNameValuePair(AdapterConstants.CLIENT_SESSION_STATE,clientSessionState));
    }
    if (clientSessionHost != null) {
      parameters.add(new BasicNameValuePair(AdapterConstants.CLIENT_SESSION_HOST,clientSessionHost));
    }
    UrlEncodedFormEntity formEntity=null;
    try {
      formEntity=new UrlEncodedFormEntity(parameters,"UTF-8");
    }
 catch (    UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    post.setEntity(formEntity);
    try {
      return new AccessTokenResponse(client.execute(post));
    }
 catch (    Exception e) {
      throw new RuntimeException("Failed to retrieve access token",e);
    }
  }
  finally {
    closeClient(client);
  }
}
