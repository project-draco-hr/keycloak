{
  LOG.trace(String.format("Starting login-logout scenario #%s",getLoopCounter()));
  context.getCookieStore().clear();
  String pageContent;
  final HttpGet getSecuredPageRequest=new HttpGet(securedUrl);
  LOG.trace(String.format("Accessing secured URL: %s",getSecuredPageRequest));
  LOG.trace(getSecuredPageRequest);
  timer.reset();
  try (CloseableHttpResponse r=client.execute(getSecuredPageRequest,context)){
    assertEquals("ACCESS_REQUEST OK",HTTP_OK,r.getStatusLine().getStatusCode());
    logRedirects();
    assertEquals("ACCESS_REQUEST has 1 redirect",1,context.getRedirectLocations().size());
    assertTrue("ACCESS_REQUEST redirects to login page",getLastRedirect().toASCIIString().startsWith(loginPageUrl));
    pageContent=EntityUtils.toString(r.getEntity());
  }
 catch (  SocketException ex) {
    throw new OperationTimeoutException(ACCESS_REQUEST_TIME,ex);
  }
catch (  SocketTimeoutException ex) {
    throw new OperationTimeoutException(ACCESS_REQUEST_TIME,ex.bytesTransferred,ex);
  }
  statistics.addValue(ACCESS_REQUEST_TIME,timer.getElapsedTime());
  final HttpPost loginRequest=new HttpPost(getLoginUrlFromPage(pageContent));
  List<NameValuePair> credentials=new ArrayList<>();
  credentials.add(new BasicNameValuePair("username",username));
  credentials.add(new BasicNameValuePair("password",password));
  loginRequest.setEntity(new UrlEncodedFormEntity(credentials));
  LOG.trace("Logging in");
  LOG.trace(loginRequest);
  timer.reset();
  try (CloseableHttpResponse r=client.execute(loginRequest,context)){
    assertEquals("LOGIN_REQUEST OK",HTTP_OK,r.getStatusLine().getStatusCode());
    logRedirects();
    assertEquals("LOGIN_REQUEST has 2 redirects",2,context.getRedirectLocations().size());
    assertTrue("LOGIN_REQUEST redirects to secured page",getLastRedirect().toASCIIString().equals(securedUrl));
  }
 catch (  SocketException ex) {
    throw new OperationTimeoutException(LOGIN_REQUEST_TIME,ex);
  }
catch (  SocketTimeoutException ex) {
    throw new OperationTimeoutException(LOGIN_REQUEST_TIME,ex.bytesTransferred,ex);
  }
  statistics.addValue(LOGIN_REQUEST_TIME,timer.getElapsedTime());
  LOG.trace("Verifying login");
  LOG.trace(getSecuredPageRequest);
  timer.reset();
  try (CloseableHttpResponse r=client.execute(getSecuredPageRequest,context)){
    assertEquals("LOGIN_VERIFY_REQUEST OK",HTTP_OK,r.getStatusLine().getStatusCode());
    logRedirects();
    assertEquals("LOGIN_VERIFY_REQUEST has 0 redirects",0,context.getRedirectLocations().size());
  }
 catch (  SocketException ex) {
    throw new OperationTimeoutException(LOGIN_VERIFY_REQUEST_TIME,ex);
  }
catch (  SocketTimeoutException ex) {
    throw new OperationTimeoutException(LOGIN_VERIFY_REQUEST_TIME,ex.bytesTransferred,ex);
  }
  statistics.addValue(LOGIN_VERIFY_REQUEST_TIME,timer.getElapsedTime());
  final HttpGet logoutRequest=new HttpGet(logoutUrl);
  LOG.trace("Logging out");
  LOG.trace(logoutRequest);
  timer.reset();
  try (CloseableHttpResponse r=client.execute(logoutRequest,context)){
    assertEquals("LOGOUT_REQUEST OK",HTTP_OK,r.getStatusLine().getStatusCode());
    logRedirects();
    assertEquals("LOGOUT_REQUEST has 0 redirects",0,context.getRedirectLocations().size());
  }
 catch (  SocketException ex) {
    throw new OperationTimeoutException(LOGOUT_REQUEST_TIME,ex);
  }
catch (  SocketTimeoutException ex) {
    throw new OperationTimeoutException(LOGOUT_REQUEST_TIME,ex.bytesTransferred,ex);
  }
  statistics.addValue(LOGOUT_REQUEST_TIME,timer.getElapsedTime());
  LOG.trace("Verifying logout");
  LOG.trace(getSecuredPageRequest);
  timer.reset();
  try (CloseableHttpResponse r=client.execute(getSecuredPageRequest,context)){
    assertEquals("LOGOUT_VERIFY_REQUEST OK",HTTP_OK,r.getStatusLine().getStatusCode());
    logRedirects();
    assertEquals("LOGOUT_VERIFY_REQUEST has 1 redirect",1,context.getRedirectLocations().size());
    assertTrue("LOGOUT_VERIFY_REQUEST redirects to login page",getLastRedirect().toASCIIString().startsWith(loginPageUrl));
  }
 catch (  SocketException ex) {
    throw new OperationTimeoutException(LOGOUT_VERIFY_REQUEST_TIME,ex);
  }
catch (  SocketTimeoutException ex) {
    throw new OperationTimeoutException(LOGOUT_VERIFY_REQUEST_TIME,ex.bytesTransferred,ex);
  }
  statistics.addValue(LOGOUT_VERIFY_REQUEST_TIME,timer.getElapsedTime());
  LOG.trace("Logged out");
}
