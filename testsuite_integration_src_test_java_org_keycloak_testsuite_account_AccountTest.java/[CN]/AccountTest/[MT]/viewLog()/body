{
  keycloakRule.update(new KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      appRealm.setEventsEnabled(true);
    }
  }
);
  try {
    List<Event> e=new LinkedList<Event>();
    loginPage.open();
    loginPage.clickRegister();
    registerPage.register("view","log","view-log@localhost","view-log","password","password");
    e.add(events.poll());
    e.add(events.poll());
    profilePage.open();
    profilePage.updateProfile("view","log2","view-log@localhost");
    e.add(events.poll());
    logPage.open();
    Collections.reverse(e);
    Assert.assertTrue(logPage.isCurrent());
    Thread.sleep(100);
    final int expectedEvents=e.size();
    Retry.execute(new Runnable(){
      @Override public void run(){
        Assert.assertEquals(expectedEvents,logPage.getEvents().size());
      }
    }
,10,500);
    Iterator<List<String>> itr=logPage.getEvents().iterator();
    for (    Event event : e) {
      List<String> a=itr.next();
      Assert.assertEquals(event.getType().toString().replace('_',' ').toLowerCase(),a.get(1));
      Assert.assertEquals(event.getIpAddress(),a.get(2));
      Assert.assertEquals(event.getClientId(),a.get(3));
    }
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
 finally {
    keycloakRule.update(new KeycloakSetup(){
      @Override public void config(      RealmManager manager,      RealmModel adminstrationRealm,      RealmModel appRealm){
        appRealm.setEventsEnabled(false);
      }
    }
);
  }
}
