{
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      OTPPolicy newPolicy=new OTPPolicy();
      newPolicy.setLookAheadWindow(1);
      newPolicy.setDigits(8);
      newPolicy.setPeriod(30);
      newPolicy.setType(UserCredentialModel.TOTP);
      newPolicy.setAlgorithm(HmacOTP.HMAC_SHA1);
      newPolicy.setInitialCounter(0);
      appRealm.setOTPPolicy(newPolicy);
    }
  }
);
  loginPage.open();
  loginPage.login("test-user@localhost","password");
  totpPage.assertCurrent();
  String totpSecret=totpPage.getTotpSecret();
  TimeBasedOTP timeBased=new TimeBasedOTP(HmacOTP.HMAC_SHA1,8,30,1);
  totpPage.configure(timeBased.generateTOTP(totpSecret));
  String sessionId=events.expectRequiredAction(EventType.UPDATE_TOTP).assertEvent().getSessionId();
  Assert.assertEquals(RequestType.AUTH_RESPONSE,appPage.getRequestType());
  Event loginEvent=events.expectLogin().session(sessionId).assertEvent();
  oauth.openLogout();
  events.expectLogout(loginEvent.getSessionId()).assertEvent();
  loginPage.open();
  loginPage.login("test-user@localhost","password");
  String src=driver.getPageSource();
  String token=timeBased.generateTOTP(totpSecret);
  Assert.assertEquals(8,token.length());
  loginTotpPage.login(token);
  Assert.assertEquals(RequestType.AUTH_RESPONSE,appPage.getRequestType());
  events.expectLogin().assertEvent();
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      appRealm.setOTPPolicy(originalPolicy);
    }
  }
);
}
