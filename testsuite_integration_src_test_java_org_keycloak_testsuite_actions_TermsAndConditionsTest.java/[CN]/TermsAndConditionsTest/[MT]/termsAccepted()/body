{
  loginPage.open();
  loginPage.login("test-user@localhost","password");
  termsPage.assertCurrent();
  termsPage.acceptTerms();
  String sessionId=events.expectRequiredAction(EventType.CUSTOM_REQUIRED_ACTION).removeDetail(Details.REDIRECT_URI).detail(Details.CUSTOM_REQUIRED_ACTION,TermsAndConditions.PROVIDER_ID).assertEvent().getSessionId();
  Assert.assertEquals(RequestType.AUTH_RESPONSE,appPage.getRequestType());
  events.expectLogin().session(sessionId).assertEvent();
  UserRepresentation user=keycloakRule.getUser("test","test-user@localhost");
  Map<String,List<String>> attributes=user.getAttributesAsListValues();
  assertNotNull("timestamp for terms acceptance was not stored in user attributes",attributes);
  List<String> termsAndConditions=attributes.get(TermsAndConditions.USER_ATTRIBUTE);
  assertTrue("timestamp for terms acceptance was not stored in user attributes as " + TermsAndConditions.USER_ATTRIBUTE,termsAndConditions.size() == 1);
  String timestamp=termsAndConditions.get(0);
  assertNotNull("expected non-null timestamp for terms acceptance in user attribute " + TermsAndConditions.USER_ATTRIBUTE,timestamp);
  try {
    Integer.parseInt(timestamp);
  }
 catch (  NumberFormatException e) {
    fail("timestamp for terms acceptance is not a valid integer: '" + timestamp + "'");
  }
}
