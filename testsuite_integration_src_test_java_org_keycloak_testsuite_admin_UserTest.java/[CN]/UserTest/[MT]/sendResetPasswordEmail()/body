{
  UserRepresentation userRep=new UserRepresentation();
  userRep.setUsername("user1");
  realm.users().create(userRep);
  UserResource user=realm.users().get("user1");
  try {
    user.resetPasswordEmail();
    fail("Expected failure");
  }
 catch (  ClientErrorException e) {
    assertEquals(400,e.getResponse().getStatus());
    ErrorRepresentation error=e.getResponse().readEntity(ErrorRepresentation.class);
    Assert.assertEquals("User email missing",error.getErrorMessage());
  }
  try {
    userRep=user.toRepresentation();
    userRep.setEmail("user1@localhost");
    userRep.setEnabled(false);
    user.update(userRep);
    user.resetPasswordEmail();
    fail("Expected failure");
  }
 catch (  ClientErrorException e) {
    assertEquals(400,e.getResponse().getStatus());
    ErrorRepresentation error=e.getResponse().readEntity(ErrorRepresentation.class);
    Assert.assertEquals("User is disabled",error.getErrorMessage());
  }
  try {
    userRep.setEnabled(true);
    user.update(userRep);
    user.resetPasswordEmail("invalidClientId");
    fail("Expected failure");
  }
 catch (  ClientErrorException e) {
    assertEquals(400,e.getResponse().getStatus());
    ErrorRepresentation error=e.getResponse().readEntity(ErrorRepresentation.class);
    Assert.assertEquals("invalidClientId not enabled",error.getErrorMessage());
  }
}
