{
  this.driver.navigate().to("http://localhost:8081/test-app/");
  assertTrue(this.driver.getCurrentUrl().startsWith("http://localhost:8081/auth/realms/realm-with-broker/protocol/openid-connect/login"));
  this.loginPage.clickSocial(providerId);
  assertTrue(this.driver.getCurrentUrl().startsWith("http://localhost:8082/auth/realms/realm-with-saml-identity-provider/protocol/saml"));
  this.loginPage.login("saml.user","password");
  assertTrue(this.driver.getCurrentUrl().startsWith("http://localhost:8081/auth/broker/realm-with-broker/" + providerId));
  this.updateProfilePage.assertCurrent();
  String userEmail="new@email.com";
  String userFirstName="New first";
  String userLastName="New last";
  this.updateProfilePage.update(userFirstName,userLastName,userEmail);
  assertTrue(this.driver.getCurrentUrl().startsWith("http://localhost:8081/test-app/"));
  KeycloakSession samlServerSession=brokerServerRule.startSession();
  RealmModel brokerRealm=samlServerSession.realms().getRealm("realm-with-broker");
  UserModel federatedUser=samlServerSession.users().getUserByEmail(userEmail,brokerRealm);
  assertNotNull(federatedUser);
  assertEquals(userFirstName,federatedUser.getFirstName());
  assertEquals(userLastName,federatedUser.getLastName());
  driver.navigate().to("http://localhost:8081/test-app/logout");
  driver.navigate().to("http://localhost:8081/test-app/");
  assertTrue(this.driver.getCurrentUrl().startsWith("http://localhost:8081/auth/realms/realm-with-broker/protocol/openid-connect/login"));
  this.loginPage.clickSocial(providerId);
  assertTrue(this.driver.getCurrentUrl().startsWith("http://localhost:8081/test-app/"));
}
