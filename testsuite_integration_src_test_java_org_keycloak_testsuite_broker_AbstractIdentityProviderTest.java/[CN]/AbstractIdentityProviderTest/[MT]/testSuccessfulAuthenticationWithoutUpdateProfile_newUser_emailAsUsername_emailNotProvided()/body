{
  getRealm().setRegistrationEmailAsUsername(true);
  brokerServerRule.stopSession(this.session,true);
  this.session=brokerServerRule.startSession();
  try {
    IdentityProviderModel identityProviderModel=getIdentityProviderModel();
    identityProviderModel.setUpdateProfileFirstLoginMode(IdentityProviderRepresentation.UPFLM_OFF);
    authenticateWithIdentityProvider(identityProviderModel,"test-user-noemail",false);
    brokerServerRule.stopSession(session,true);
    session=brokerServerRule.startSession();
    RealmModel realm=getRealm();
    UserModel federatedUser=getFederatedUser();
    assertNotNull(federatedUser);
    doAssertFederatedUserNoEmail(federatedUser);
    Set<FederatedIdentityModel> federatedIdentities=this.session.users().getFederatedIdentities(federatedUser,realm);
    assertEquals(1,federatedIdentities.size());
    FederatedIdentityModel federatedIdentityModel=federatedIdentities.iterator().next();
    assertEquals(getProviderId(),federatedIdentityModel.getIdentityProvider());
    revokeGrant();
    driver.navigate().to("http://localhost:8081/test-app/logout");
    driver.navigate().to("http://localhost:8081/test-app");
    assertTrue(this.driver.getCurrentUrl().startsWith("http://localhost:8081/auth/realms/realm-with-broker/protocol/openid-connect/auth"));
  }
  finally {
    getRealm().setRegistrationEmailAsUsername(false);
  }
}
