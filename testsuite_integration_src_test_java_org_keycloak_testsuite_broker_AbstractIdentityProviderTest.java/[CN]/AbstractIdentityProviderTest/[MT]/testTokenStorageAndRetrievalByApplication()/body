{
  IdentityProviderModel identityProviderModel=getIdentityProviderModel();
  identityProviderModel.setStoreToken(true);
  authenticateWithIdentityProvider(identityProviderModel,"test-user");
  UserModel federatedUser=getFederatedUser();
  RealmModel realm=getRealm();
  Set<FederatedIdentityModel> federatedIdentities=this.session.users().getFederatedIdentities(federatedUser,realm);
  assertFalse(federatedIdentities.isEmpty());
  assertEquals(1,federatedIdentities.size());
  FederatedIdentityModel identityModel=federatedIdentities.iterator().next();
  assertNotNull(identityModel.getToken());
  ClientModel clientModel=realm.findClient("test-app");
  ClientIdentityProviderMappingModel providerMappingModel=null;
  for (  ClientIdentityProviderMappingModel identityProviderMappingModel : clientModel.getIdentityProviders()) {
    if (identityProviderMappingModel.getIdentityProvider().equals(getProviderId())) {
      providerMappingModel=identityProviderMappingModel;
      break;
    }
  }
  providerMappingModel.setRetrieveToken(false);
  UserSessionStatus userSessionStatus=retrieveSessionStatus();
  String accessToken=userSessionStatus.getAccessTokenString();
  URI tokenEndpointUrl=Urls.identityProviderRetrieveToken(BASE_URI,getProviderId(),realm.getName());
  final String authHeader="Bearer " + accessToken;
  ClientRequestFilter authFilter=new ClientRequestFilter(){
    @Override public void filter(    ClientRequestContext requestContext) throws IOException {
      requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION,authHeader);
    }
  }
;
  Client client=ClientBuilder.newBuilder().register(authFilter).build();
  WebTarget tokenEndpoint=client.target(tokenEndpointUrl);
  Response response=tokenEndpoint.request().get();
  assertEquals(Status.BAD_REQUEST.getStatusCode(),response.getStatus());
  providerMappingModel.setRetrieveToken(true);
  client=ClientBuilder.newBuilder().register(authFilter).build();
  tokenEndpoint=client.target(tokenEndpointUrl);
  response=tokenEndpoint.request().get();
  assertEquals(Status.OK.getStatusCode(),response.getStatus());
  assertNotNull(response.readEntity(String.class));
  driver.navigate().to("http://localhost:8081/test-app/logout");
  driver.navigate().to("http://localhost:8081/test-app");
  assertTrue(this.driver.getCurrentUrl().startsWith("http://localhost:8081/auth/realms/realm-with-broker/protocol/openid-connect/auth"));
}
