{
  IdentityProviderModel identityProviderModel=getIdentityProviderModel();
  identityProviderModel.setStoreToken(true);
  identityProviderModel.setUpdateProfileFirstLogin(false);
  driver.navigate().to("http://localhost:8081/test-app");
  this.loginPage.clickSocial(getProviderId());
  assertTrue(this.driver.getCurrentUrl().startsWith("http://localhost:8082/auth/"));
  this.loginPage.login("test-user","password");
  doAfterProviderAuthentication();
  changePasswordPage.realm("realm-with-broker");
  changePasswordPage.open();
  changePasswordPage.changePassword("password","password");
  driver.navigate().to("http://localhost:8081/test-app/logout");
  oauth.realm("realm-with-broker");
  oauth.redirectUri("http://localhost:8081/third-party");
  oauth.clientId("third-party");
  oauth.doLoginGrant("test-user@localhost","password");
  grantPage.assertCurrent();
  grantPage.accept();
  assertTrue(oauth.getCurrentQuery().containsKey(OAuth2Constants.CODE));
  ClientModel clientModel=getRealm().findClient("third-party");
  assertEquals(0,clientModel.getIdentityProviders().size());
  ClientIdentityProviderMappingModel providerMappingModel=new ClientIdentityProviderMappingModel();
  providerMappingModel.setIdentityProvider(getProviderId());
  providerMappingModel.setRetrieveToken(true);
  List<ClientIdentityProviderMappingModel> providerMappingModels=new ArrayList<ClientIdentityProviderMappingModel>();
  providerMappingModels.add(providerMappingModel);
  clientModel.updateIdentityProviders(providerMappingModels);
  brokerServerRule.stopSession(session,true);
  session=brokerServerRule.startSession();
  AccessTokenResponse accessToken=oauth.doAccessTokenRequest(oauth.getCurrentQuery().get(OAuth2Constants.CODE),"password");
  URI tokenEndpointUrl=Urls.identityProviderRetrieveToken(BASE_URI,getProviderId(),getRealm().getName());
  String authHeader="Bearer " + accessToken.getAccessToken();
  HtmlUnitDriver htmlUnitDriver=(WebRule.HtmlUnitDriver)this.driver;
  htmlUnitDriver.getWebClient().addRequestHeader(HttpHeaders.AUTHORIZATION,authHeader);
  htmlUnitDriver.navigate().to(tokenEndpointUrl.toString());
  grantPage.assertCurrent();
  grantPage.accept();
  assertNotNull(driver.getPageSource());
  doAssertTokenRetrieval(driver.getPageSource());
}
