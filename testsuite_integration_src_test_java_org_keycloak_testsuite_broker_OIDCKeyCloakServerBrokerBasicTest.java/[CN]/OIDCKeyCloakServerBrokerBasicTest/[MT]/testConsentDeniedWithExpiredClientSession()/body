{
  setUpdateProfileFirstLogin(IdentityProviderRepresentation.UPFLM_OFF);
  Keycloak keycloak1=Keycloak.getInstance("http://localhost:8081/auth","master","admin","admin",org.keycloak.models.Constants.ADMIN_CLI_CLIENT_ID);
  Keycloak keycloak2=Keycloak.getInstance("http://localhost:8082/auth","master","admin","admin",org.keycloak.models.Constants.ADMIN_CLI_CLIENT_ID);
  RealmResource brokeredRealm=keycloak2.realm("realm-with-oidc-identity-provider");
  List<ClientRepresentation> clients=brokeredRealm.clients().findByClientId("broker-app");
  Assert.assertEquals(1,clients.size());
  ClientRepresentation brokerApp=clients.get(0);
  brokerApp.setConsentRequired(true);
  brokeredRealm.clients().get(brokerApp.getId()).update(brokerApp);
  RealmResource realmWithBroker=keycloak1.realm("realm-with-broker");
  RealmRepresentation realmBackup=realmWithBroker.toRepresentation();
  RealmRepresentation realm=realmWithBroker.toRepresentation();
  realm.setAccessCodeLifespanLogin(30);
  ;
  realm.setAccessCodeLifespan(30);
  realm.setAccessCodeLifespanUserAction(30);
  realmWithBroker.update(realm);
  loginIDP("test-user");
  Time.setOffset(60);
  try {
    grantPage.assertCurrent();
    grantPage.cancel();
    errorPage.assertCurrent();
    errorPage.clickBackToApplication();
    assertTrue(this.driver.getCurrentUrl().startsWith("http://localhost:8081/auth/realms/realm-with-broker/protocol/openid-connect/auth"));
    loginIDP("test-user");
    Time.setOffset(120);
    brokerServerRule.stopSession(this.session,true);
    this.session=brokerServerRule.startSession();
    session.sessions().removeExpired(getRealm());
    brokerServerRule.stopSession(this.session,true);
    this.session=brokerServerRule.startSession();
    grantPage.assertCurrent();
    grantPage.cancel();
    errorPage.assertCurrent();
    try {
      errorPage.clickBackToApplication();
      fail("Not expected to have link backToApplication available");
    }
 catch (    NoSuchElementException nsee) {
    }
  }
  finally {
    Time.setOffset(0);
  }
  brokerApp.setConsentRequired(false);
  brokeredRealm.clients().get(brokerApp.getId()).update(brokerApp);
  realmWithBroker.update(realmBackup);
}
