{
  KeycloakSession session=keycloakRule.startSession();
  try {
    RealmModel appRealm=session.realms().getRealmByName("test");
    UserFederationProviderModel model=new UserFederationProviderModel(ldapModel.getId(),ldapModel.getProviderName(),ldapModel.getConfig(),ldapModel.getPriority(),ldapModel.getDisplayName(),-1,-1,0);
    model.getConfig().put(LDAPConstants.EDIT_MODE,UserFederationProvider.EditMode.UNSYNCED.toString());
    appRealm.updateUserFederationProvider(model);
    UserModel user=session.users().getUserByUsername("johnkeycloak",appRealm);
    Assert.assertNotNull(user);
    Assert.assertNotNull(user.getFederationLink());
    Assert.assertEquals(user.getFederationLink(),ldapModel.getId());
    UserCredentialModel cred=UserCredentialModel.password("Candycand1");
    session.userCredentialManager().updateCredential(appRealm,user,cred);
    CredentialModel userCredentialValueModel=session.userCredentialManager().getStoredCredentialsByType(appRealm,user,CredentialModel.PASSWORD).get(0);
    Assert.assertEquals(UserCredentialModel.PASSWORD,userCredentialValueModel.getType());
    Assert.assertTrue(session.userCredentialManager().isValid(appRealm,user,cred));
    LDAPFederationProvider ldapProvider=FederationTestUtils.getLdapProvider(session,model);
    LDAPObject ldapUser=ldapProvider.loadLDAPUserByUsername(appRealm,"johnkeycloak");
    ldapProvider.getLdapIdentityStore().validatePassword(ldapUser,"Password1");
    Assert.assertTrue(session.users().removeUser(appRealm,user));
    Assert.assertNull(session.userStorage().getUserByUsername("johnkeycloak",appRealm));
    Assert.assertNotNull(session.users().getUserByUsername("johnkeycloak",appRealm));
  }
  finally {
    keycloakRule.stopSession(session,false);
  }
  session=keycloakRule.startSession();
  try {
    RealmModel appRealm=session.realms().getRealmByName("test");
    Assert.assertEquals(UserFederationProvider.EditMode.WRITABLE.toString(),appRealm.getUserFederationProviders().get(0).getConfig().get(LDAPConstants.EDIT_MODE));
  }
  finally {
    keycloakRule.stopSession(session,false);
  }
}
