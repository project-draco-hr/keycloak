{
  clearExportImportProperties();
  KeycloakSession session=keycloakRule.startSession();
  RealmModel realm=new RealmManager(session).createRealm("exported-component");
  String realmId=realm.getId();
  ComponentModel component=new ComponentModel();
  component.setParentId(realm.getId());
  component.setProviderId(UserMapStorageFactory.PROVIDER_ID);
  component.setProviderType(UserStorageProvider.class.getName());
  component.setName("parent");
  component.setSubType("subtype");
  component.put("attr","value");
  component=realm.addComponentModel(component);
  ComponentModel subComponent=new ComponentModel();
  subComponent.setParentId(component.getId());
  subComponent.setProviderId(UserMapStorageFactory.PROVIDER_ID);
  subComponent.setProviderType(UserStorageProvider.class.getName());
  subComponent.setName("child");
  subComponent.setSubType("subtype2");
  subComponent.put("attr","value2");
  subComponent=realm.addComponentModel(subComponent);
  keycloakRule.stopSession(session,true);
  String targetFilePath=basePath + File.separator + "singleFile-full.json";
  System.out.println("export file: " + targetFilePath);
  session=keycloakRule.startSession();
  ExportImportConfig.setProvider(SingleFileExportProviderFactory.PROVIDER_ID);
  ExportImportConfig.setFile(targetFilePath);
  ExportImportConfig.setRealmName("exported-component");
  ExportImportConfig.setAction(ExportImportConfig.ACTION_EXPORT);
  new ExportImportManager(session).runExport();
  session.realms().removeRealm(realmId);
  keycloakRule.stopSession(session,true);
  session=keycloakRule.startSession();
  Assert.assertNull(session.realms().getRealmByName("exported-component"));
  ExportImportConfig.setAction(ExportImportConfig.ACTION_IMPORT);
  new ExportImportManager(session).runImport();
  realm=session.realms().getRealmByName("exported-component");
  Assert.assertNotNull(realm);
  component=realm.getComponent(component.getId());
  Assert.assertNotNull(component);
  Assert.assertEquals(component.getParentId(),realm.getId());
  Assert.assertEquals(component.getName(),"parent");
  Assert.assertEquals(component.getSubType(),"subtype");
  Assert.assertEquals(component.getProviderId(),UserMapStorageFactory.PROVIDER_ID);
  Assert.assertEquals(component.getProviderType(),UserStorageProvider.class.getName());
  Assert.assertEquals(component.getConfig().getFirst("attr"),"value");
  subComponent=realm.getComponents(component.getId()).get(0);
  Assert.assertEquals(subComponent.getParentId(),component.getId());
  Assert.assertEquals(subComponent.getName(),"child");
  Assert.assertEquals(subComponent.getSubType(),"subtype2");
  Assert.assertEquals(subComponent.getProviderId(),UserMapStorageFactory.PROVIDER_ID);
  Assert.assertEquals(subComponent.getProviderType(),UserStorageProvider.class.getName());
  Assert.assertEquals(subComponent.getConfig().getFirst("attr"),"value2");
  session.realms().removeRealm(realmId);
  keycloakRule.stopSession(session,true);
}
