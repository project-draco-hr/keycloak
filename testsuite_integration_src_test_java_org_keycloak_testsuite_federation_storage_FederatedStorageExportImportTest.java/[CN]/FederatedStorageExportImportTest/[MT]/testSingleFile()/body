{
  clearExportImportProperties();
  KeycloakSession session=keycloakRule.startSession();
  RealmModel realm=new RealmManager(session).createRealm("exported");
  String realmId=realm.getId();
  RoleModel role=realm.addRole("test-role");
  GroupModel group=realm.createGroup("test-group");
  String groupId=group.getId();
  String userId="f:1:path";
  List<String> attrValues=new LinkedList<>();
  attrValues.add("1");
  attrValues.add("2");
  session.userFederatedStorage().setSingleAttribute(realm,userId,"single1","value1");
  session.userFederatedStorage().setAttribute(realm,userId,"list1",attrValues);
  session.userFederatedStorage().addRequiredAction(realm,userId,"UPDATE_PASSWORD");
  CredentialModel credential=new CredentialModel();
  getHashProvider(session,realm.getPasswordPolicy()).encode("password",realm.getPasswordPolicy(),credential);
  session.userFederatedStorage().createCredential(realm,userId,credential);
  session.userFederatedStorage().grantRole(realm,userId,role);
  session.userFederatedStorage().joinGroup(realm,userId,group);
  keycloakRule.stopSession(session,true);
  String targetFilePath=basePath + File.separator + "singleFile-full.json";
  System.out.println("export file: " + targetFilePath);
  session=keycloakRule.startSession();
  ExportImportConfig.setProvider(SingleFileExportProviderFactory.PROVIDER_ID);
  ExportImportConfig.setFile(targetFilePath);
  ExportImportConfig.setRealmName("exported");
  ExportImportConfig.setAction(ExportImportConfig.ACTION_EXPORT);
  new ExportImportManager(session).runExport();
  session.realms().removeRealm(realmId);
  keycloakRule.stopSession(session,true);
  session=keycloakRule.startSession();
  Assert.assertNull(session.realms().getRealmByName("exported"));
  ExportImportConfig.setAction(ExportImportConfig.ACTION_IMPORT);
  new ExportImportManager(session).runImport();
  realm=session.realms().getRealmByName("exported");
  Assert.assertNotNull(realm);
  role=realm.getRole("test-role");
  group=realm.getGroupById(groupId);
  Assert.assertEquals(1,session.userFederatedStorage().getStoredUsersCount(realm));
  MultivaluedHashMap<String,String> attributes=session.userFederatedStorage().getAttributes(realm,userId);
  Assert.assertEquals(2,attributes.size());
  Assert.assertEquals("value1",attributes.getFirst("single1"));
  Assert.assertTrue(attributes.getList("list1").contains("1"));
  Assert.assertTrue(attributes.getList("list1").contains("2"));
  Assert.assertTrue(session.userFederatedStorage().getRequiredActions(realm,userId).contains("UPDATE_PASSWORD"));
  Assert.assertTrue(session.userFederatedStorage().getRoleMappings(realm,userId).contains(role));
  Assert.assertTrue(session.userFederatedStorage().getGroups(realm,userId).contains(group));
  List<CredentialModel> creds=session.userFederatedStorage().getStoredCredentials(realm,userId);
  Assert.assertEquals(1,creds.size());
  Assert.assertTrue(getHashProvider(session,realm.getPasswordPolicy()).verify("password",creds.get(0)));
  session.realms().removeRealm(realmId);
  keycloakRule.stopSession(session,true);
}
