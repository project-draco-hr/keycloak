{
  KeycloakSession session=keycloakRule.startSession();
  RealmModel realm=session.realms().getRealmByName("test");
  UserModel thor=session.users().getUserByUsername("thor",realm);
  thor.setFirstName("Stian");
  thor.setLastName("Thorgersen");
  thor.setEmailVerified(true);
  long thorCreated=System.currentTimeMillis() - 100;
  thor.setCreatedTimestamp(thorCreated);
  thor.setEmail("thor@hammer.com");
  thor.setSingleAttribute("test-attribute","value");
  RoleModel role=realm.addRole("foo-role");
  thor.grantRole(role);
  GroupModel group=realm.createGroup("my-group");
  thor.joinGroup(group);
  thor.addRequiredAction("POOP");
  keycloakRule.stopSession(session,true);
  session=keycloakRule.startSession();
  realm=session.realms().getRealmByName("test");
  thor=session.users().getUserByUsername("thor",realm);
  Assert.assertEquals("Stian",thor.getFirstName());
  Assert.assertEquals("Thorgersen",thor.getLastName());
  Assert.assertEquals("thor@hammer.com",thor.getEmail());
  Assert.assertEquals("value",thor.getFirstAttribute("test-attribute"));
  Assert.assertTrue(thor.isEmailVerified());
  Assert.assertTrue(thor instanceof UserAdapter);
  Set<RoleModel> roles=thor.getRoleMappings();
  System.out.println("num roles " + roles.size());
  Assert.assertTrue(roles.size() > 1);
  role=realm.getRole("foo-role");
  Assert.assertTrue(thor.hasRole(role));
  Set<GroupModel> groups=thor.getGroups();
  boolean foundGroup=false;
  for (  GroupModel g : groups) {
    if (g.getName().equals("my-group"))     foundGroup=true;
  }
  Assert.assertTrue(foundGroup);
  System.out.println("num groups " + groups.size());
  Assert.assertTrue(thor.getRequiredActions().iterator().next().equals("POOP"));
  thor.removeRequiredAction("POOP");
  session.userCredentialManager().updateCredential(realm,thor,UserCredentialModel.password("lightning"));
  keycloakRule.stopSession(session,true);
  loginSuccessAndLogout("thor","lightning");
  session=keycloakRule.startSession();
  realm=session.realms().getRealmByName("test");
  realm.removeComponent(writableProvider);
  keycloakRule.stopSession(session,true);
  session=keycloakRule.startSession();
  realm=session.realms().getRealmByName("test");
  createUserPropModel(realm);
  keycloakRule.stopSession(session,true);
  loginSuccessAndLogout("thor","hammer");
  session=keycloakRule.startSession();
  realm=session.realms().getRealmByName("test");
  thor=session.users().getUserByUsername("thor",realm);
  Assert.assertNull(thor.getFirstName());
  Assert.assertNull(thor.getLastName());
  Assert.assertNull(thor.getEmail());
  Assert.assertNull(thor.getFirstAttribute("test-attribute"));
  Assert.assertFalse(thor.isEmailVerified());
  role=realm.getRole("foo-role");
  Assert.assertFalse(thor.hasRole(role));
  groups=thor.getGroups();
  foundGroup=false;
  for (  GroupModel g : groups) {
    if (g.getName().equals("my-group"))     foundGroup=true;
  }
  Assert.assertFalse(foundGroup);
}
