{
  Calendar cal=Calendar.getInstance();
  cal.add(Calendar.HOUR,4 * 24);
  UserStorageProviderModel model=new UserStorageProviderModel(writableProvider);
  model.setCachePolicy(UserStorageProviderModel.CachePolicy.EVICT_WEEKLY);
  model.setEvictionDay(cal.get(Calendar.DAY_OF_WEEK));
  model.setEvictionHour(cal.get(Calendar.HOUR_OF_DAY));
  model.setEvictionMinute(cal.get(Calendar.MINUTE));
  KeycloakSession session=keycloakRule.startSession();
  RealmModel realm=session.realms().getRealmByName("test");
  CachedUserModel thor=(CachedUserModel)session.users().getUserByUsername("thor",realm);
  realm.updateComponent(model);
  keycloakRule.stopSession(session,true);
  Time.setOffset(60 * 60 * 24* 2);
  session=keycloakRule.startSession();
  realm=session.realms().getRealmByName("test");
  UserModel thor2=session.users().getUserByUsername("thor",realm);
  Assert.assertTrue(thor2 instanceof CachedUserModel);
  keycloakRule.stopSession(session,true);
  Time.setOffset(Time.getOffset() + 60 * 60 * 24* 3);
  session=keycloakRule.startSession();
  realm=session.realms().getRealmByName("test");
  thor2=session.users().getUserByUsername("thor",realm);
  Assert.assertFalse(thor2 instanceof CachedUserModel);
  model.getConfig().remove("cachePolicy");
  model.getConfig().remove("evictionHour");
  model.getConfig().remove("evictionMinute");
  model.getConfig().remove("evictionDay");
  realm.updateComponent(model);
  keycloakRule.stopSession(session,true);
}
