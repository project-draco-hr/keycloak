{
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      dummyModel=appRealm.addUserFederationProvider(DummyUserFederationProviderFactory.PROVIDER_NAME,new HashMap<String,String>(),1,"test-sync-dummy",-1,1,0);
    }
  }
);
  KeycloakSession session=keycloakRule.startSession();
  try {
    KeycloakSessionFactory sessionFactory=session.getKeycloakSessionFactory();
    DummyUserFederationProviderFactory dummyFedFactory=(DummyUserFederationProviderFactory)sessionFactory.getProviderFactory(UserFederationProvider.class,DummyUserFederationProviderFactory.PROVIDER_NAME);
    int full=dummyFedFactory.getFullSyncCounter();
    int changed=dummyFedFactory.getChangedSyncCounter();
    UsersSyncManager usersSyncManager=new UsersSyncManager();
    usersSyncManager.bootstrapPeriodic(sessionFactory,session.getProvider(TimerProvider.class));
    sleep(1800);
    RealmModel appRealm=session.realms().getRealmByName("test");
    usersSyncManager.notifyToRefreshPeriodicSync(session,appRealm,dummyModel,true);
    log.infof("Notified sync manager about cancel periodic sync");
    while (true) {
      UserFederationSyncResult result=usersSyncManager.syncChangedUsers(session.getKeycloakSessionFactory(),appRealm.getId(),dummyModel);
      if (result.isIgnored()) {
        log.infof("Still waiting for lock before periodic sync is finished",result.toString());
        sleep(1000);
      }
 else {
        break;
      }
    }
    int newChanged=dummyFedFactory.getChangedSyncCounter();
    Assert.assertEquals(full,dummyFedFactory.getFullSyncCounter());
    Assert.assertTrue("Assertion failed. newChanged=" + newChanged + ", changed="+ changed,newChanged > (changed + 1));
    sleep(1800);
    Assert.assertEquals(full,dummyFedFactory.getFullSyncCounter());
    int newestChanged=dummyFedFactory.getChangedSyncCounter();
    Assert.assertEquals("Assertion failed. newChanged=" + newChanged + ", newestChanged="+ newestChanged,newChanged,newestChanged);
  }
  finally {
    keycloakRule.stopSession(session,true);
  }
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      appRealm.removeUserFederationProvider(dummyModel);
    }
  }
);
}
