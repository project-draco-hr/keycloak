{
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      ClientModel app=appRealm.getClientByClientId(APP_SERVER_BASE_URL + "/employee2/");
      app.addProtocolMapper(GroupMembershipMapper.create("groups","group",null,null,true));
      app.addProtocolMapper(UserAttributeStatementMapper.createAttributeMapper("topAttribute","topAttribute","topAttribute","Basic",null,false,null));
      app.addProtocolMapper(UserAttributeStatementMapper.createAttributeMapper("level2Attribute","level2Attribute","level2Attribute","Basic",null,false,null));
    }
  }
,"demo");
{
    SendUsernameServlet.sentPrincipal=null;
    SendUsernameServlet.checkRoles=null;
    driver.navigate().to(APP_SERVER_BASE_URL + "/employee2/");
    Assert.assertTrue(driver.getCurrentUrl().startsWith(AUTH_SERVER_URL + "/realms/demo/protocol/saml"));
    List<String> requiredRoles=new LinkedList<>();
    requiredRoles.add("manager");
    requiredRoles.add("user");
    SendUsernameServlet.checkRoles=requiredRoles;
    loginPage.login("level2GroupUser","password");
    assertEquals(driver.getCurrentUrl(),APP_SERVER_BASE_URL + "/employee2/");
    SendUsernameServlet.checkRoles=null;
    SamlPrincipal principal=(SamlPrincipal)SendUsernameServlet.sentPrincipal;
    Assert.assertNotNull(principal);
    assertEquals("level2@redhat.com",principal.getAttribute(X500SAMLProfileConstants.EMAIL.get()));
    assertEquals("true",principal.getAttribute("topAttribute"));
    assertEquals("true",principal.getAttribute("level2Attribute"));
    List<String> groups=principal.getAttributes("group");
    Assert.assertNotNull(groups);
    Set<String> groupSet=new HashSet<>();
    assertEquals("level2@redhat.com",principal.getFriendlyAttribute("email"));
    driver.navigate().to(APP_SERVER_BASE_URL + "/employee2/?GLO=true");
    checkLoggedOut(APP_SERVER_BASE_URL + "/employee2/");
  }
{
    SendUsernameServlet.sentPrincipal=null;
    SendUsernameServlet.checkRoles=null;
    driver.navigate().to(APP_SERVER_BASE_URL + "/employee2/");
    Assert.assertTrue(driver.getCurrentUrl().startsWith(AUTH_SERVER_URL + "/realms/demo/protocol/saml"));
    List<String> requiredRoles=new LinkedList<>();
    requiredRoles.add("manager");
    requiredRoles.add("employee");
    requiredRoles.add("user");
    SendUsernameServlet.checkRoles=requiredRoles;
    loginPage.login("bburke","password");
    assertEquals(driver.getCurrentUrl(),APP_SERVER_BASE_URL + "/employee2/");
    SendUsernameServlet.checkRoles=null;
    SamlPrincipal principal=(SamlPrincipal)SendUsernameServlet.sentPrincipal;
    Assert.assertNotNull(principal);
    assertEquals("bburke@redhat.com",principal.getAttribute(X500SAMLProfileConstants.EMAIL.get()));
    assertEquals("bburke@redhat.com",principal.getFriendlyAttribute("email"));
    assertEquals("617",principal.getAttribute("phone"));
    Assert.assertNull(principal.getFriendlyAttribute("phone"));
    driver.navigate().to(APP_SERVER_BASE_URL + "/employee2/?GLO=true");
    checkLoggedOut(APP_SERVER_BASE_URL + "/employee2/");
  }
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      ClientModel app=appRealm.getClientByClientId(APP_SERVER_BASE_URL + "/employee2/");
      for (      ProtocolMapperModel mapper : app.getProtocolMappers()) {
        if (mapper.getName().equals("role-list")) {
          app.removeProtocolMapper(mapper);
          mapper.setId(null);
          mapper.getConfig().put(RoleListMapper.SINGLE_ROLE_ATTRIBUTE,"true");
          mapper.getConfig().put(AttributeStatementHelper.SAML_ATTRIBUTE_NAME,"memberOf");
          app.addProtocolMapper(mapper);
        }
      }
      app.addProtocolMapper(HardcodedAttributeMapper.create("hardcoded-attribute","hardcoded-attribute","Basic",null,"hard",false,null));
      app.addProtocolMapper(HardcodedRole.create("hardcoded-role","hardcoded-role"));
      app.addProtocolMapper(RoleNameMapper.create("renamed-role","manager","el-jefe"));
      app.addProtocolMapper(RoleNameMapper.create("renamed-employee-role",APP_SERVER_BASE_URL + "/employee/.employee","pee-on"));
    }
  }
,"demo");
  System.out.println(">>>>>>>>>> single role attribute <<<<<<<<");
{
    SendUsernameServlet.sentPrincipal=null;
    SendUsernameServlet.checkRoles=null;
    driver.navigate().to(APP_SERVER_BASE_URL + "/employee2/");
    Assert.assertTrue(driver.getCurrentUrl().startsWith(AUTH_SERVER_URL + "/realms/demo/protocol/saml"));
    List<String> requiredRoles=new LinkedList<>();
    requiredRoles.add("el-jefe");
    requiredRoles.add("user");
    requiredRoles.add("hardcoded-role");
    requiredRoles.add("pee-on");
    SendUsernameServlet.checkRoles=requiredRoles;
    loginPage.login("bburke","password");
    assertEquals(driver.getCurrentUrl(),APP_SERVER_BASE_URL + "/employee2/");
    SendUsernameServlet.checkRoles=null;
    SamlPrincipal principal=(SamlPrincipal)SendUsernameServlet.sentPrincipal;
    Assert.assertNotNull(principal);
    assertEquals("hard",principal.getAttribute("hardcoded-attribute"));
  }
}
