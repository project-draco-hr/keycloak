{
{
    SamlKeycloakRule.SendUsernameServlet.sentPrincipal=null;
    SamlKeycloakRule.SendUsernameServlet.checkRoles=null;
    driver.navigate().to("http://localhost:8081/employee2/");
    Assert.assertTrue(driver.getCurrentUrl().startsWith("http://localhost:8081/auth/realms/demo/protocol/saml"));
    List<String> requiredRoles=new LinkedList<>();
    requiredRoles.add("manager");
    requiredRoles.add("employee");
    requiredRoles.add("user");
    SamlKeycloakRule.SendUsernameServlet.checkRoles=requiredRoles;
    loginPage.login("bburke","password");
    Assert.assertEquals(driver.getCurrentUrl(),"http://localhost:8081/employee2/");
    SamlKeycloakRule.SendUsernameServlet.checkRoles=null;
    SamlPrincipal principal=(SamlPrincipal)SamlKeycloakRule.SendUsernameServlet.sentPrincipal;
    Assert.assertNotNull(principal);
    Assert.assertEquals("bburke@redhat.com",principal.getAttribute(X500SAMLProfileConstants.EMAIL.get()));
    Assert.assertEquals("bburke@redhat.com",principal.getFriendlyAttribute("email"));
    Assert.assertEquals("617",principal.getAttribute("phone"));
    Assert.assertNull(principal.getFriendlyAttribute("phone"));
    driver.navigate().to("http://localhost:8081/employee2/?GLO=true");
    checkLoggedOut("http://localhost:8081/employee2/");
  }
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      ClientModel app=appRealm.getClientByClientId("http://localhost:8081/employee2/");
      for (      ProtocolMapperModel mapper : app.getProtocolMappers()) {
        if (mapper.getName().equals("role-list")) {
          app.removeProtocolMapper(mapper);
          mapper.setId(null);
          mapper.getConfig().put(RoleListMapper.SINGLE_ROLE_ATTRIBUTE,"true");
          mapper.getConfig().put(AttributeStatementHelper.SAML_ATTRIBUTE_NAME,"memberOf");
          app.addProtocolMapper(mapper);
        }
      }
      app.addProtocolMapper(HardcodedAttributeMapper.create("hardcoded-attribute","hardcoded-attribute","Basic",null,"hard",false,null));
      app.addProtocolMapper(HardcodedRole.create("hardcoded-role","hardcoded-role"));
      app.addProtocolMapper(RoleNameMapper.create("renamed-role","manager","el-jefe"));
      app.addProtocolMapper(RoleNameMapper.create("renamed-employee-role","http://localhost:8081/employee/.employee","pee-on"));
    }
  }
,"demo");
  System.out.println(">>>>>>>>>> single role attribute <<<<<<<<");
{
    SamlKeycloakRule.SendUsernameServlet.sentPrincipal=null;
    SamlKeycloakRule.SendUsernameServlet.checkRoles=null;
    driver.navigate().to("http://localhost:8081/employee2/");
    Assert.assertTrue(driver.getCurrentUrl().startsWith("http://localhost:8081/auth/realms/demo/protocol/saml"));
    List<String> requiredRoles=new LinkedList<>();
    requiredRoles.add("el-jefe");
    requiredRoles.add("user");
    requiredRoles.add("hardcoded-role");
    requiredRoles.add("pee-on");
    SamlKeycloakRule.SendUsernameServlet.checkRoles=requiredRoles;
    SamlKeycloakRule.SendUsernameServlet.checkRoles=requiredRoles;
    loginPage.login("bburke","password");
    Assert.assertEquals(driver.getCurrentUrl(),"http://localhost:8081/employee2/");
    SamlKeycloakRule.SendUsernameServlet.checkRoles=null;
    SamlPrincipal principal=(SamlPrincipal)SamlKeycloakRule.SendUsernameServlet.sentPrincipal;
    Assert.assertNotNull(principal);
    Assert.assertEquals("hard",principal.getAttribute("hardcoded-attribute"));
  }
}
