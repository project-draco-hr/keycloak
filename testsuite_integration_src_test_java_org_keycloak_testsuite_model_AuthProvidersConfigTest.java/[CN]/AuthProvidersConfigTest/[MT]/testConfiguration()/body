{
  RealmModel realm=realmManager.createRealm("auth-providers-config-test");
  Map<String,String> ldapConfig=new HashMap<String,String>();
  ldapConfig.put("connectionUrl","ldap://localhost:10389");
  ldapConfig.put("baseDn","dc=keycloak,dc=org");
  realm.setLdapServerConfig(ldapConfig);
  AuthenticationProviderModel ap1=new AuthenticationProviderModel(AuthProviderConstants.PROVIDER_NAME_MODEL,true,Collections.EMPTY_MAP);
  AuthenticationProviderModel ap2=new AuthenticationProviderModel(AuthProviderConstants.PROVIDER_NAME_EXTERNAL_MODEL,true,Collections.EMPTY_MAP);
  AuthenticationProviderModel ap3=new AuthenticationProviderModel(AuthProviderConstants.PROVIDER_NAME_PICKETLINK,true,Collections.EMPTY_MAP);
  List<AuthenticationProviderModel> authProviders=new ArrayList<AuthenticationProviderModel>();
  authProviders.add(ap1);
  authProviders.add(ap2);
  authProviders.add(ap3);
  realm.setAuthenticationProviders(authProviders);
  commit();
  RealmModel persisted=realmManager.getRealm(realm.getId());
  Assert.assertEquals(persisted.getLdapServerConfig(),ldapConfig);
  List<AuthenticationProviderModel> persProviders=persisted.getAuthenticationProviders();
  Assert.assertEquals(persProviders.size(),3);
  assertProviderEquals(persProviders.get(0),ap1);
  assertProviderEquals(persProviders.get(1),ap2);
  assertProviderEquals(persProviders.get(2),ap3);
  authProviders=new ArrayList<AuthenticationProviderModel>();
  authProviders.add(ap3);
  authProviders.add(ap2);
  authProviders.add(ap1);
  persisted.setAuthenticationProviders(authProviders);
  commit();
  persisted=realmManager.getRealm(realm.getId());
  persProviders=persisted.getAuthenticationProviders();
  Assert.assertEquals(persProviders.size(),3);
  assertProviderEquals(persProviders.get(0),ap3);
  assertProviderEquals(persProviders.get(1),ap2);
  assertProviderEquals(persProviders.get(2),ap1);
}
