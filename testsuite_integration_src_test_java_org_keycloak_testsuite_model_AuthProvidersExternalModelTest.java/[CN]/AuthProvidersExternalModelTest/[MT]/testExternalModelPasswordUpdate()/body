{
  setupAuthenticationProviders();
  UserModel john=realmManager.getSession().users().addUser(realm2,"john");
  john.setEnabled(true);
  john.setAuthenticationLink(new AuthenticationLinkModel(AuthProviderConstants.PROVIDER_NAME_EXTERNAL_MODEL,realmManager.getSession().users().getUserByUsername("john",realm1).getId()));
  try {
    ResteasyProviderFactory.pushContext(KeycloakSession.class,session);
    AuthenticationProviderManager authProviderManager=AuthenticationProviderManager.getManager(realm2,session);
    try {
      Assert.assertTrue(authProviderManager.updatePassword(john,"password-updated"));
    }
 catch (    AuthenticationProviderException ape) {
      ape.printStackTrace();
      Assert.fail("Error not expected");
    }
    MultivaluedMap<String,String> formData=createFormData("john","password-updated");
    Assert.assertEquals(AuthenticationManager.AuthenticationStatus.SUCCESS,am.authenticateForm(session,null,realm1,formData));
    Assert.assertEquals(AuthenticationManager.AuthenticationStatus.SUCCESS,am.authenticateForm(session,null,realm2,formData));
    setPasswordUpdateForProvider(false,AuthProviderConstants.PROVIDER_NAME_EXTERNAL_MODEL,realm2);
    try {
      Assert.assertFalse(authProviderManager.updatePassword(john,"password-updated2"));
    }
 catch (    AuthenticationProviderException ape) {
      ape.printStackTrace();
      Assert.fail("Error not expected");
    }
    formData=createFormData("john","password-updated2");
    Assert.assertEquals(AuthenticationManager.AuthenticationStatus.INVALID_CREDENTIALS,am.authenticateForm(session,null,realm1,formData));
    Assert.assertEquals(AuthenticationManager.AuthenticationStatus.INVALID_CREDENTIALS,am.authenticateForm(session,null,realm2,formData));
    setPasswordUpdateForProvider(true,AuthProviderConstants.PROVIDER_NAME_EXTERNAL_MODEL,realm2);
    realm1.setPasswordPolicy(new PasswordPolicy("length(8)"));
    try {
      authProviderManager.updatePassword(john,"passw");
      Assert.fail("Update not expected to pass");
    }
 catch (    AuthenticationProviderException ape) {
    }
  }
  finally {
    ResteasyProviderFactory.clearContextData();
  }
}
