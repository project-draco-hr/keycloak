{
  int started=Time.currentTime();
  UserSessionModel[] origSessions=createSessions();
  resetSession();
  Map<String,String> offlineSessions=new HashMap<>();
  ClientModel testApp=realm.getClientByClientId("test-app");
  List<UserSessionModel> userSessions=session.sessions().getUserSessions(realm,testApp);
  for (  UserSessionModel userSession : userSessions) {
    offlineSessions.putAll(createOfflineSessionIncludeClientSessions(userSession));
  }
  resetSession();
  for (  Map.Entry<String,String> entry : offlineSessions.entrySet()) {
    Assert.assertTrue(sessionManager.findOfflineClientSession(realm,entry.getKey(),entry.getValue()) != null);
  }
  UserSessionModel session0=session.sessions().getOfflineUserSession(realm,origSessions[0].getId());
  Assert.assertNotNull(session0);
  List<String> clientSessions=new LinkedList<>();
  for (  ClientSessionModel clientSession : session0.getClientSessions()) {
    clientSessions.add(clientSession.getId());
    Assert.assertNotNull(session.sessions().getOfflineClientSession(realm,clientSession.getId()));
  }
  Assert.assertEquals(3,persister.getUserSessionsCount(true));
  session0.setLastSessionRefresh(0);
  resetSession();
  session.sessions().removeExpiredUserSessions(realm);
  resetSession();
  Assert.assertNull(session.sessions().getOfflineUserSession(realm,origSessions[0].getId()));
  for (  String clientSession : clientSessions) {
    Assert.assertNull(session.sessions().getOfflineClientSession(realm,origSessions[0].getId()));
    offlineSessions.remove(clientSession);
  }
  for (  Map.Entry<String,String> entry : offlineSessions.entrySet()) {
    Assert.assertTrue(sessionManager.findOfflineClientSession(realm,entry.getKey(),entry.getValue()) != null);
  }
  Assert.assertEquals(2,persister.getUserSessionsCount(true));
  Time.setOffset(3000000);
  try {
    session.sessions().removeExpiredUserSessions(realm);
    resetSession();
    for (    Map.Entry<String,String> entry : offlineSessions.entrySet()) {
      Assert.assertTrue(sessionManager.findOfflineClientSession(realm,entry.getKey(),entry.getValue()) == null);
    }
    Assert.assertEquals(0,persister.getUserSessionsCount(true));
  }
  finally {
    Time.setOffset(0);
  }
}
