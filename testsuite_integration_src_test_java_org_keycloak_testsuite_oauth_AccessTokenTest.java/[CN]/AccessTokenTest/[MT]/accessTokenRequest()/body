{
  oauth.doLogin("test-user@localhost","password");
  Event loginEvent=events.expectLogin().assertEvent();
  String sessionId=loginEvent.getSessionId();
  String codeId=loginEvent.getDetails().get(Details.CODE_ID);
  String code=oauth.getCurrentQuery().get(OAuth2Constants.CODE);
  AccessTokenResponse response=oauth.doAccessTokenRequest(code,"password");
  Assert.assertEquals(200,response.getStatusCode());
  Assert.assertThat(response.getExpiresIn(),allOf(greaterThanOrEqualTo(250),lessThanOrEqualTo(300)));
  Assert.assertThat(response.getRefreshExpiresIn(),allOf(greaterThanOrEqualTo(1750),lessThanOrEqualTo(1800)));
  Assert.assertEquals("bearer",response.getTokenType());
  AccessToken token=oauth.verifyToken(response.getAccessToken());
  Assert.assertEquals(keycloakRule.getUser("test","test-user@localhost").getId(),token.getSubject());
  Assert.assertNotEquals("test-user@localhost",token.getSubject());
  Assert.assertEquals(sessionId,token.getSessionState());
  Assert.assertEquals(1,token.getRealmAccess().getRoles().size());
  Assert.assertTrue(token.getRealmAccess().isUserInRole("user"));
  Assert.assertEquals(1,token.getResourceAccess(oauth.getClientId()).getRoles().size());
  Assert.assertTrue(token.getResourceAccess(oauth.getClientId()).isUserInRole("customer-user"));
  Event event=events.expectCodeToToken(codeId,sessionId).assertEvent();
  Assert.assertEquals(token.getId(),event.getDetails().get(Details.TOKEN_ID));
  Assert.assertEquals(oauth.verifyRefreshToken(response.getRefreshToken()).getId(),event.getDetails().get(Details.REFRESH_TOKEN_ID));
  Assert.assertEquals(sessionId,token.getSessionState());
}
