{
  RealmResource realm=keycloak.realms().realm("test");
  RoleRepresentation realmRole=new RoleRepresentation();
  realmRole.setName("realm-test-role");
  realm.roles().create(realmRole);
  realmRole=realm.roles().get("realm-test-role").toRepresentation();
  RoleRepresentation realmRole2=new RoleRepresentation();
  realmRole2.setName("realm-test-role2");
  realm.roles().create(realmRole2);
  realmRole2=realm.roles().get("realm-test-role2").toRepresentation();
  List<UserRepresentation> users=realm.users().search("test-user@localhost",-1,-1);
  Assert.assertEquals(1,users.size());
  UserRepresentation user=users.get(0);
  List<RoleRepresentation> addRoles=new LinkedList<>();
  addRoles.add(realmRole);
  addRoles.add(realmRole2);
  realm.users().get(user.getId()).roles().realmLevel().add(addRoles);
  ClientTemplateRepresentation rep=new ClientTemplateRepresentation();
  rep.setName("template");
  rep.setProtocol("oidc");
  Response response=realm.clientTemplates().create(rep);
  Assert.assertEquals(201,response.getStatus());
  URI templateUri=response.getLocation();
  response.close();
  ClientTemplateResource templateResource=keycloak.proxy(ClientTemplateResource.class,templateUri);
  ProtocolMapperModel hard=HardcodedClaim.create("hard","hard","coded","String",false,null,true,true);
  ProtocolMapperRepresentation mapper=ModelToRepresentation.toRepresentation(hard);
  response=templateResource.getProtocolMappers().createMapper(mapper);
  Assert.assertEquals(201,response.getStatus());
  response.close();
  List<ClientRepresentation> clients=realm.clients().findAll();
  ClientRepresentation clientRep=null;
  for (  ClientRepresentation c : clients) {
    if (c.getClientId().equals("test-app")) {
      clientRep=c;
      break;
    }
  }
  clientRep.setClientTemplate("template");
  clientRep.setFullScopeAllowed(false);
  realm.clients().get(clientRep.getId()).update(clientRep);
{
    Client client=ClientBuilder.newClient();
    UriBuilder builder=UriBuilder.fromUri(org.keycloak.testsuite.Constants.AUTH_SERVER_ROOT);
    URI grantUri=OIDCLoginProtocolService.tokenUrl(builder).build("test");
    WebTarget grantTarget=client.target(grantUri);
    response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(200,response.getStatus());
    org.keycloak.representations.AccessTokenResponse tokenResponse=response.readEntity(org.keycloak.representations.AccessTokenResponse.class);
    IDToken idToken=getIdToken(tokenResponse);
    Assert.assertEquals("coded",idToken.getOtherClaims().get("hard"));
    AccessToken accessToken=getAccessToken(tokenResponse);
    Assert.assertEquals("coded",accessToken.getOtherClaims().get("hard"));
    Assert.assertFalse(accessToken.getRealmAccess().getRoles().contains(realmRole.getName()));
    Assert.assertFalse(accessToken.getRealmAccess().getRoles().contains(realmRole2.getName()));
    response.close();
    client.close();
  }
  List<RoleRepresentation> addRole1=new LinkedList<>();
  addRole1.add(realmRole);
  templateResource.getScopeMappings().realmLevel().add(addRole1);
{
    Client client=ClientBuilder.newClient();
    UriBuilder builder=UriBuilder.fromUri(org.keycloak.testsuite.Constants.AUTH_SERVER_ROOT);
    URI grantUri=OIDCLoginProtocolService.tokenUrl(builder).build("test");
    WebTarget grantTarget=client.target(grantUri);
    response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(200,response.getStatus());
    org.keycloak.representations.AccessTokenResponse tokenResponse=response.readEntity(org.keycloak.representations.AccessTokenResponse.class);
    AccessToken accessToken=getAccessToken(tokenResponse);
    Assert.assertNotNull(accessToken.getRealmAccess());
    Assert.assertTrue(accessToken.getRealmAccess().getRoles().contains(realmRole.getName()));
    Assert.assertFalse(accessToken.getRealmAccess().getRoles().contains(realmRole2.getName()));
    response.close();
    client.close();
  }
  List<RoleRepresentation> addRole2=new LinkedList<>();
  addRole2.add(realmRole2);
  realm.clients().get(clientRep.getId()).getScopeMappings().realmLevel().add(addRole2);
{
    Client client=ClientBuilder.newClient();
    UriBuilder builder=UriBuilder.fromUri(org.keycloak.testsuite.Constants.AUTH_SERVER_ROOT);
    URI grantUri=OIDCLoginProtocolService.tokenUrl(builder).build("test");
    WebTarget grantTarget=client.target(grantUri);
    response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(200,response.getStatus());
    org.keycloak.representations.AccessTokenResponse tokenResponse=response.readEntity(org.keycloak.representations.AccessTokenResponse.class);
    AccessToken accessToken=getAccessToken(tokenResponse);
    Assert.assertNotNull(accessToken.getRealmAccess());
    Assert.assertTrue(accessToken.getRealmAccess().getRoles().contains(realmRole.getName()));
    Assert.assertTrue(accessToken.getRealmAccess().getRoles().contains(realmRole2.getName()));
    response.close();
    client.close();
  }
  templateResource.getScopeMappings().realmLevel().remove(addRole1);
  realm.clients().get(clientRep.getId()).getScopeMappings().realmLevel().remove(addRole2);
{
    Client client=ClientBuilder.newClient();
    UriBuilder builder=UriBuilder.fromUri(org.keycloak.testsuite.Constants.AUTH_SERVER_ROOT);
    URI grantUri=OIDCLoginProtocolService.tokenUrl(builder).build("test");
    WebTarget grantTarget=client.target(grantUri);
    response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(200,response.getStatus());
    org.keycloak.representations.AccessTokenResponse tokenResponse=response.readEntity(org.keycloak.representations.AccessTokenResponse.class);
    AccessToken accessToken=getAccessToken(tokenResponse);
    Assert.assertFalse(accessToken.getRealmAccess().getRoles().contains(realmRole.getName()));
    Assert.assertFalse(accessToken.getRealmAccess().getRoles().contains(realmRole2.getName()));
    response.close();
    client.close();
  }
  rep.setFullScopeAllowed(true);
  templateResource.update(rep);
{
    Client client=ClientBuilder.newClient();
    UriBuilder builder=UriBuilder.fromUri(org.keycloak.testsuite.Constants.AUTH_SERVER_ROOT);
    URI grantUri=OIDCLoginProtocolService.tokenUrl(builder).build("test");
    WebTarget grantTarget=client.target(grantUri);
    response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(200,response.getStatus());
    org.keycloak.representations.AccessTokenResponse tokenResponse=response.readEntity(org.keycloak.representations.AccessTokenResponse.class);
    AccessToken accessToken=getAccessToken(tokenResponse);
    Assert.assertNotNull(accessToken.getRealmAccess());
    Assert.assertTrue(accessToken.getRealmAccess().getRoles().contains(realmRole.getName()));
    Assert.assertTrue(accessToken.getRealmAccess().getRoles().contains(realmRole2.getName()));
    response.close();
    client.close();
  }
  clientRep.setUseTemplateScope(false);
  realm.clients().get(clientRep.getId()).update(clientRep);
{
    Client client=ClientBuilder.newClient();
    UriBuilder builder=UriBuilder.fromUri(org.keycloak.testsuite.Constants.AUTH_SERVER_ROOT);
    URI grantUri=OIDCLoginProtocolService.tokenUrl(builder).build("test");
    WebTarget grantTarget=client.target(grantUri);
    response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(200,response.getStatus());
    org.keycloak.representations.AccessTokenResponse tokenResponse=response.readEntity(org.keycloak.representations.AccessTokenResponse.class);
    AccessToken accessToken=getAccessToken(tokenResponse);
    Assert.assertFalse(accessToken.getRealmAccess().getRoles().contains(realmRole.getName()));
    Assert.assertFalse(accessToken.getRealmAccess().getRoles().contains(realmRole2.getName()));
    response.close();
    client.close();
  }
  clientRep.setClientTemplate(ClientTemplateRepresentation.NONE);
  clientRep.setFullScopeAllowed(true);
  realm.clients().get(clientRep.getId()).update(clientRep);
  realm.users().get(user.getId()).roles().realmLevel().remove(addRoles);
  realm.roles().get(realmRole.getName()).remove();
  realm.roles().get(realmRole2.getName()).remove();
  templateResource.remove();
{
    Client client=ClientBuilder.newClient();
    UriBuilder builder=UriBuilder.fromUri(org.keycloak.testsuite.Constants.AUTH_SERVER_ROOT);
    URI grantUri=OIDCLoginProtocolService.tokenUrl(builder).build("test");
    WebTarget grantTarget=client.target(grantUri);
    response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(200,response.getStatus());
    org.keycloak.representations.AccessTokenResponse tokenResponse=response.readEntity(org.keycloak.representations.AccessTokenResponse.class);
    IDToken idToken=getIdToken(tokenResponse);
    Assert.assertNull(idToken.getOtherClaims().get("hard"));
    AccessToken accessToken=getAccessToken(tokenResponse);
    Assert.assertNull(accessToken.getOtherClaims().get("hard"));
    response.close();
    client.close();
  }
  events.clear();
}
