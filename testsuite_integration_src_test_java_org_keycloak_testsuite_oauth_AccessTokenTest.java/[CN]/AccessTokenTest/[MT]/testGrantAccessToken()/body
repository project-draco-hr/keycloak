{
  Client client=ClientBuilder.newClient();
  UriBuilder builder=UriBuilder.fromUri(org.keycloak.testsuite.Constants.AUTH_SERVER_ROOT);
  URI grantUri=OIDCLoginProtocolService.tokenUrl(builder).build("test");
  WebTarget grantTarget=client.target(grantUri);
{
{
      KeycloakSession session=keycloakRule.startSession();
      RealmModel realm=session.realms().getRealmByName("test");
      realm.setSslRequired(SslRequired.ALL);
      session.getTransaction().commit();
      session.close();
    }
    Response response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(403,response.getStatus());
    response.close();
{
      KeycloakSession session=keycloakRule.startSession();
      RealmModel realm=session.realms().getRealmByName("test");
      realm.setSslRequired(SslRequired.EXTERNAL);
      session.getTransaction().commit();
      session.close();
    }
  }
{
    String header=BasicAuthHelper.createHeader("test-app","password");
    Form form=new Form();
    form.param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.PASSWORD);
    form.param("password","password");
    Response response=grantTarget.request().header(HttpHeaders.AUTHORIZATION,header).post(Entity.form(form));
    Assert.assertEquals(401,response.getStatus());
    response.close();
  }
{
    String header=BasicAuthHelper.createHeader("test-app","password");
    Form form=new Form();
    form.param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.PASSWORD);
    form.param("username","test-user@localhost");
    Response response=grantTarget.request().header(HttpHeaders.AUTHORIZATION,header).post(Entity.form(form));
    Assert.assertEquals(401,response.getStatus());
    response.close();
  }
{
    String header=BasicAuthHelper.createHeader("test-app","password");
    Form form=new Form();
    form.param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.PASSWORD);
    form.param("username","test-user@localhost");
    form.param("password","invalid");
    Response response=grantTarget.request().header(HttpHeaders.AUTHORIZATION,header).post(Entity.form(form));
    Assert.assertEquals(401,response.getStatus());
    response.close();
  }
{
    String header=BasicAuthHelper.createHeader("test-app","password");
    Form form=new Form();
    form.param(OAuth2Constants.GRANT_TYPE,OAuth2Constants.PASSWORD);
    form.param("username","test-user@localhost");
    Response response=grantTarget.request().header(HttpHeaders.AUTHORIZATION,header).post(Entity.form(form));
    Assert.assertEquals(401,response.getStatus());
    response.close();
  }
{
{
      KeycloakSession session=keycloakRule.startSession();
      RealmModel realm=session.realms().getRealmByName("test");
      ClientModel clientModel=realm.getClientByClientId("test-app");
      clientModel.setBearerOnly(true);
      session.getTransaction().commit();
      session.close();
    }
    Response response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(400,response.getStatus());
    response.close();
{
      KeycloakSession session=keycloakRule.startSession();
      RealmModel realm=session.realms().getRealmByName("test");
      ClientModel clientModel=realm.getClientByClientId("test-app");
      clientModel.setBearerOnly(false);
      session.getTransaction().commit();
      session.close();
    }
  }
{
{
      KeycloakSession session=keycloakRule.startSession();
      RealmModel realm=session.realms().getRealmByName("test");
      realm.setEnabled(false);
      session.getTransaction().commit();
      session.close();
    }
    Response response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(403,response.getStatus());
    response.close();
{
      KeycloakSession session=keycloakRule.startSession();
      RealmModel realm=session.realms().getRealmByName("test");
      realm.setEnabled(true);
      session.getTransaction().commit();
      session.close();
    }
  }
{
{
      KeycloakSession session=keycloakRule.startSession();
      RealmModel realm=session.realms().getRealmByName("test");
      ClientModel clientModel=realm.getClientByClientId("test-app");
      clientModel.setEnabled(false);
      session.getTransaction().commit();
      session.close();
    }
    Response response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(400,response.getStatus());
    response.close();
{
      KeycloakSession session=keycloakRule.startSession();
      RealmModel realm=session.realms().getRealmByName("test");
      ClientModel clientModel=realm.getClientByClientId("test-app");
      clientModel.setEnabled(true);
      session.getTransaction().commit();
      session.close();
    }
  }
{
{
      KeycloakSession session=keycloakRule.startSession();
      RealmModel realm=session.realms().getRealmByName("test");
      UserModel user=session.users().getUserByUsername("test-user@localhost",realm);
      user.addRequiredAction(UserModel.RequiredAction.UPDATE_PASSWORD);
      session.getTransaction().commit();
      session.close();
    }
    Response response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(400,response.getStatus());
    response.close();
{
      KeycloakSession session=keycloakRule.startSession();
      RealmModel realm=session.realms().getRealmByName("test");
      UserModel user=session.users().getUserByUsername("test-user@localhost",realm);
      user.removeRequiredAction(UserModel.RequiredAction.UPDATE_PASSWORD);
      session.getTransaction().commit();
      session.close();
    }
  }
{
{
      KeycloakSession session=keycloakRule.startSession();
      RealmModel realm=session.realms().getRealmByName("test");
      UserModel user=session.users().getUserByUsername("test-user@localhost",realm);
      user.setEnabled(false);
      session.getTransaction().commit();
      session.close();
    }
    Response response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(400,response.getStatus());
    response.close();
{
      KeycloakSession session=keycloakRule.startSession();
      RealmModel realm=session.realms().getRealmByName("test");
      UserModel user=session.users().getUserByUsername("test-user@localhost",realm);
      user.setEnabled(true);
      session.getTransaction().commit();
      session.close();
    }
  }
{
    Response response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(200,response.getStatus());
    org.keycloak.representations.AccessTokenResponse tokenResponse=response.readEntity(org.keycloak.representations.AccessTokenResponse.class);
    response.close();
  }
  client.close();
  events.clear();
}
