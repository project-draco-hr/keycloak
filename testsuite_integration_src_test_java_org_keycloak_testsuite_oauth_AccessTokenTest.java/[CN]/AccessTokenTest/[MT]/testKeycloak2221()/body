{
  Client client=ClientBuilder.newClient();
  UriBuilder builder=UriBuilder.fromUri(org.keycloak.testsuite.Constants.AUTH_SERVER_ROOT);
  URI grantUri=OIDCLoginProtocolService.tokenUrl(builder).build("test");
  WebTarget grantTarget=client.target(grantUri);
{
    KeycloakSession session=keycloakRule.startSession();
    RealmModel realm=session.realms().getRealmByName("test");
    ClientModel app=realm.getClientByClientId("test-app");
    app.addProtocolMapper(RoleNameMapper.create("rename-role","user","realm-user"));
    app.addProtocolMapper(RoleNameMapper.create("rename-role2","admin","the-admin"));
    session.getTransaction().commit();
    session.close();
  }
{
    Response response=executeGrantRequest(grantTarget,"no-permissions","password");
    Assert.assertEquals(200,response.getStatus());
    org.keycloak.representations.AccessTokenResponse tokenResponse=response.readEntity(org.keycloak.representations.AccessTokenResponse.class);
    AccessToken accessToken=getAccessToken(tokenResponse);
    Assert.assertEquals(accessToken.getRealmAccess().getRoles().size(),1);
    Assert.assertTrue(accessToken.getRealmAccess().getRoles().contains("realm-user"));
    response.close();
  }
{
    KeycloakSession session=keycloakRule.startSession();
    RealmModel realm=session.realms().getRealmByName("test");
    ClientModel app=realm.getClientByClientId("test-app");
    for (    ProtocolMapperModel model : app.getProtocolMappers()) {
      if (model.getName().startsWith("rename-role")) {
        app.removeProtocolMapper(model);
      }
    }
    session.getTransaction().commit();
    session.close();
  }
  events.clear();
}
