{
  Client client=ClientBuilder.newClient();
  UriBuilder builder=UriBuilder.fromUri(org.keycloak.testsuite.Constants.AUTH_SERVER_ROOT);
  URI grantUri=OIDCLoginProtocolService.grantAccessTokenUrl(builder).build("test");
  WebTarget grantTarget=client.target(grantUri);
{
    KeycloakSession session=keycloakRule.startSession();
    RealmModel realm=session.realms().getRealmByName("test");
    UserModel user=session.users().getUserByUsername("test-user@localhost",realm);
    user.setAttribute("street","5 Yawkey Way");
    user.setAttribute("locality","Boston");
    user.setAttribute("region","MA");
    user.setAttribute("postal_code","02115");
    user.setAttribute("country","USA");
    user.setAttribute("phone","617-777-6666");
    ApplicationModel app=realm.getApplicationByName("test-app");
    ProtocolMapperModel mapper=AddressMapper.createAddressMapper(true,true);
    app.addProtocolMapper(mapper);
    app.addProtocolMapper(HardcodedClaim.create("hard","hard","coded","String",false,null,true,true));
    app.addProtocolMapper(HardcodedClaim.create("hard-nested","nested.hard","coded-nested","String",false,null,true,true));
    app.addProtocolMapper(UserAttributeMapper.createClaimMapper("custom phone","phone","home_phone","String",true,"",true,true));
    app.addProtocolMapper(UserAttributeMapper.createClaimMapper("nested phone","phone","home.phone","String",true,"",true,true));
    app.addProtocolMapper(HardcodedRole.create("hard-realm","hardcoded"));
    app.addProtocolMapper(HardcodedRole.create("hard-app","app.hardcoded"));
    app.addProtocolMapper(RoleNameMapper.create("rename-app-role","test-app.customer-user","realm-user"));
    session.getTransaction().commit();
    session.close();
  }
{
    Response response=executeGrantAccessTokenRequest(grantTarget);
    Assert.assertEquals(200,response.getStatus());
    org.keycloak.representations.AccessTokenResponse tokenResponse=response.readEntity(org.keycloak.representations.AccessTokenResponse.class);
    IDToken idToken=getIdToken(tokenResponse);
    Assert.assertNotNull(idToken.getAddress());
    Assert.assertEquals(idToken.getName(),"Tom Brady");
    Assert.assertEquals(idToken.getAddress().getStreetAddress(),"5 Yawkey Way");
    Assert.assertEquals(idToken.getAddress().getLocality(),"Boston");
    Assert.assertEquals(idToken.getAddress().getRegion(),"MA");
    Assert.assertEquals(idToken.getAddress().getPostalCode(),"02115");
    Assert.assertEquals(idToken.getAddress().getCountry(),"USA");
    Assert.assertNotNull(idToken.getOtherClaims().get("home_phone"));
    Assert.assertEquals("617-777-6666",idToken.getOtherClaims().get("home_phone"));
    Assert.assertEquals("coded",idToken.getOtherClaims().get("hard"));
    Map nested=(Map)idToken.getOtherClaims().get("nested");
    Assert.assertEquals("coded-nested",nested.get("hard"));
    nested=(Map)idToken.getOtherClaims().get("home");
    Assert.assertEquals("617-777-6666",nested.get("phone"));
    AccessToken accessToken=getAccessToken(tokenResponse);
    Assert.assertEquals(accessToken.getName(),"Tom Brady");
    Assert.assertNotNull(accessToken.getAddress());
    Assert.assertEquals(accessToken.getAddress().getStreetAddress(),"5 Yawkey Way");
    Assert.assertEquals(accessToken.getAddress().getLocality(),"Boston");
    Assert.assertEquals(accessToken.getAddress().getRegion(),"MA");
    Assert.assertEquals(accessToken.getAddress().getPostalCode(),"02115");
    Assert.assertEquals(accessToken.getAddress().getCountry(),"USA");
    Assert.assertNotNull(accessToken.getOtherClaims().get("home_phone"));
    Assert.assertEquals("617-777-6666",accessToken.getOtherClaims().get("home_phone"));
    Assert.assertEquals("coded",accessToken.getOtherClaims().get("hard"));
    nested=(Map)accessToken.getOtherClaims().get("nested");
    Assert.assertEquals("coded-nested",nested.get("hard"));
    nested=(Map)accessToken.getOtherClaims().get("home");
    Assert.assertEquals("617-777-6666",nested.get("phone"));
    Assert.assertTrue(accessToken.getRealmAccess().getRoles().contains("hardcoded"));
    Assert.assertTrue(accessToken.getRealmAccess().getRoles().contains("realm-user"));
    Assert.assertFalse(accessToken.getResourceAccess("test-app").getRoles().contains("customer-user"));
    Assert.assertTrue(accessToken.getResourceAccess("app").getRoles().contains("hardcoded"));
    response.close();
  }
  client.close();
{
    KeycloakSession session=keycloakRule.startSession();
    RealmModel realm=session.realms().getRealmByName("test");
    ApplicationModel app=realm.getApplicationByName("test-app");
    for (    ProtocolMapperModel model : app.getProtocolMappers()) {
      if (model.getName().equals("address") || model.getName().equals("hard") || model.getName().equals("hard-nested")|| model.getName().equals("custom phone")|| model.getName().equals("nested phone")|| model.getName().equals("rename-app-role")|| model.getName().equals("hard-realm")|| model.getName().equals("hard-app")) {
        app.removeProtocolMapper(model);
      }
    }
    session.getTransaction().commit();
    session.close();
  }
  events.clear();
}
