{
  oauth.clientId("third-party");
  oauth.doLoginGrant("test-user@localhost","password");
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      ProtocolMapperModel protocolMapper=UserSessionNoteMapper.createClaimMapper(KerberosConstants.GSS_DELEGATION_CREDENTIAL_DISPLAY_NAME,KerberosConstants.GSS_DELEGATION_CREDENTIAL,KerberosConstants.GSS_DELEGATION_CREDENTIAL,"String",true,KerberosConstants.GSS_DELEGATION_CREDENTIAL_DISPLAY_NAME,true,false);
      ClientModel thirdPartyApp=appRealm.getClientByClientId("third-party");
      thirdPartyApp.addProtocolMapper(protocolMapper);
      RoleModel newRole=appRealm.addRole("new-role");
      thirdPartyApp.addScopeMapping(newRole);
      UserModel testUser=manager.getSession().users().getUserByUsername("test-user@localhost",appRealm);
      testUser.grantRole(newRole);
    }
  }
);
  grantPage.assertCurrent();
  grantPage.accept();
  events.expectLogin().client("third-party").detail(Details.CONSENT,Details.CONSENT_VALUE_CONSENT_GRANTED).assertEvent();
  accountAppsPage.open();
  AccountApplicationsPage.AppEntry appEntry=accountAppsPage.getApplications().get("third-party");
  Assert.assertFalse(appEntry.getRolesGranted().contains("new-role"));
  Assert.assertFalse(appEntry.getProtocolMappersGranted().contains(KerberosConstants.GSS_DELEGATION_CREDENTIAL_DISPLAY_NAME));
  oauth.openLoginForm();
  grantPage.assertCurrent();
  Assert.assertFalse(driver.getPageSource().contains(ROLE_USER));
  Assert.assertFalse(driver.getPageSource().contains("Full name"));
  Assert.assertTrue(driver.getPageSource().contains("new-role"));
  Assert.assertTrue(driver.getPageSource().contains(KerberosConstants.GSS_DELEGATION_CREDENTIAL_DISPLAY_NAME));
  grantPage.accept();
  events.expectLogin().client("third-party").detail(Details.CONSENT,Details.CONSENT_VALUE_CONSENT_GRANTED).assertEvent();
  accountAppsPage.open();
  appEntry=accountAppsPage.getApplications().get("third-party");
  Assert.assertTrue(appEntry.getRolesGranted().contains("new-role"));
  Assert.assertTrue(appEntry.getProtocolMappersGranted().contains(KerberosConstants.GSS_DELEGATION_CREDENTIAL_DISPLAY_NAME));
  accountAppsPage.revokeGrant("third-party");
  events.expect(EventType.REVOKE_GRANT).client("account").detail(Details.REVOKED_CLIENT,"third-party").assertEvent();
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      ClientModel thirdPartyApp=appRealm.getClientByClientId("third-party");
      ProtocolMapperModel gssMapper=thirdPartyApp.getProtocolMapperByName(OIDCLoginProtocol.LOGIN_PROTOCOL,KerberosConstants.GSS_DELEGATION_CREDENTIAL_DISPLAY_NAME);
      thirdPartyApp.removeProtocolMapper(gssMapper);
      RoleModel newRole=appRealm.getRole("new-role");
      appRealm.removeRole(newRole);
    }
  }
);
}
