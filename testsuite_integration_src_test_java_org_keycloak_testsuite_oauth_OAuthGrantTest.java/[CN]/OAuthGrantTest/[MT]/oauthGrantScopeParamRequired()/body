{
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      ClientModel thirdParty=appRealm.getClientByClientId("third-party");
      RoleModel barAppRole=thirdParty.addRole("bar-role");
      barAppRole.setScopeParamRequired(true);
      RoleModel fooRole=appRealm.addRole("foo-role");
      fooRole.setScopeParamRequired(true);
      thirdParty.addScopeMapping(fooRole);
      UserModel testUser=manager.getSession().users().getUserByUsername("test-user@localhost",appRealm);
      testUser.grantRole(fooRole);
      testUser.grantRole(barAppRole);
    }
  }
);
  oauth.clientId("third-party");
  oauth.doLoginGrant("test-user@localhost","password");
  grantPage.assertCurrent();
  Assert.assertFalse(driver.getPageSource().contains("foo-role"));
  Assert.assertFalse(driver.getPageSource().contains("bar-role"));
  grantPage.cancel();
  events.expectLogin().client("third-party").error("rejected_by_user").removeDetail(Details.CONSENT).assertEvent();
  oauth.scope("foo-role third-party/bar-role");
  oauth.doLoginGrant("test-user@localhost","password");
  grantPage.assertCurrent();
  Assert.assertTrue(driver.getPageSource().contains("foo-role"));
  Assert.assertTrue(driver.getPageSource().contains("bar-role"));
  grantPage.accept();
  events.expectLogin().client("third-party").detail(Details.CONSENT,Details.CONSENT_VALUE_CONSENT_GRANTED).assertEvent();
  accountAppsPage.open();
  accountAppsPage.revokeGrant("third-party");
  events.expect(EventType.REVOKE_GRANT).client("account").detail(Details.REVOKED_CLIENT,"third-party").assertEvent();
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      appRealm.removeRole(appRealm.getRole("foo-role"));
      ClientModel thirdparty=appRealm.getClientByClientId("third-party");
      thirdparty.removeRole(thirdparty.getRole("bar-role"));
    }
  }
);
}
