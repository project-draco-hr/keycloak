{
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      ClientModel offlineClient=appRealm.getClientByClientId("offline-client");
      UserModel testUser=session.users().getUserByUsername("test-user@localhost",appRealm);
      RoleModel offlineAccess=appRealm.getRole(Constants.OFFLINE_ACCESS_ROLE);
      Assert.assertFalse(TokenManager.getAccess(null,true,offlineClient,testUser).contains(offlineAccess));
      Assert.assertTrue(TokenManager.getAccess(OAuth2Constants.OFFLINE_ACCESS,true,offlineClient,testUser).contains(offlineAccess));
      RoleModel composite=appRealm.addRole("composite");
      composite.addCompositeRole(offlineAccess);
      testUser.deleteRoleMapping(offlineAccess);
      testUser.grantRole(composite);
      Assert.assertFalse(TokenManager.getAccess(null,true,offlineClient,testUser).contains(offlineAccess));
      Assert.assertTrue(TokenManager.getAccess(OAuth2Constants.OFFLINE_ACCESS,true,offlineClient,testUser).contains(offlineAccess));
    }
  }
);
  offlineTokenDirectGrantFlow();
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      RoleModel composite=appRealm.getRole("composite");
      RoleModel offlineAccess=appRealm.getRole(Constants.OFFLINE_ACCESS_ROLE);
      UserModel testUser=session.users().getUserByUsername("test-user@localhost",appRealm);
      testUser.deleteRoleMapping(composite);
      appRealm.removeRole(composite);
      testUser.grantRole(offlineAccess);
    }
  }
);
}
