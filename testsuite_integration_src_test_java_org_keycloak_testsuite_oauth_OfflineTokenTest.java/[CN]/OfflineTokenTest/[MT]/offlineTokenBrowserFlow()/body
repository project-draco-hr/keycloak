{
  oauth.scope(OAuth2Constants.OFFLINE_ACCESS);
  oauth.clientId("offline-client");
  oauth.redirectUri(offlineClientAppUri);
  oauth.doLogin("test-user@localhost","password");
  Event loginEvent=events.expectLogin().client("offline-client").detail(Details.REDIRECT_URI,offlineClientAppUri).assertEvent();
  final String sessionId=loginEvent.getSessionId();
  String codeId=loginEvent.getDetails().get(Details.CODE_ID);
  String code=oauth.getCurrentQuery().get(OAuth2Constants.CODE);
  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,"secret1");
  AccessToken token=oauth.verifyToken(tokenResponse.getAccessToken());
  String offlineTokenString=tokenResponse.getRefreshToken();
  RefreshToken offlineToken=oauth.verifyRefreshToken(offlineTokenString);
  events.expectCodeToToken(codeId,sessionId).client("offline-client").detail(Details.REFRESH_TOKEN_TYPE,TokenUtil.TOKEN_TYPE_OFFLINE).assertEvent();
  Assert.assertEquals(TokenUtil.TOKEN_TYPE_OFFLINE,offlineToken.getType());
  Assert.assertEquals(0,offlineToken.getExpiration());
  String newRefreshTokenString=testRefreshWithOfflineToken(token,offlineToken,offlineTokenString,sessionId,userId);
  Time.setOffset(3000000);
  OAuthClient.AccessTokenResponse response=oauth.doRefreshTokenRequest(newRefreshTokenString,"secret1");
  Assert.assertEquals(400,response.getStatusCode());
  assertEquals("invalid_grant",response.getError());
  events.expectRefresh(offlineToken.getId(),sessionId).client("offline-client").error(Errors.INVALID_TOKEN).user(userId).clearDetails().assertEvent();
  Time.setOffset(0);
}
