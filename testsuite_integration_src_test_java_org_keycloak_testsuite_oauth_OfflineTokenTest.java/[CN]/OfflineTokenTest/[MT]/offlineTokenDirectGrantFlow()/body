{
  oauth.scope(OAuth2Constants.OFFLINE_ACCESS);
  oauth.clientId("offline-client");
  OAuthClient.AccessTokenResponse tokenResponse=oauth.doGrantAccessTokenRequest("secret1","test-user@localhost","password");
  AccessToken token=oauth.verifyToken(tokenResponse.getAccessToken());
  String offlineTokenString=tokenResponse.getRefreshToken();
  RefreshToken offlineToken=oauth.verifyRefreshToken(offlineTokenString);
  events.expectLogin().client("offline-client").user(userId).session(token.getSessionState()).detail(Details.RESPONSE_TYPE,"token").detail(Details.TOKEN_ID,token.getId()).detail(Details.REFRESH_TOKEN_ID,offlineToken.getId()).detail(Details.REFRESH_TOKEN_TYPE,TokenUtil.TOKEN_TYPE_OFFLINE).detail(Details.USERNAME,"test-user@localhost").removeDetail(Details.CODE_ID).removeDetail(Details.REDIRECT_URI).removeDetail(Details.CONSENT).assertEvent();
  Assert.assertEquals(TokenUtil.TOKEN_TYPE_OFFLINE,offlineToken.getType());
  Assert.assertEquals(0,offlineToken.getExpiration());
  testRefreshWithOfflineToken(token,offlineToken,offlineTokenString,token.getSessionState(),userId);
  testRefreshWithOfflineToken(token,offlineToken,offlineTokenString,token.getSessionState(),userId);
}
