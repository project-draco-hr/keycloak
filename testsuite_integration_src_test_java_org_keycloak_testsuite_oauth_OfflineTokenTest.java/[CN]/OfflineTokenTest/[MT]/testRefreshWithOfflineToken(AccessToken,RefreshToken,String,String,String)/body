{
  Time.setOffset(99999);
  Assert.assertFalse(oldToken.isActive());
  Assert.assertTrue(offlineToken.isActive());
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      manager.getSession().sessions().removeExpiredUserSessions(appRealm);
    }
  }
);
  keycloakRule.update(new KeycloakRule.KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      Assert.assertNull(manager.getSession().sessions().getUserSession(appRealm,sessionId));
    }
  }
);
  OAuthClient.AccessTokenResponse response=oauth.doRefreshTokenRequest(offlineTokenString,"secret1");
  AccessToken refreshedToken=oauth.verifyToken(response.getAccessToken());
  Assert.assertEquals(200,response.getStatusCode());
  Assert.assertEquals(sessionId,refreshedToken.getSessionState());
  String newRefreshToken=response.getRefreshToken();
  Assert.assertNotNull(newRefreshToken);
  Assert.assertNotEquals(oldToken.getId(),refreshedToken.getId());
  Assert.assertEquals(userId,refreshedToken.getSubject());
  Assert.assertEquals(2,refreshedToken.getRealmAccess().getRoles().size());
  Assert.assertTrue(refreshedToken.getRealmAccess().isUserInRole("user"));
  Assert.assertTrue(refreshedToken.getRealmAccess().isUserInRole(Constants.OFFLINE_ACCESS_ROLE));
  Assert.assertEquals(1,refreshedToken.getResourceAccess("test-app").getRoles().size());
  Assert.assertTrue(refreshedToken.getResourceAccess("test-app").isUserInRole("customer-user"));
  Event refreshEvent=events.expectRefresh(offlineToken.getId(),sessionId).client("offline-client").user(userId).removeDetail(Details.UPDATED_REFRESH_TOKEN_ID).detail(Details.REFRESH_TOKEN_TYPE,TokenUtil.TOKEN_TYPE_OFFLINE).assertEvent();
  Assert.assertNotEquals(oldToken.getId(),refreshEvent.getDetails().get(Details.TOKEN_ID));
  Time.setOffset(0);
  return newRefreshToken;
}
