{
  oauth.doLogin("test-user@localhost","password");
  Event loginEvent=events.expectLogin().assertEvent();
  String sessionId=loginEvent.getSessionId();
  String codeId=loginEvent.getDetails().get(Details.CODE_ID);
  String code=oauth.getCurrentQuery().get(OAuth2Constants.CODE);
  AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,"password");
  AccessToken token=oauth.verifyToken(tokenResponse.getAccessToken());
  String refreshTokenString=tokenResponse.getRefreshToken();
  RefreshToken refreshToken=oauth.verifyRefreshToken(refreshTokenString);
  Event tokenEvent=events.expectCodeToToken(codeId,sessionId).assertEvent();
  Assert.assertNotNull(refreshTokenString);
  Assert.assertEquals("bearer",tokenResponse.getTokenType());
  Assert.assertThat(token.getExpiration() - Time.currentTime(),allOf(greaterThanOrEqualTo(200),lessThanOrEqualTo(350)));
  int actual=refreshToken.getExpiration() - Time.currentTime();
  Assert.assertThat(actual,allOf(greaterThanOrEqualTo(1799),lessThanOrEqualTo(1800)));
  Assert.assertEquals(sessionId,refreshToken.getSessionState());
  Time.setOffset(2);
  AccessTokenResponse response=oauth.doRefreshTokenRequest(refreshTokenString,"password");
  AccessToken refreshedToken=oauth.verifyToken(response.getAccessToken());
  RefreshToken refreshedRefreshToken=oauth.verifyRefreshToken(response.getRefreshToken());
  Assert.assertEquals(200,response.getStatusCode());
  Assert.assertEquals(sessionId,refreshedToken.getSessionState());
  Assert.assertEquals(sessionId,refreshedRefreshToken.getSessionState());
  Assert.assertThat(response.getExpiresIn(),allOf(greaterThanOrEqualTo(250),lessThanOrEqualTo(300)));
  Assert.assertThat(refreshedToken.getExpiration() - Time.currentTime(),allOf(greaterThanOrEqualTo(250),lessThanOrEqualTo(300)));
  Assert.assertThat(refreshedToken.getExpiration() - token.getExpiration(),allOf(greaterThanOrEqualTo(1),lessThanOrEqualTo(10)));
  Assert.assertThat(refreshedRefreshToken.getExpiration() - refreshToken.getExpiration(),allOf(greaterThanOrEqualTo(1),lessThanOrEqualTo(10)));
  Assert.assertNotEquals(token.getId(),refreshedToken.getId());
  Assert.assertNotEquals(refreshToken.getId(),refreshedRefreshToken.getId());
  Assert.assertEquals("bearer",response.getTokenType());
  Assert.assertEquals(keycloakRule.getUser("test","test-user@localhost").getId(),refreshedToken.getSubject());
  Assert.assertNotEquals("test-user@localhost",refreshedToken.getSubject());
  Assert.assertEquals(1,refreshedToken.getRealmAccess().getRoles().size());
  Assert.assertTrue(refreshedToken.getRealmAccess().isUserInRole("user"));
  Assert.assertEquals(1,refreshedToken.getResourceAccess(oauth.getClientId()).getRoles().size());
  Assert.assertTrue(refreshedToken.getResourceAccess(oauth.getClientId()).isUserInRole("customer-user"));
  Event refreshEvent=events.expectRefresh(tokenEvent.getDetails().get(Details.REFRESH_TOKEN_ID),sessionId).assertEvent();
  Assert.assertNotEquals(tokenEvent.getDetails().get(Details.TOKEN_ID),refreshEvent.getDetails().get(Details.TOKEN_ID));
  Assert.assertNotEquals(tokenEvent.getDetails().get(Details.REFRESH_TOKEN_ID),refreshEvent.getDetails().get(Details.UPDATED_REFRESH_TOKEN_ID));
  Time.setOffset(0);
}
