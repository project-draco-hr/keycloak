{
  oauth.clientId(clientId);
  OAuthClient.AccessTokenResponse response=oauth.doGrantAccessTokenRequest("secret",login,"password",otp);
  assertEquals(200,response.getStatusCode());
  AccessToken accessToken=oauth.verifyToken(response.getAccessToken());
  RefreshToken refreshToken=oauth.verifyRefreshToken(response.getRefreshToken());
  events.expectLogin().client(clientId).user(userId).session(accessToken.getSessionState()).detail(Details.GRANT_TYPE,OAuth2Constants.PASSWORD).detail(Details.TOKEN_ID,accessToken.getId()).detail(Details.REFRESH_TOKEN_ID,refreshToken.getId()).detail(Details.USERNAME,login).removeDetail(Details.CODE_ID).removeDetail(Details.REDIRECT_URI).removeDetail(Details.CONSENT).assertEvent();
  assertEquals(accessToken.getSessionState(),refreshToken.getSessionState());
  OAuthClient.AccessTokenResponse refreshedResponse=oauth.doRefreshTokenRequest(response.getRefreshToken(),"secret");
  AccessToken refreshedAccessToken=oauth.verifyToken(refreshedResponse.getAccessToken());
  RefreshToken refreshedRefreshToken=oauth.verifyRefreshToken(refreshedResponse.getRefreshToken());
  assertEquals(accessToken.getSessionState(),refreshedAccessToken.getSessionState());
  assertEquals(accessToken.getSessionState(),refreshedRefreshToken.getSessionState());
  events.expectRefresh(refreshToken.getId(),refreshToken.getSessionState()).user(userId).client(clientId).assertEvent();
}
