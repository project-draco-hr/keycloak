{
  loginPage.open();
  loginPage.clickSocial("dummy");
  driver.findElement(By.id("id")).sendKeys("1");
  driver.findElement(By.id("username")).sendKeys("dummy-user1");
  driver.findElement(By.id("firstname")).sendKeys("Bob");
  driver.findElement(By.id("lastname")).sendKeys("Builder");
  driver.findElement(By.id("email")).sendKeys("bob@builder.com");
  driver.findElement(By.id("login")).click();
  Assert.assertEquals(RequestType.AUTH_RESPONSE,appPage.getRequestType());
  String userId=events.expect("register").user(AssertEvents.isUUID()).detail(Details.EMAIL,"bob@builder.com").detail(Details.RESPONSE_TYPE,"code").detail(Details.REGISTER_METHOD,"social@dummy").detail(Details.REDIRECT_URI,AssertEvents.DEFAULT_REDIRECT_URI).detail(Details.USERNAME,"1@dummy").assertEvent().getUserId();
  String codeId=events.expectLogin().user(userId).detail(Details.USERNAME,"1@dummy").detail(Details.AUTH_METHOD,"social@dummy").assertEvent().getDetails().get(Details.CODE_ID);
  AccessTokenResponse response=oauth.doAccessTokenRequest(oauth.getCurrentQuery().get(OAuth2Constants.CODE),"password");
  events.expectCodeToToken(codeId).user(userId).assertEvent();
  AccessToken token=oauth.verifyToken(response.getAccessToken());
  Assert.assertEquals(36,token.getSubject().length());
  UserRepresentation profile=keycloakRule.getUserById("test",token.getSubject());
  Assert.assertEquals(36,profile.getUsername().length());
  Assert.assertEquals("Bob",profile.getFirstName());
  Assert.assertEquals("Builder",profile.getLastName());
  Assert.assertEquals("bob@builder.com",profile.getEmail());
  oauth.openLogout();
  events.expectLogout().user(userId).assertEvent();
  loginPage.open();
  loginPage.clickSocial("dummy");
  driver.findElement(By.id("id")).sendKeys("1");
  driver.findElement(By.id("username")).sendKeys("dummy-user1");
  driver.findElement(By.id("login")).click();
  events.expectLogin().user(userId).detail(Details.USERNAME,"1@dummy").detail(Details.AUTH_METHOD,"social@dummy").assertEvent();
}
