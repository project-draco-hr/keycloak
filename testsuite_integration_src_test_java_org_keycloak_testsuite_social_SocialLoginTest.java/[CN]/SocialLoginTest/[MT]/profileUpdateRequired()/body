{
  keycloakRule.configure(new KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      appRealm.setUpdateProfileOnInitialSocialLogin(true);
    }
  }
);
  try {
    loginPage.open();
    loginPage.clickSocial("dummy");
    driver.findElement(By.id("id")).sendKeys("2");
    driver.findElement(By.id("username")).sendKeys("dummy-user2");
    driver.findElement(By.id("firstname")).sendKeys("Bob");
    driver.findElement(By.id("lastname")).sendKeys("Builder");
    driver.findElement(By.id("email")).sendKeys("bob@builder.com");
    driver.findElement(By.id("login")).click();
    profilePage.isCurrent();
    Assert.assertEquals("Bob",profilePage.getFirstName());
    Assert.assertEquals("Builder",profilePage.getLastName());
    Assert.assertEquals("bob@builder.com",profilePage.getEmail());
    String userId=events.expect(EventType.REGISTER).user(AssertEvents.isUUID()).detail(Details.EMAIL,"bob@builder.com").detail(Details.RESPONSE_TYPE,"code").detail(Details.REGISTER_METHOD,"social@dummy").detail(Details.REDIRECT_URI,AssertEvents.DEFAULT_REDIRECT_URI).detail(Details.USERNAME,"2@dummy").assertEvent().getUserId();
    profilePage.update("Dummy","User","dummy-user-reg@dummy-social");
    events.expectRequiredAction(EventType.UPDATE_PROFILE).user(userId).detail(Details.AUTH_METHOD,"social@dummy").detail(Details.USERNAME,"2@dummy").assertEvent();
    events.expectRequiredAction(EventType.UPDATE_EMAIL).user(userId).detail(Details.AUTH_METHOD,"social@dummy").detail(Details.USERNAME,"2@dummy").detail(Details.PREVIOUS_EMAIL,"bob@builder.com").detail(Details.UPDATED_EMAIL,"dummy-user-reg@dummy-social").assertEvent();
    Assert.assertEquals(RequestType.AUTH_RESPONSE,appPage.getRequestType());
    Event loginEvent=events.expectLogin().user(userId).removeDetail(Details.USERNAME).detail(Details.AUTH_METHOD,"social@dummy").detail(Details.USERNAME,"2@dummy").assertEvent();
    String codeId=loginEvent.getDetails().get(Details.CODE_ID);
    AccessTokenResponse response=oauth.doAccessTokenRequest(oauth.getCurrentQuery().get(OAuth2Constants.CODE),"password");
    AccessToken token=oauth.verifyToken(response.getAccessToken());
    events.expectCodeToToken(codeId,loginEvent.getSessionId()).user(userId).assertEvent();
    UserRepresentation profile=keycloakRule.getUserById("test",token.getSubject());
    Assert.assertEquals("Dummy",profile.getFirstName());
    Assert.assertEquals("User",profile.getLastName());
    Assert.assertEquals("dummy-user-reg@dummy-social",profile.getEmail());
  }
  finally {
    keycloakRule.configure(new KeycloakSetup(){
      @Override public void config(      RealmManager manager,      RealmModel adminstrationRealm,      RealmModel appRealm){
        appRealm.setUpdateProfileOnInitialSocialLogin(false);
      }
    }
);
  }
}
