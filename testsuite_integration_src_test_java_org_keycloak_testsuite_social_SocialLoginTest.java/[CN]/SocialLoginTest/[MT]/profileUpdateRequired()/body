{
  keycloakRule.configure(new KeycloakSetup(){
    @Override public void config(    RealmManager manager,    RealmModel adminstrationRealm,    RealmModel appRealm){
      appRealm.setUpdateProfileOnInitialSocialLogin(true);
    }
  }
);
  try {
    loginPage.open();
    loginPage.clickSocial("dummy");
    driver.findElement(By.id("id")).sendKeys("2");
    driver.findElement(By.id("username")).sendKeys("dummy-user2");
    driver.findElement(By.id("firstname")).sendKeys("Bob");
    driver.findElement(By.id("lastname")).sendKeys("Builder");
    driver.findElement(By.id("email")).sendKeys("bob@builder.com");
    driver.findElement(By.id("submit")).click();
    profilePage.isCurrent();
    Assert.assertEquals("Bob",profilePage.getFirstName());
    Assert.assertEquals("Builder",profilePage.getLastName());
    Assert.assertEquals("bob@builder.com",profilePage.getEmail());
    profilePage.update("Dummy","User","dummy-user-reg@dummy-social");
    Assert.assertEquals(RequestType.AUTH_RESPONSE,appPage.getRequestType());
    AccessTokenResponse response=oauth.doAccessTokenRequest(oauth.getCurrentQuery().get("code"),"password");
    AccessToken token=oauth.verifyToken(response.getAccessToken());
    UserRepresentation profile=keycloakRule.getUserById("test",token.getSubject());
    Assert.assertEquals("Dummy",profile.getFirstName());
    Assert.assertEquals("User",profile.getLastName());
    Assert.assertEquals("dummy-user-reg@dummy-social",profile.getEmail());
  }
  finally {
    keycloakRule.configure(new KeycloakSetup(){
      @Override public void config(      RealmManager manager,      RealmModel adminstrationRealm,      RealmModel appRealm){
        appRealm.setUpdateProfileOnInitialSocialLogin(false);
      }
    }
);
  }
}
